{"filter":false,"title":"paper.js","tooltip":"/vendor/assets/javascripts/paper.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":16486,"column":0},"action":"insert","lines":["/*!"," * Paper.js v0.11.4 - The Swiss Army Knife of Vector Graphics Scripting."," * http://paperjs.org/"," *"," * Copyright (c) 2011 - 2016, Juerg Lehni & Jonathan Puckey"," * http://scratchdisk.com/ & http://jonathanpuckey.com/"," *"," * Distributed under the MIT license. See LICENSE file for details."," *"," * All rights reserved."," *"," * Date: Wed Jun 7 16:56:44 2017 +0200"," *"," ***"," *"," * Straps.js - Class inheritance library with support for bean-style accessors"," *"," * Copyright (c) 2006 - 2016 Juerg Lehni"," * http://scratchdisk.com/"," *"," * Distributed under the MIT license."," *"," ***"," *"," * Acorn.js"," * http://marijnhaverbeke.nl/acorn/"," *"," * Acorn is a tiny, fast JavaScript parser written in JavaScript,"," * created by Marijn Haverbeke and released under an MIT license."," *"," */","","var paper = function(self, undefined) {","","self = self || require('./node/self.js');","var window = self.window,","\tdocument = self.document;","","var Base = new function() {","\tvar hidden = /^(statics|enumerable|beans|preserve)$/,","\t\tarray = [],","\t\tslice = array.slice,","\t\tcreate = Object.create,","\t\tdescribe = Object.getOwnPropertyDescriptor,","\t\tdefine = Object.defineProperty,","","\t\tforEach = array.forEach || function(iter, bind) {","\t\t\tfor (var i = 0, l = this.length; i < l; i++) {","\t\t\t\titer.call(bind, this[i], i, this);","\t\t\t}","\t\t},","","\t\tforIn = function(iter, bind) {","\t\t\tfor (var i in this) {","\t\t\t\tif (this.hasOwnProperty(i))","\t\t\t\t\titer.call(bind, this[i], i, this);","\t\t\t}","\t\t},","","\t\tset = Object.assign || function(dst) {","\t\t\tfor (var i = 1, l = arguments.length; i < l; i++) {","\t\t\t\tvar src = arguments[i];","\t\t\t\tfor (var key in src) {","\t\t\t\t\tif (src.hasOwnProperty(key))","\t\t\t\t\t\tdst[key] = src[key];","\t\t\t\t}","\t\t\t}","\t\t\treturn dst;","\t\t},","","\t\teach = function(obj, iter, bind) {","\t\t\tif (obj) {","\t\t\t\tvar desc = describe(obj, 'length');","\t\t\t\t(desc && typeof desc.value === 'number' ? forEach : forIn)","\t\t\t\t\t.call(obj, iter, bind = bind || obj);","\t\t\t}","\t\t\treturn bind;","\t\t};","","\tfunction inject(dest, src, enumerable, beans, preserve) {","\t\tvar beansNames = {};","","\t\tfunction field(name, val) {","\t\t\tval = val || (val = describe(src, name))","\t\t\t\t\t&& (val.get ? val : val.value);","\t\t\tif (typeof val === 'string' && val[0] === '#')","\t\t\t\tval = dest[val.substring(1)] || val;","\t\t\tvar isFunc = typeof val === 'function',","\t\t\t\tres = val,","\t\t\t\tprev = preserve || isFunc && !val.base","\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])","\t\t\t\t\t\t: null,","\t\t\t\tbean;","\t\t\tif (!preserve || !prev) {","\t\t\t\tif (isFunc && prev)","\t\t\t\t\tval.base = prev;","\t\t\t\tif (isFunc && beans !== false","\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))","\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];","\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'","\t\t\t\t\t\t|| !Base.isPlainObject(res)) {","\t\t\t\t\tres = { value: res, writable: true };","\t\t\t\t}","\t\t\t\tif ((describe(dest, name)","\t\t\t\t\t\t|| { configurable: true }).configurable) {","\t\t\t\t\tres.configurable = true;","\t\t\t\t\tres.enumerable = enumerable != null ? enumerable : !bean;","\t\t\t\t}","\t\t\t\tdefine(dest, name, res);","\t\t\t}","\t\t}","\t\tif (src) {","\t\t\tfor (var name in src) {","\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))","\t\t\t\t\tfield(name);","\t\t\t}","\t\t\tfor (var name in beansNames) {","\t\t\t\tvar part = beansNames[name],","\t\t\t\t\tset = dest['set' + part],","\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];","\t\t\t\tif (get && (beans === true || get.length === 0))","\t\t\t\t\tfield(name, { get: get, set: set });","\t\t\t}","\t\t}","\t\treturn dest;","\t}","","\tfunction Base() {","\t\tfor (var i = 0, l = arguments.length; i < l; i++) {","\t\t\tvar src = arguments[i];","\t\t\tif (src)","\t\t\t\tset(this, src);","\t\t}","\t\treturn this;","\t}","","\treturn inject(Base, {","\t\tinject: function(src) {","\t\t\tif (src) {","\t\t\t\tvar statics = src.statics === true ? src : src.statics,","\t\t\t\t\tbeans = src.beans,","\t\t\t\t\tpreserve = src.preserve;","\t\t\t\tif (statics !== src)","\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);","\t\t\t\tinject(this, statics, null, beans, preserve);","\t\t\t}","\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)","\t\t\t\tthis.inject(arguments[i]);","\t\t\treturn this;","\t\t},","","\t\textend: function() {","\t\t\tvar base = this,","\t\t\t\tctor,","\t\t\t\tproto;","\t\t\tfor (var i = 0, obj, l = arguments.length;","\t\t\t\t\ti < l && !(ctor && proto); i++) {","\t\t\t\tobj = arguments[i];","\t\t\t\tctor = ctor || obj.initialize;","\t\t\t\tproto = proto || obj.prototype;","\t\t\t}","\t\t\tctor = ctor || function() {","\t\t\t\tbase.apply(this, arguments);","\t\t\t};","\t\t\tproto = ctor.prototype = proto || create(this.prototype);","\t\t\tdefine(proto, 'constructor',","\t\t\t\t\t{ value: ctor, writable: true, configurable: true });","\t\t\tinject(ctor, this);","\t\t\tif (arguments.length)","\t\t\t\tthis.inject.apply(ctor, arguments);","\t\t\tctor.base = base;","\t\t\treturn ctor;","\t\t}","\t}).inject({","\t\tenumerable: false,","","\t\tinitialize: Base,","","\t\tset: Base,","","\t\tinject: function() {","\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {","\t\t\t\tvar src = arguments[i];","\t\t\t\tif (src) {","\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);","\t\t\t\t}","\t\t\t}","\t\t\treturn this;","\t\t},","","\t\textend: function() {","\t\t\tvar res = create(this);","\t\t\treturn res.inject.apply(res, arguments);","\t\t},","","\t\teach: function(iter, bind) {","\t\t\treturn each(this, iter, bind);","\t\t},","","\t\tclone: function() {","\t\t\treturn new this.constructor(this);","\t\t},","","\t\tstatics: {","\t\t\tset: set,","\t\t\teach: each,","\t\t\tcreate: create,","\t\t\tdefine: define,","\t\t\tdescribe: describe,","","\t\t\tclone: function(obj) {","\t\t\t\treturn set(new obj.constructor(), obj);","\t\t\t},","","\t\t\tisPlainObject: function(obj) {","\t\t\t\tvar ctor = obj != null && obj.constructor;","\t\t\t\treturn ctor && (ctor === Object || ctor === Base","\t\t\t\t\t\t|| ctor.name === 'Object');","\t\t\t},","","\t\t\tpick: function(a, b) {","\t\t\t\treturn a !== undefined ? a : b;","\t\t\t},","","\t\t\tslice: function(list, begin, end) {","\t\t\t\treturn slice.call(list, begin, end);","\t\t\t}","\t\t}","\t});","};","","if (typeof module !== 'undefined')","\tmodule.exports = Base;","","Base.inject({","\tenumerable: false,","","\ttoString: function() {","\t\treturn this._id != null","\t\t\t?  (this._class || 'Object') + (this._name","\t\t\t\t? \" '\" + this._name + \"'\"","\t\t\t\t: ' @' + this._id)","\t\t\t: '{ ' + Base.each(this, function(value, key) {","\t\t\t\tif (!/^_/.test(key)) {","\t\t\t\t\tvar type = typeof value;","\t\t\t\t\tthis.push(key + ': ' + (type === 'number'","\t\t\t\t\t\t\t? Formatter.instance.number(value)","\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));","\t\t\t\t}","\t\t\t}, []).join(', ') + ' }';","\t},","","\tgetClassName: function() {","\t\treturn this._class || '';","\t},","","\timportJSON: function(json) {","\t\treturn Base.importJSON(json, this);","\t},","","\texportJSON: function(options) {","\t\treturn Base.exportJSON(this, options);","\t},","","\ttoJSON: function() {","\t\treturn Base.serialize(this);","\t},","","\tset: function(props, exclude) {","\t\tif (props)","\t\t\tBase.filter(this, props, exclude, this._prioritize);","\t\treturn this;","\t}","}, {","","beans: false,","statics: {","\texports: {},","","\textend: function extend() {","\t\tvar res = extend.base.apply(this, arguments),","\t\t\tname = res.prototype._class;","\t\tif (name && !Base.exports[name])","\t\t\tBase.exports[name] = res;","\t\treturn res;","\t},","","\tequals: function(obj1, obj2) {","\t\tif (obj1 === obj2)","\t\t\treturn true;","\t\tif (obj1 && obj1.equals)","\t\t\treturn obj1.equals(obj2);","\t\tif (obj2 && obj2.equals)","\t\t\treturn obj2.equals(obj1);","\t\tif (obj1 && obj2","\t\t\t\t&& typeof obj1 === 'object' && typeof obj2 === 'object') {","\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {","\t\t\t\tvar length = obj1.length;","\t\t\t\tif (length !== obj2.length)","\t\t\t\t\treturn false;","\t\t\t\twhile (length--) {","\t\t\t\t\tif (!Base.equals(obj1[length], obj2[length]))","\t\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tvar keys = Object.keys(obj1),","\t\t\t\t\tlength = keys.length;","\t\t\t\tif (length !== Object.keys(obj2).length)","\t\t\t\t\treturn false;","\t\t\t\twhile (length--) {","\t\t\t\t\tvar key = keys[length];","\t\t\t\t\tif (!(obj2.hasOwnProperty(key)","\t\t\t\t\t\t\t&& Base.equals(obj1[key], obj2[key])))","\t\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t}","\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tread: function(list, start, options, amount) {","\t\tif (this === Base) {","\t\t\tvar value = this.peek(list, start);","\t\t\tlist.__index++;","\t\t\treturn value;","\t\t}","\t\tvar proto = this.prototype,","\t\t\treadIndex = proto._readIndex,","\t\t\tbegin = start || readIndex && list.__index || 0,","\t\t\tlength = list.length,","\t\t\tobj = list[begin];","\t\tamount = amount || length - begin;","\t\tif (obj instanceof this","\t\t\t|| options && options.readNull && obj == null && amount <= 1) {","\t\t\tif (readIndex)","\t\t\t\tlist.__index = begin + 1;","\t\t\treturn obj && options && options.clone ? obj.clone() : obj;","\t\t}","\t\tobj = Base.create(proto);","\t\tif (readIndex)","\t\t\tobj.__read = true;","\t\tobj = obj.initialize.apply(obj, begin > 0 || begin + amount < length","\t\t\t\t? Base.slice(list, begin, begin + amount)","\t\t\t\t: list) || obj;","\t\tif (readIndex) {","\t\t\tlist.__index = begin + obj.__read;","\t\t\tvar filtered = obj.__filtered;","\t\t\tif (filtered) {","\t\t\t\tlist.__filtered = filtered;","\t\t\t\tobj.__filtered = undefined;","\t\t\t}","\t\t\tobj.__read = undefined;","\t\t}","\t\treturn obj;","\t},","","\tpeek: function(list, start) {","\t\treturn list[list.__index = start || list.__index || 0];","\t},","","\tremain: function(list) {","\t\treturn list.length - (list.__index || 0);","\t},","","\treadList: function(list, start, options, amount) {","\t\tvar res = [],","\t\t\tentry,","\t\t\tbegin = start || 0,","\t\t\tend = amount ? begin + amount : list.length;","\t\tfor (var i = begin; i < end; i++) {","\t\t\tres.push(Array.isArray(entry = list[i])","\t\t\t\t\t? this.read(entry, 0, options)","\t\t\t\t\t: this.read(list, i, options, 1));","\t\t}","\t\treturn res;","\t},","","\treadNamed: function(list, name, start, options, amount) {","\t\tvar value = this.getNamed(list, name),","\t\t\thasObject = value !== undefined;","\t\tif (hasObject) {","\t\t\tvar filtered = list.__filtered;","\t\t\tif (!filtered) {","\t\t\t\tfiltered = list.__filtered = Base.create(list[0]);","\t\t\t\tfiltered.__unfiltered = list[0];","\t\t\t}","\t\t\tfiltered[name] = undefined;","\t\t}","\t\tvar l = hasObject ? [value] : list,","\t\t\tres = this.read(l, start, options, amount);","\t\treturn res;","\t},","","\tgetNamed: function(list, name) {","\t\tvar arg = list[0];","\t\tif (list._hasObject === undefined)","\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);","\t\tif (list._hasObject)","\t\t\treturn name ? arg[name] : list.__filtered || arg;","\t},","","\thasNamed: function(list, name) {","\t\treturn !!this.getNamed(list, name);","\t},","","\tfilter: function(dest, source, exclude, prioritize) {","\t\tvar processed;","","\t\tfunction handleKey(key) {","\t\t\tif (!(exclude && key in exclude) &&","\t\t\t\t!(processed && key in processed)) {","\t\t\t\tvar value = source[key];","\t\t\t\tif (value !== undefined)","\t\t\t\t\tdest[key] = value;","\t\t\t}","\t\t}","","\t\tif (prioritize) {","\t\t\tvar keys = {};","\t\t\tfor (var i = 0, key, l = prioritize.length; i < l; i++) {","\t\t\t\tif ((key = prioritize[i]) in source) {","\t\t\t\t\thandleKey(key);","\t\t\t\t\tkeys[key] = true;","\t\t\t\t}","\t\t\t}","\t\t\tprocessed = keys;","\t\t}","","\t\tObject.keys(source.__unfiltered || source).forEach(handleKey);","\t\treturn dest;","\t},","","\tisPlainValue: function(obj, asString) {","\t\treturn Base.isPlainObject(obj) || Array.isArray(obj)","\t\t\t\t|| asString && typeof obj === 'string';","\t},","","\tserialize: function(obj, options, compact, dictionary) {","\t\toptions = options || {};","","\t\tvar isRoot = !dictionary,","\t\t\tres;","\t\tif (isRoot) {","\t\t\toptions.formatter = new Formatter(options.precision);","\t\t\tdictionary = {","\t\t\t\tlength: 0,","\t\t\t\tdefinitions: {},","\t\t\t\treferences: {},","\t\t\t\tadd: function(item, create) {","\t\t\t\t\tvar id = '#' + item._id,","\t\t\t\t\t\tref = this.references[id];","\t\t\t\t\tif (!ref) {","\t\t\t\t\t\tthis.length++;","\t\t\t\t\t\tvar res = create.call(item),","\t\t\t\t\t\t\tname = item._class;","\t\t\t\t\t\tif (name && res[0] !== name)","\t\t\t\t\t\t\tres.unshift(name);","\t\t\t\t\t\tthis.definitions[id] = res;","\t\t\t\t\t\tref = this.references[id] = [id];","\t\t\t\t\t}","\t\t\t\t\treturn ref;","\t\t\t\t}","\t\t\t};","\t\t}","\t\tif (obj && obj._serialize) {","\t\t\tres = obj._serialize(options, dictionary);","\t\t\tvar name = obj._class;","\t\t\tif (name && !obj._compactSerialize && (isRoot || !compact)","\t\t\t\t\t&& res[0] !== name) {","\t\t\t\tres.unshift(name);","\t\t\t}","\t\t} else if (Array.isArray(obj)) {","\t\t\tres = [];","\t\t\tfor (var i = 0, l = obj.length; i < l; i++)","\t\t\t\tres[i] = Base.serialize(obj[i], options, compact, dictionary);","\t\t} else if (Base.isPlainObject(obj)) {","\t\t\tres = {};","\t\t\tvar keys = Object.keys(obj);","\t\t\tfor (var i = 0, l = keys.length; i < l; i++) {","\t\t\t\tvar key = keys[i];","\t\t\t\tres[key] = Base.serialize(obj[key], options, compact,","\t\t\t\t\t\tdictionary);","\t\t\t}","\t\t} else if (typeof obj === 'number') {","\t\t\tres = options.formatter.number(obj, options.precision);","\t\t} else {","\t\t\tres = obj;","\t\t}","\t\treturn isRoot && dictionary.length > 0","\t\t\t\t? [['dictionary', dictionary.definitions], res]","\t\t\t\t: res;","\t},","","\tdeserialize: function(json, create, _data, _setDictionary, _isRoot) {","\t\tvar res = json,","\t\t\tisFirst = !_data,","\t\t\thasDictionary = isFirst && json && json.length","\t\t\t\t&& json[0][0] === 'dictionary';","\t\t_data = _data || {};","\t\tif (Array.isArray(json)) {","\t\t\tvar type = json[0],","\t\t\t\tisDictionary = type === 'dictionary';","\t\t\tif (json.length == 1 && /^#/.test(type)) {","\t\t\t\treturn _data.dictionary[type];","\t\t\t}","\t\t\ttype = Base.exports[type];","\t\t\tres = [];","\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++) {","\t\t\t\tres.push(Base.deserialize(json[i], create, _data,","\t\t\t\t\t\tisDictionary, hasDictionary));","\t\t\t}","\t\t\tif (type) {","\t\t\t\tvar args = res;","\t\t\t\tif (create) {","\t\t\t\t\tres = create(type, args, isFirst || _isRoot);","\t\t\t\t} else {","\t\t\t\t\tres = Base.create(type.prototype);","\t\t\t\t\ttype.apply(res, args);","\t\t\t\t}","\t\t\t}","\t\t} else if (Base.isPlainObject(json)) {","\t\t\tres = {};","\t\t\tif (_setDictionary)","\t\t\t\t_data.dictionary = res;","\t\t\tfor (var key in json)","\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);","\t\t}","\t\treturn hasDictionary ? res[1] : res;","\t},","","\texportJSON: function(obj, options) {","\t\tvar json = Base.serialize(obj, options);","\t\treturn options && options.asString == false","\t\t\t\t? json","\t\t\t\t: JSON.stringify(json);","\t},","","\timportJSON: function(json, target) {","\t\treturn Base.deserialize(","\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,","\t\t\t\tfunction(ctor, args, isRoot) {","\t\t\t\t\tvar useTarget = isRoot && target","\t\t\t\t\t\t\t&& target.constructor === ctor,","\t\t\t\t\t\tobj = useTarget ? target","\t\t\t\t\t\t\t: Base.create(ctor.prototype);","\t\t\t\t\tif (args.length === 1 && obj instanceof Item","\t\t\t\t\t\t\t&& (useTarget || !(obj instanceof Layer))) {","\t\t\t\t\t\tvar arg = args[0];","\t\t\t\t\t\tif (Base.isPlainObject(arg))","\t\t\t\t\t\t\targ.insert = false;","\t\t\t\t\t}","\t\t\t\t\t(useTarget ? obj.set : ctor).apply(obj, args);","\t\t\t\t\tif (useTarget)","\t\t\t\t\t\ttarget = null;","\t\t\t\t\treturn obj;","\t\t\t\t});","\t},","","\tsplice: function(list, items, index, remove) {","\t\tvar amount = items && items.length,","\t\t\tappend = index === undefined;","\t\tindex = append ? list.length : index;","\t\tif (index > list.length)","\t\t\tindex = list.length;","\t\tfor (var i = 0; i < amount; i++)","\t\t\titems[i]._index = index + i;","\t\tif (append) {","\t\t\tlist.push.apply(list, items);","\t\t\treturn [];","\t\t} else {","\t\t\tvar args = [index, remove];","\t\t\tif (items)","\t\t\t\targs.push.apply(args, items);","\t\t\tvar removed = list.splice.apply(list, args);","\t\t\tfor (var i = 0, l = removed.length; i < l; i++)","\t\t\t\tremoved[i]._index = undefined;","\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)","\t\t\t\tlist[i]._index = i;","\t\t\treturn removed;","\t\t}","\t},","","\tcapitalize: function(str) {","\t\treturn str.replace(/\\b[a-z]/g, function(match) {","\t\t\treturn match.toUpperCase();","\t\t});","\t},","","\tcamelize: function(str) {","\t\treturn str.replace(/-(.)/g, function(match, chr) {","\t\t\treturn chr.toUpperCase();","\t\t});","\t},","","\thyphenate: function(str) {","\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();","\t}","}});","","var Emitter = {","\ton: function(type, func) {","\t\tif (typeof type !== 'string') {","\t\t\tBase.each(type, function(value, key) {","\t\t\t\tthis.on(key, value);","\t\t\t}, this);","\t\t} else {","\t\t\tvar types = this._eventTypes,","\t\t\t\tentry = types && types[type],","\t\t\t\thandlers = this._callbacks = this._callbacks || {};","\t\t\thandlers = handlers[type] = handlers[type] || [];","\t\t\tif (handlers.indexOf(func) === -1) {","\t\t\t\thandlers.push(func);","\t\t\t\tif (entry && entry.install && handlers.length === 1)","\t\t\t\t\tentry.install.call(this, type);","\t\t\t}","\t\t}","\t\treturn this;","\t},","","\toff: function(type, func) {","\t\tif (typeof type !== 'string') {","\t\t\tBase.each(type, function(value, key) {","\t\t\t\tthis.off(key, value);","\t\t\t}, this);","\t\t\treturn;","\t\t}","\t\tvar types = this._eventTypes,","\t\t\tentry = types && types[type],","\t\t\thandlers = this._callbacks && this._callbacks[type],","\t\t\tindex;","\t\tif (handlers) {","\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1","\t\t\t\t\t&& handlers.length === 1) {","\t\t\t\tif (entry && entry.uninstall)","\t\t\t\t\tentry.uninstall.call(this, type);","\t\t\t\tdelete this._callbacks[type];","\t\t\t} else if (index !== -1) {","\t\t\t\thandlers.splice(index, 1);","\t\t\t}","\t\t}","\t\treturn this;","\t},","","\tonce: function(type, func) {","\t\treturn this.on(type, function() {","\t\t\tfunc.apply(this, arguments);","\t\t\tthis.off(type, func);","\t\t});","\t},","","\temit: function(type, event) {","\t\tvar handlers = this._callbacks && this._callbacks[type];","\t\tif (!handlers)","\t\t\treturn false;","\t\tvar args = Base.slice(arguments, 1),","\t\t\tsetTarget = event && event.target && !event.currentTarget;","\t\thandlers = handlers.slice();","\t\tif (setTarget)","\t\t\tevent.currentTarget = this;","\t\tfor (var i = 0, l = handlers.length; i < l; i++) {","\t\t\tif (handlers[i].apply(this, args) == false) {","\t\t\t\tif (event && event.stop)","\t\t\t\t\tevent.stop();","\t\t\t\tbreak;","\t\t   }","\t\t}","\t\tif (setTarget)","\t\t\tdelete event.currentTarget;","\t\treturn true;","\t},","","\tresponds: function(type) {","\t\treturn !!(this._callbacks && this._callbacks[type]);","\t},","","\tattach: '#on',","\tdetach: '#off',","\tfire: '#emit',","","\t_installEvents: function(install) {","\t\tvar types = this._eventTypes,","\t\t\thandlers = this._callbacks,","\t\t\tkey = install ? 'install' : 'uninstall';","\t\tif (types) {","\t\t\tfor (var type in handlers) {","\t\t\t\tif (handlers[type].length > 0) {","\t\t\t\t\tvar entry = types[type],","\t\t\t\t\t\tfunc = entry && entry[key];","\t\t\t\t\tif (func)","\t\t\t\t\t\tfunc.call(this, type);","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\tstatics: {","\t\tinject: function inject(src) {","\t\t\tvar events = src._events;","\t\t\tif (events) {","\t\t\t\tvar types = {};","\t\t\t\tBase.each(events, function(entry, key) {","\t\t\t\t\tvar isString = typeof entry === 'string',","\t\t\t\t\t\tname = isString ? entry : key,","\t\t\t\t\t\tpart = Base.capitalize(name),","\t\t\t\t\t\ttype = name.substring(2).toLowerCase();","\t\t\t\t\ttypes[type] = isString ? {} : entry;","\t\t\t\t\tname = '_' + name;","\t\t\t\t\tsrc['get' + part] = function() {","\t\t\t\t\t\treturn this[name];","\t\t\t\t\t};","\t\t\t\t\tsrc['set' + part] = function(func) {","\t\t\t\t\t\tvar prev = this[name];","\t\t\t\t\t\tif (prev)","\t\t\t\t\t\t\tthis.off(type, prev);","\t\t\t\t\t\tif (func)","\t\t\t\t\t\t\tthis.on(type, func);","\t\t\t\t\t\tthis[name] = func;","\t\t\t\t\t};","\t\t\t\t});","\t\t\t\tsrc._eventTypes = types;","\t\t\t}","\t\t\treturn inject.base.apply(this, arguments);","\t\t}","\t}","};","","var PaperScope = Base.extend({","\t_class: 'PaperScope',","","\tinitialize: function PaperScope() {","\t\tpaper = this;","\t\tthis.settings = new Base({","\t\t\tapplyMatrix: true,","\t\t\tinsertItems: true,","\t\t\thandleSize: 4,","\t\t\thitTolerance: 0","\t\t});","\t\tthis.project = null;","\t\tthis.projects = [];","\t\tthis.tools = [];","\t\tthis._id = PaperScope._id++;","\t\tPaperScope._scopes[this._id] = this;","\t\tvar proto = PaperScope.prototype;","\t\tif (!this.support) {","\t\t\tvar ctx = CanvasProvider.getContext(1, 1) || {};","\t\t\tproto.support = {","\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,","\t\t\t\tnativeBlendModes: BlendMode.nativeModes","\t\t\t};","\t\t\tCanvasProvider.release(ctx);","\t\t}","\t\tif (!this.agent) {","\t\t\tvar user = self.navigator.userAgent.toLowerCase(),","\t\t\t\tos = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user)||[])[0],","\t\t\t\tplatform = os === 'darwin' ? 'mac' : os,","\t\t\t\tagent = proto.agent = proto.browser = { platform: platform };","\t\t\tif (platform)","\t\t\t\tagent[platform] = true;","\t\t\tuser.replace(","\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:v?([.\\d]+))?/g,","\t\t\t\tfunction(match, n, v1, v2, rv) {","\t\t\t\t\tif (!agent.chrome) {","\t\t\t\t\t\tvar v = n === 'opera' ? v2 :","\t\t\t\t\t\t\t\t/^(node|trident)$/.test(n) ? rv : v1;","\t\t\t\t\t\tagent.version = v;","\t\t\t\t\t\tagent.versionNumber = parseFloat(v);","\t\t\t\t\t\tn = n === 'trident' ? 'msie' : n;","\t\t\t\t\t\tagent.name = n;","\t\t\t\t\t\tagent[n] = true;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t);","\t\t\tif (agent.chrome)","\t\t\t\tdelete agent.webkit;","\t\t\tif (agent.atom)","\t\t\t\tdelete agent.chrome;","\t\t}","\t},","","\tversion: \"0.11.4\",","","\tgetView: function() {","\t\tvar project = this.project;","\t\treturn project && project._view;","\t},","","\tgetPaper: function() {","\t\treturn this;","\t},","","\texecute: function(code, options) {","\t\tpaper.PaperScript.execute(code, this, options);","\t\tView.updateFocus();","\t},","","\tinstall: function(scope) {","\t\tvar that = this;","\t\tBase.each(['project', 'view', 'tool'], function(key) {","\t\t\tBase.define(scope, key, {","\t\t\t\tconfigurable: true,","\t\t\t\tget: function() {","\t\t\t\t\treturn that[key];","\t\t\t\t}","\t\t\t});","\t\t});","\t\tfor (var key in this)","\t\t\tif (!/^_/.test(key) && this[key])","\t\t\t\tscope[key] = this[key];","\t},","","\tsetup: function(element) {","\t\tpaper = this;","\t\tthis.project = new Project(element);","\t\treturn this;","\t},","","\tcreateCanvas: function(width, height) {","\t\treturn CanvasProvider.getCanvas(width, height);","\t},","","\tactivate: function() {","\t\tpaper = this;","\t},","","\tclear: function() {","\t\tvar projects = this.projects,","\t\t\ttools = this.tools;","\t\tfor (var i = projects.length - 1; i >= 0; i--)","\t\t\tprojects[i].remove();","\t\tfor (var i = tools.length - 1; i >= 0; i--)","\t\t\ttools[i].remove();","\t},","","\tremove: function() {","\t\tthis.clear();","\t\tdelete PaperScope._scopes[this._id];","\t},","","\tstatics: new function() {","\t\tfunction handleAttribute(name) {","\t\t\tname += 'Attribute';","\t\t\treturn function(el, attr) {","\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);","\t\t\t};","\t\t}","","\t\treturn {","\t\t\t_scopes: {},","\t\t\t_id: 0,","","\t\t\tget: function(id) {","\t\t\t\treturn this._scopes[id] || null;","\t\t\t},","","\t\t\tgetAttribute: handleAttribute('get'),","\t\t\thasAttribute: handleAttribute('has')","\t\t};","\t}","});","","var PaperScopeItem = Base.extend(Emitter, {","","\tinitialize: function(activate) {","\t\tthis._scope = paper;","\t\tthis._index = this._scope[this._list].push(this) - 1;","\t\tif (activate || !this._scope[this._reference])","\t\t\tthis.activate();","\t},","","\tactivate: function() {","\t\tif (!this._scope)","\t\t\treturn false;","\t\tvar prev = this._scope[this._reference];","\t\tif (prev && prev !== this)","\t\t\tprev.emit('deactivate');","\t\tthis._scope[this._reference] = this;","\t\tthis.emit('activate', prev);","\t\treturn true;","\t},","","\tisActive: function() {","\t\treturn this._scope[this._reference] === this;","\t},","","\tremove: function() {","\t\tif (this._index == null)","\t\t\treturn false;","\t\tBase.splice(this._scope[this._list], null, this._index, 1);","\t\tif (this._scope[this._reference] == this)","\t\t\tthis._scope[this._reference] = null;","\t\tthis._scope = null;","\t\treturn true;","\t},","","\tgetView: function() {","\t\treturn this._scope.getView();","\t}","});","","var Formatter = Base.extend({","\tinitialize: function(precision) {","\t\tthis.precision = Base.pick(precision, 5);","\t\tthis.multiplier = Math.pow(10, this.precision);","\t},","","\tnumber: function(val) {","\t\treturn this.precision < 16","\t\t\t\t? Math.round(val * this.multiplier) / this.multiplier : val;","\t},","","\tpair: function(val1, val2, separator) {","\t\treturn this.number(val1) + (separator || ',') + this.number(val2);","\t},","","\tpoint: function(val, separator) {","\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);","\t},","","\tsize: function(val, separator) {","\t\treturn this.number(val.width) + (separator || ',')","\t\t\t\t+ this.number(val.height);","\t},","","\trectangle: function(val, separator) {","\t\treturn this.point(val, separator) + (separator || ',')","\t\t\t\t+ this.size(val, separator);","\t}","});","","Formatter.instance = new Formatter();","","var Numerical = new function() {","","\tvar abscissas = [","\t\t[  0.5773502691896257645091488],","\t\t[0,0.7745966692414833770358531],","\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],","\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],","\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],","\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],","\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],","\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],","\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],","\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],","\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],","\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],","\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],","\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],","\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]","\t];","","\tvar weights = [","\t\t[1],","\t\t[0.8888888888888888888888889,0.5555555555555555555555556],","\t\t[0.6521451548625461426269361,0.3478548451374538573730639],","\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],","\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],","\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],","\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],","\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],","\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],","\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],","\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],","\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],","\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],","\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],","\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]","\t];","","\tvar abs = Math.abs,","\t\tsqrt = Math.sqrt,","\t\tpow = Math.pow,","\t\tlog2 = Math.log2 || function(x) {","\t\t\treturn Math.log(x) * Math.LOG2E;","\t\t},","\t\tEPSILON = 1e-12,","\t\tMACHINE_EPSILON = 1.12e-16;","","\tfunction clamp(value, min, max) {","\t\treturn value < min ? min : value > max ? max : value;","\t}","","\tfunction getDiscriminant(a, b, c) {","\t\tfunction split(v) {","\t\t\tvar x = v * 134217729,","\t\t\t\ty = v - x,","\t\t\t\thi = y + x,","\t\t\t\tlo = v - hi;","\t\t\treturn [hi, lo];","\t\t}","","\t\tvar D = b * b - a * c,","\t\t\tE = b * b + a * c;","\t\tif (abs(D) * 3 < E) {","\t\t\tvar ad = split(a),","\t\t\t\tbd = split(b),","\t\t\t\tcd = split(c),","\t\t\t\tp = b * b,","\t\t\t\tdp = (bd[0] * bd[0] - p + 2 * bd[0] * bd[1]) + bd[1] * bd[1],","\t\t\t\tq = a * c,","\t\t\t\tdq = (ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0])","\t\t\t\t\t\t+ ad[1] * cd[1];","\t\t\tD = (p - q) + (dp - dq);","\t\t}","\t\treturn D;","\t}","","\tfunction getNormalizationFactor() {","\t\tvar norm = Math.max.apply(Math, arguments);","\t\treturn norm && (norm < 1e-8 || norm > 1e8)","\t\t\t\t? pow(2, -Math.round(log2(norm)))","\t\t\t\t: 0;","\t}","","\treturn {","\t\tEPSILON: EPSILON,","\t\tMACHINE_EPSILON: MACHINE_EPSILON,","\t\tCURVETIME_EPSILON: 1e-8,","\t\tGEOMETRIC_EPSILON: 1e-7,","\t\tTRIGONOMETRIC_EPSILON: 1e-8,","\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,","","\t\tisZero: function(val) {","\t\t\treturn val >= -EPSILON && val <= EPSILON;","\t\t},","","\t\tclamp: clamp,","","\t\tintegrate: function(f, a, b, n) {","\t\t\tvar x = abscissas[n - 2],","\t\t\t\tw = weights[n - 2],","\t\t\t\tA = (b - a) * 0.5,","\t\t\t\tB = A + a,","\t\t\t\ti = 0,","\t\t\t\tm = (n + 1) >> 1,","\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;","\t\t\twhile (i < m) {","\t\t\t\tvar Ax = A * x[i];","\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));","\t\t\t}","\t\t\treturn A * sum;","\t\t},","","\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {","\t\t\tfor (var i = 0; i < n; i++) {","\t\t\t\tvar fx = f(x),","\t\t\t\t\tdx = fx / df(x),","\t\t\t\t\tnx = x - dx;","\t\t\t\tif (abs(dx) < tolerance) {","\t\t\t\t\tx = nx;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif (fx > 0) {","\t\t\t\t\tb = x;","\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;","\t\t\t\t} else {","\t\t\t\t\ta = x;","\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;","\t\t\t\t}","\t\t\t}","\t\t\treturn clamp(x, a, b);","\t\t},","","\t\tsolveQuadratic: function(a, b, c, roots, min, max) {","\t\t\tvar x1, x2 = Infinity;","\t\t\tif (abs(a) < EPSILON) {","\t\t\t\tif (abs(b) < EPSILON)","\t\t\t\t\treturn abs(c) < EPSILON ? -1 : 0;","\t\t\t\tx1 = -c / b;","\t\t\t} else {","\t\t\t\tb *= -0.5;","\t\t\t\tvar D = getDiscriminant(a, b, c);","\t\t\t\tif (D && abs(D) < MACHINE_EPSILON) {","\t\t\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c));","\t\t\t\t\tif (f) {","\t\t\t\t\t\ta *= f;","\t\t\t\t\t\tb *= f;","\t\t\t\t\t\tc *= f;","\t\t\t\t\t\tD = getDiscriminant(a, b, c);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (D >= -MACHINE_EPSILON) {","\t\t\t\t\tvar Q = D < 0 ? 0 : sqrt(D),","\t\t\t\t\t\tR = b + (b < 0 ? -Q : Q);","\t\t\t\t\tif (R === 0) {","\t\t\t\t\t\tx1 = c / a;","\t\t\t\t\t\tx2 = -x1;","\t\t\t\t\t} else {","\t\t\t\t\t\tx1 = R / a;","\t\t\t\t\t\tx2 = c / R;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tvar count = 0,","\t\t\t\tboundless = min == null,","\t\t\t\tminB = min - EPSILON,","\t\t\t\tmaxB = max + EPSILON;","\t\t\tif (isFinite(x1) && (boundless || x1 > minB && x1 < maxB))","\t\t\t\troots[count++] = boundless ? x1 : clamp(x1, min, max);","\t\t\tif (x2 !== x1","\t\t\t\t\t&& isFinite(x2) && (boundless || x2 > minB && x2 < maxB))","\t\t\t\troots[count++] = boundless ? x2 : clamp(x2, min, max);","\t\t\treturn count;","\t\t},","","\t\tsolveCubic: function(a, b, c, d, roots, min, max) {","\t\t\tvar f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)),","\t\t\t\tx, b1, c2, qd, q;","\t\t\tif (f) {","\t\t\t\ta *= f;","\t\t\t\tb *= f;","\t\t\t\tc *= f;","\t\t\t\td *= f;","\t\t\t}","","\t\t\tfunction evaluate(x0) {","\t\t\t\tx = x0;","\t\t\t\tvar tmp = a * x;","\t\t\t\tb1 = tmp + b;","\t\t\t\tc2 = b1 * x + c;","\t\t\t\tqd = (tmp + b1) * x + c2;","\t\t\t\tq = c2 * x + d;","\t\t\t}","","\t\t\tif (abs(a) < EPSILON) {","\t\t\t\ta = b;","\t\t\t\tb1 = c;","\t\t\t\tc2 = d;","\t\t\t\tx = Infinity;","\t\t\t} else if (abs(d) < EPSILON) {","\t\t\t\tb1 = b;","\t\t\t\tc2 = c;","\t\t\t\tx = 0;","\t\t\t} else {","\t\t\t\tevaluate(-(b / a) / 3);","\t\t\t\tvar t = q / a,","\t\t\t\t\tr = pow(abs(t), 1/3),","\t\t\t\t\ts = t < 0 ? -1 : 1,","\t\t\t\t\ttd = -qd / a,","\t\t\t\t\trd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r,","\t\t\t\t\tx0 = x - s * rd;","\t\t\t\tif (x0 !== x) {","\t\t\t\t\tdo {","\t\t\t\t\t\tevaluate(x0);","\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);","\t\t\t\t\t} while (s * x0 > s * x);","\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {","\t\t\t\t\t\tc2 = -d / x;","\t\t\t\t\t\tb1 = (c2 - c) / x;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max),","\t\t\t\tboundless = min == null;","\t\t\tif (isFinite(x) && (count === 0","\t\t\t\t\t|| count > 0 && x !== roots[0] && x !== roots[1])","\t\t\t\t\t&& (boundless || x > min - EPSILON && x < max + EPSILON))","\t\t\t\troots[count++] = boundless ? x : clamp(x, min, max);","\t\t\treturn count;","\t\t}","\t};","};","","var UID = {","\t_id: 1,","\t_pools: {},","","\tget: function(name) {","\t\tif (name) {","\t\t\tvar pool = this._pools[name];","\t\t\tif (!pool)","\t\t\t\tpool = this._pools[name] = { _id: 1 };","\t\t\treturn pool._id++;","\t\t} else {","\t\t\treturn this._id++;","\t\t}","\t}","};","","var Point = Base.extend({","\t_class: 'Point',","\t_readIndex: true,","","\tinitialize: function Point(arg0, arg1) {","\t\tvar type = typeof arg0,","\t\t\treading = this.__read,","\t\t\tread = 0;","\t\tif (type === 'number') {","\t\t\tvar hasY = typeof arg1 === 'number';","\t\t\tthis._set(arg0, hasY ? arg1 : arg0);","\t\t\tif (reading)","\t\t\t\tread = hasY ? 2 : 1;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis._set(0, 0);","\t\t\tif (reading)","\t\t\t\tread = arg0 === null ? 1 : 0;","\t\t} else {","\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;","\t\t\tread = 1;","\t\t\tif (Array.isArray(obj)) {","\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));","\t\t\t} else if ('x' in obj) {","\t\t\t\tthis._set(obj.x || 0, obj.y || 0);","\t\t\t} else if ('width' in obj) {","\t\t\t\tthis._set(obj.width || 0, obj.height || 0);","\t\t\t} else if ('angle' in obj) {","\t\t\t\tthis._set(obj.length || 0, 0);","\t\t\t\tthis.setAngle(obj.angle || 0);","\t\t\t} else {","\t\t\t\tthis._set(0, 0);","\t\t\t\tread = 0;","\t\t\t}","\t\t}","\t\tif (reading)","\t\t\tthis.__read = read;","\t\treturn this;","\t},","","\tset: '#initialize',","","\t_set: function(x, y) {","\t\tthis.x = x;","\t\tthis.y = y;","\t\treturn this;","\t},","","\tequals: function(point) {","\t\treturn this === point || point","\t\t\t\t&& (this.x === point.x && this.y === point.y","\t\t\t\t\t|| Array.isArray(point)","\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])","\t\t\t\t|| false;","\t},","","\tclone: function() {","\t\treturn new Point(this.x, this.y);","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.x), f.number(this.y)];","\t},","","\tgetLength: function() {","\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);","\t},","","\tsetLength: function(length) {","\t\tif (this.isZero()) {","\t\t\tvar angle = this._angle || 0;","\t\t\tthis._set(","\t\t\t\tMath.cos(angle) * length,","\t\t\t\tMath.sin(angle) * length","\t\t\t);","\t\t} else {","\t\t\tvar scale = length / this.getLength();","\t\t\tif (Numerical.isZero(scale))","\t\t\t\tthis.getAngle();","\t\t\tthis._set(","\t\t\t\tthis.x * scale,","\t\t\t\tthis.y * scale","\t\t\t);","\t\t}","\t},","\tgetAngle: function() {","\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;","\t},","","\tsetAngle: function(angle) {","\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);","\t},","","\tgetAngleInDegrees: '#getAngle',","\tsetAngleInDegrees: '#setAngle',","","\tgetAngleInRadians: function() {","\t\tif (!arguments.length) {","\t\t\treturn this.isZero()","\t\t\t\t\t? this._angle || 0","\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);","\t\t} else {","\t\t\tvar point = Point.read(arguments),","\t\t\t\tdiv = this.getLength() * point.getLength();","\t\t\tif (Numerical.isZero(div)) {","\t\t\t\treturn NaN;","\t\t\t} else {","\t\t\t\tvar a = this.dot(point) / div;","\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);","\t\t\t}","\t\t}","\t},","","\tsetAngleInRadians: function(angle) {","\t\tthis._angle = angle;","\t\tif (!this.isZero()) {","\t\t\tvar length = this.getLength();","\t\t\tthis._set(","\t\t\t\tMath.cos(angle) * length,","\t\t\t\tMath.sin(angle) * length","\t\t\t);","\t\t}","\t},","","\tgetQuadrant: function() {","\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;","\t}","}, {","\tbeans: false,","","\tgetDirectedAngle: function() {","\t\tvar point = Point.read(arguments);","\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;","\t},","","\tgetDistance: function() {","\t\tvar point = Point.read(arguments),","\t\t\tx = point.x - this.x,","\t\t\ty = point.y - this.y,","\t\t\td = x * x + y * y,","\t\t\tsquared = Base.read(arguments);","\t\treturn squared ? d : Math.sqrt(d);","\t},","","\tnormalize: function(length) {","\t\tif (length === undefined)","\t\t\tlength = 1;","\t\tvar current = this.getLength(),","\t\t\tscale = current !== 0 ? length / current : 0,","\t\t\tpoint = new Point(this.x * scale, this.y * scale);","\t\tif (scale >= 0)","\t\t\tpoint._angle = this._angle;","\t\treturn point;","\t},","","\trotate: function(angle, center) {","\t\tif (angle === 0)","\t\t\treturn this.clone();","\t\tangle = angle * Math.PI / 180;","\t\tvar point = center ? this.subtract(center) : this,","\t\t\tsin = Math.sin(angle),","\t\t\tcos = Math.cos(angle);","\t\tpoint = new Point(","\t\t\tpoint.x * cos - point.y * sin,","\t\t\tpoint.x * sin + point.y * cos","\t\t);","\t\treturn center ? point.add(center) : point;","\t},","","\ttransform: function(matrix) {","\t\treturn matrix ? matrix._transformPoint(this) : this;","\t},","","\tadd: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x + point.x, this.y + point.y);","\t},","","\tsubtract: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x - point.x, this.y - point.y);","\t},","","\tmultiply: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x * point.x, this.y * point.y);","\t},","","\tdivide: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x / point.x, this.y / point.y);","\t},","","\tmodulo: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x % point.x, this.y % point.y);","\t},","","\tnegate: function() {","\t\treturn new Point(-this.x, -this.y);","\t},","","\tisInside: function() {","\t\treturn Rectangle.read(arguments).contains(this);","\t},","","\tisClose: function() {","\t\tvar point = Point.read(arguments),","\t\t\ttolerance = Base.read(arguments);","\t\treturn this.getDistance(point) <= tolerance;","\t},","","\tisCollinear: function() {","\t\tvar point = Point.read(arguments);","\t\treturn Point.isCollinear(this.x, this.y, point.x, point.y);","\t},","","\tisColinear: '#isCollinear',","","\tisOrthogonal: function() {","\t\tvar point = Point.read(arguments);","\t\treturn Point.isOrthogonal(this.x, this.y, point.x, point.y);","\t},","","\tisZero: function() {","\t\tvar isZero = Numerical.isZero;","\t\treturn isZero(this.x) && isZero(this.y);","\t},","","\tisNaN: function() {","\t\treturn isNaN(this.x) || isNaN(this.y);","\t},","","\tisInQuadrant: function(q) {","\t\treturn this.x * (q > 1 && q < 4 ? -1 : 1) >= 0","\t\t\t&& this.y * (q > 2 ? -1 : 1) >= 0;","\t},","","\tdot: function() {","\t\tvar point = Point.read(arguments);","\t\treturn this.x * point.x + this.y * point.y;","\t},","","\tcross: function() {","\t\tvar point = Point.read(arguments);","\t\treturn this.x * point.y - this.y * point.x;","\t},","","\tproject: function() {","\t\tvar point = Point.read(arguments),","\t\t\tscale = point.isZero() ? 0 : this.dot(point) / point.dot(point);","\t\treturn new Point(","\t\t\tpoint.x * scale,","\t\t\tpoint.y * scale","\t\t);","\t},","","\tstatics: {","\t\tmin: function() {","\t\t\tvar point1 = Point.read(arguments),","\t\t\t\tpoint2 = Point.read(arguments);","\t\t\treturn new Point(","\t\t\t\tMath.min(point1.x, point2.x),","\t\t\t\tMath.min(point1.y, point2.y)","\t\t\t);","\t\t},","","\t\tmax: function() {","\t\t\tvar point1 = Point.read(arguments),","\t\t\t\tpoint2 = Point.read(arguments);","\t\t\treturn new Point(","\t\t\t\tMath.max(point1.x, point2.x),","\t\t\t\tMath.max(point1.y, point2.y)","\t\t\t);","\t\t},","","\t\trandom: function() {","\t\t\treturn new Point(Math.random(), Math.random());","\t\t},","","\t\tisCollinear: function(x1, y1, x2, y2) {","\t\t\treturn Math.abs(x1 * y2 - y1 * x2)","\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))","\t\t\t\t\t\t* 1e-8;","\t\t},","","\t\tisOrthogonal: function(x1, y1, x2, y2) {","\t\t\treturn Math.abs(x1 * x2 + y1 * y2)","\t\t\t\t\t<= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))","\t\t\t\t\t\t* 1e-8;","\t\t}","\t}","}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {","\tvar op = Math[key];","\tthis[key] = function() {","\t\treturn new Point(op(this.x), op(this.y));","\t};","}, {}));","","var LinkedPoint = Point.extend({","\tinitialize: function Point(x, y, owner, setter) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\t_set: function(x, y, _dontNotify) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t},","","\tgetX: function() {","\t\treturn this._x;","\t},","","\tsetX: function(x) {","\t\tthis._x = x;","\t\tthis._owner[this._setter](this);","\t},","","\tgetY: function() {","\t\treturn this._y;","\t},","","\tsetY: function(y) {","\t\tthis._y = y;","\t\tthis._owner[this._setter](this);","\t},","","\tisSelected: function() {","\t\treturn !!(this._owner._selection & this._getSelection());","\t},","","\tsetSelected: function(selected) {","\t\tthis._owner._changeSelection(this._getSelection(), selected);","\t},","","\t_getSelection: function() {","\t\treturn this._setter === 'setPosition' ? 4 : 0;","\t}","});","","var Size = Base.extend({","\t_class: 'Size',","\t_readIndex: true,","","\tinitialize: function Size(arg0, arg1) {","\t\tvar type = typeof arg0,","\t\t\treading = this.__read,","\t\t\tread = 0;","\t\tif (type === 'number') {","\t\t\tvar hasHeight = typeof arg1 === 'number';","\t\t\tthis._set(arg0, hasHeight ? arg1 : arg0);","\t\t\tif (reading)","\t\t\t\tread = hasHeight ? 2 : 1;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis._set(0, 0);","\t\t\tif (reading)","\t\t\t\tread = arg0 === null ? 1 : 0;","\t\t} else {","\t\t\tvar obj = type === 'string' ? arg0.split(/[\\s,]+/) || [] : arg0;","\t\t\tread = 1;","\t\t\tif (Array.isArray(obj)) {","\t\t\t\tthis._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));","\t\t\t} else if ('width' in obj) {","\t\t\t\tthis._set(obj.width || 0, obj.height || 0);","\t\t\t} else if ('x' in obj) {","\t\t\t\tthis._set(obj.x || 0, obj.y || 0);","\t\t\t} else {","\t\t\t\tthis._set(0, 0);","\t\t\t\tread = 0;","\t\t\t}","\t\t}","\t\tif (reading)","\t\t\tthis.__read = read;","\t\treturn this;","\t},","","\tset: '#initialize',","","\t_set: function(width, height) {","\t\tthis.width = width;","\t\tthis.height = height;","\t\treturn this;","\t},","","\tequals: function(size) {","\t\treturn size === this || size && (this.width === size.width","\t\t\t\t&& this.height === size.height","\t\t\t\t|| Array.isArray(size) && this.width === size[0]","\t\t\t\t\t&& this.height === size[1]) || false;","\t},","","\tclone: function() {","\t\treturn new Size(this.width, this.height);","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ width: ' + f.number(this.width)","\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.width),","\t\t\t\tf.number(this.height)];","\t},","","\tadd: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width + size.width, this.height + size.height);","\t},","","\tsubtract: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width - size.width, this.height - size.height);","\t},","","\tmultiply: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width * size.width, this.height * size.height);","\t},","","\tdivide: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width / size.width, this.height / size.height);","\t},","","\tmodulo: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width % size.width, this.height % size.height);","\t},","","\tnegate: function() {","\t\treturn new Size(-this.width, -this.height);","\t},","","\tisZero: function() {","\t\tvar isZero = Numerical.isZero;","\t\treturn isZero(this.width) && isZero(this.height);","\t},","","\tisNaN: function() {","\t\treturn isNaN(this.width) || isNaN(this.height);","\t},","","\tstatics: {","\t\tmin: function(size1, size2) {","\t\t\treturn new Size(","\t\t\t\tMath.min(size1.width, size2.width),","\t\t\t\tMath.min(size1.height, size2.height));","\t\t},","","\t\tmax: function(size1, size2) {","\t\t\treturn new Size(","\t\t\t\tMath.max(size1.width, size2.width),","\t\t\t\tMath.max(size1.height, size2.height));","\t\t},","","\t\trandom: function() {","\t\t\treturn new Size(Math.random(), Math.random());","\t\t}","\t}","}, Base.each(['round', 'ceil', 'floor', 'abs'], function(key) {","\tvar op = Math[key];","\tthis[key] = function() {","\t\treturn new Size(op(this.width), op(this.height));","\t};","}, {}));","","var LinkedSize = Size.extend({","\tinitialize: function Size(width, height, owner, setter) {","\t\tthis._width = width;","\t\tthis._height = height;","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\t_set: function(width, height, _dontNotify) {","\t\tthis._width = width;","\t\tthis._height = height;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t},","","\tgetWidth: function() {","\t\treturn this._width;","\t},","","\tsetWidth: function(width) {","\t\tthis._width = width;","\t\tthis._owner[this._setter](this);","\t},","","\tgetHeight: function() {","\t\treturn this._height;","\t},","","\tsetHeight: function(height) {","\t\tthis._height = height;","\t\tthis._owner[this._setter](this);","\t}","});","","var Rectangle = Base.extend({","\t_class: 'Rectangle',","\t_readIndex: true,","\tbeans: true,","","\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {","\t\tvar type = typeof arg0,","\t\t\tread;","\t\tif (type === 'number') {","\t\t\tthis._set(arg0, arg1, arg2, arg3);","\t\t\tread = 4;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis._set(0, 0, 0, 0);","\t\t\tread = arg0 === null ? 1 : 0;","\t\t} else if (arguments.length === 1) {","\t\t\tif (Array.isArray(arg0)) {","\t\t\t\tthis._set.apply(this, arg0);","\t\t\t\tread = 1;","\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {","\t\t\t\tthis._set(arg0.x || 0, arg0.y || 0,","\t\t\t\t\t\targ0.width || 0, arg0.height || 0);","\t\t\t\tread = 1;","\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {","\t\t\t\tthis._set(0, 0, 0, 0);","\t\t\t\tBase.filter(this, arg0);","\t\t\t\tread = 1;","\t\t\t}","\t\t}","\t\tif (read === undefined) {","\t\t\tvar frm = Point.readNamed(arguments, 'from'),","\t\t\t\tnext = Base.peek(arguments),","\t\t\t\tx = frm.x,","\t\t\t\ty = frm.y,","\t\t\t\twidth,","\t\t\t\theight;","\t\t\tif (next && next.x !== undefined","\t\t\t\t\t|| Base.hasNamed(arguments, 'to')) {","\t\t\t\tvar to = Point.readNamed(arguments, 'to');","\t\t\t\twidth = to.x - x;","\t\t\t\theight = to.y - y;","\t\t\t\tif (width < 0) {","\t\t\t\t\tx = to.x;","\t\t\t\t\twidth = -width;","\t\t\t\t}","\t\t\t\tif (height < 0) {","\t\t\t\t\ty = to.y;","\t\t\t\t\theight = -height;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tvar size = Size.read(arguments);","\t\t\t\twidth = size.width;","\t\t\t\theight = size.height;","\t\t\t}","\t\t\tthis._set(x, y, width, height);","\t\t\tread = arguments.__index;","\t\t\tvar filtered = arguments.__filtered;","\t\t\tif (filtered)","\t\t\t\tthis.__filtered = filtered;","\t\t}","\t\tif (this.__read)","\t\t\tthis.__read = read;","\t\treturn this;","\t},","","\tset: '#initialize',","","\t_set: function(x, y, width, height) {","\t\tthis.x = x;","\t\tthis.y = y;","\t\tthis.width = width;","\t\tthis.height = height;","\t\treturn this;","\t},","","\tclone: function() {","\t\treturn new Rectangle(this.x, this.y, this.width, this.height);","\t},","","\tequals: function(rect) {","\t\tvar rt = Base.isPlainValue(rect)","\t\t\t\t? Rectangle.read(arguments)","\t\t\t\t: rect;","\t\treturn rt === this","\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y","\t\t\t\t\t&& this.width === rt.width && this.height === rt.height","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ x: ' + f.number(this.x)","\t\t\t\t+ ', y: ' + f.number(this.y)","\t\t\t\t+ ', width: ' + f.number(this.width)","\t\t\t\t+ ', height: ' + f.number(this.height)","\t\t\t\t+ ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.x),","\t\t\t\tf.number(this.y),","\t\t\t\tf.number(this.width),","\t\t\t\tf.number(this.height)];","\t},","","\tgetPoint: function(_dontLink) {","\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\treturn new ctor(this.x, this.y, this, 'setPoint');","\t},","","\tsetPoint: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.x = point.x;","\t\tthis.y = point.y;","\t},","","\tgetSize: function(_dontLink) {","\t\tvar ctor = _dontLink ? Size : LinkedSize;","\t\treturn new ctor(this.width, this.height, this, 'setSize');","\t},","","\t_fw: 1,","\t_fh: 1,","","\tsetSize: function() {","\t\tvar size = Size.read(arguments),","\t\t\tsx = this._sx,","\t\t\tsy = this._sy,","\t\t\tw = size.width,","\t\t\th = size.height;","\t\tif (sx) {","\t\t\tthis.x += (this.width - w) * sx;","\t\t}","\t\tif (sy) {","\t\t\tthis.y += (this.height - h) * sy;","\t\t}","\t\tthis.width = w;","\t\tthis.height = h;","\t\tthis._fw = this._fh = 1;","\t},","","\tgetLeft: function() {","\t\treturn this.x;","\t},","","\tsetLeft: function(left) {","\t\tif (!this._fw) {","\t\t\tvar amount = left - this.x;","\t\t\tthis.width -= this._sx === 0.5 ? amount * 2 : amount;","\t\t}","\t\tthis.x = left;","\t\tthis._sx = this._fw = 0;","\t},","","\tgetTop: function() {","\t\treturn this.y;","\t},","","\tsetTop: function(top) {","\t\tif (!this._fh) {","\t\t\tvar amount = top - this.y;","\t\t\tthis.height -= this._sy === 0.5 ? amount * 2 : amount;","\t\t}","\t\tthis.y = top;","\t\tthis._sy = this._fh = 0;","\t},","","\tgetRight: function() {","\t\treturn this.x + this.width;","\t},","","\tsetRight: function(right) {","\t\tif (!this._fw) {","\t\t\tvar amount = right - this.x;","\t\t\tthis.width = this._sx === 0.5 ? amount * 2 : amount;","\t\t}","\t\tthis.x = right - this.width;","\t\tthis._sx = 1;","\t\tthis._fw = 0;","\t},","","\tgetBottom: function() {","\t\treturn this.y + this.height;","\t},","","\tsetBottom: function(bottom) {","\t\tif (!this._fh) {","\t\t\tvar amount = bottom - this.y;","\t\t\tthis.height = this._sy === 0.5 ? amount * 2 : amount;","\t\t}","\t\tthis.y = bottom - this.height;","\t\tthis._sy = 1;","\t\tthis._fh = 0;","\t},","","\tgetCenterX: function() {","\t\treturn this.x + this.width / 2;","\t},","","\tsetCenterX: function(x) {","\t\tif (this._fw || this._sx === 0.5) {","\t\t\tthis.x = x - this.width / 2;","\t\t} else {","\t\t\tif (this._sx) {","\t\t\t\tthis.x += (x - this.x) * 2 * this._sx;","\t\t\t}","\t\t\tthis.width = (x - this.x) * 2;","\t\t}","\t\tthis._sx = 0.5;","\t\tthis._fw = 0;","\t},","","\tgetCenterY: function() {","\t\treturn this.y + this.height / 2;","\t},","","\tsetCenterY: function(y) {","\t\tif (this._fh || this._sy === 0.5) {","\t\t\tthis.y = y - this.height / 2;","\t\t} else {","\t\t\tif (this._sy) {","\t\t\t\tthis.y += (y - this.y) * 2 * this._sy;","\t\t\t}","\t\t\tthis.height = (y - this.y) * 2;","\t\t}","\t\tthis._sy = 0.5;","\t\tthis._fh = 0;","\t},","","\tgetCenter: function(_dontLink) {","\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');","\t},","","\tsetCenter: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.setCenterX(point.x);","\t\tthis.setCenterY(point.y);","\t\treturn this;","\t},","","\tgetArea: function() {","\t\treturn this.width * this.height;","\t},","","\tisEmpty: function() {","\t\treturn this.width === 0 || this.height === 0;","\t},","","\tcontains: function(arg) {","\t\treturn arg && arg.width !== undefined","\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length === 4","\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))","\t\t\t\t: this._containsPoint(Point.read(arguments));","\t},","","\t_containsPoint: function(point) {","\t\tvar x = point.x,","\t\t\ty = point.y;","\t\treturn x >= this.x && y >= this.y","\t\t\t\t&& x <= this.x + this.width","\t\t\t\t&& y <= this.y + this.height;","\t},","","\t_containsRectangle: function(rect) {","\t\tvar x = rect.x,","\t\t\ty = rect.y;","\t\treturn x >= this.x && y >= this.y","\t\t\t\t&& x + rect.width <= this.x + this.width","\t\t\t\t&& y + rect.height <= this.y + this.height;","\t},","","\tintersects: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tepsilon = Base.read(arguments) || 0;","\t\treturn rect.x + rect.width > this.x - epsilon","\t\t\t\t&& rect.y + rect.height > this.y - epsilon","\t\t\t\t&& rect.x < this.x + this.width + epsilon","\t\t\t\t&& rect.y < this.y + this.height + epsilon;","\t},","","\tintersect: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tx1 = Math.max(this.x, rect.x),","\t\t\ty1 = Math.max(this.y, rect.y),","\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),","\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\tunite: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tx1 = Math.min(this.x, rect.x),","\t\t\ty1 = Math.min(this.y, rect.y),","\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),","\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\tinclude: function() {","\t\tvar point = Point.read(arguments);","\t\tvar x1 = Math.min(this.x, point.x),","\t\t\ty1 = Math.min(this.y, point.y),","\t\t\tx2 = Math.max(this.x + this.width, point.x),","\t\t\ty2 = Math.max(this.y + this.height, point.y);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\texpand: function() {","\t\tvar amount = Size.read(arguments),","\t\t\thor = amount.width,","\t\t\tver = amount.height;","\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,","\t\t\t\tthis.width + hor, this.height + ver);","\t},","","\tscale: function(hor, ver) {","\t\treturn this.expand(this.width * hor - this.width,","\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);","\t}","}, Base.each([","\t\t['Top', 'Left'], ['Top', 'Right'],","\t\t['Bottom', 'Left'], ['Bottom', 'Right'],","\t\t['Left', 'Center'], ['Top', 'Center'],","\t\t['Right', 'Center'], ['Bottom', 'Center']","\t],","\tfunction(parts, index) {","\t\tvar part = parts.join(''),","\t\t\txFirst = /^[RL]/.test(part);","\t\tif (index >= 4)","\t\t\tparts[1] += xFirst ? 'Y' : 'X';","\t\tvar x = parts[xFirst ? 0 : 1],","\t\t\ty = parts[xFirst ? 1 : 0],","\t\t\tgetX = 'get' + x,","\t\t\tgetY = 'get' + y,","\t\t\tsetX = 'set' + x,","\t\t\tsetY = 'set' + y,","\t\t\tget = 'get' + part,","\t\t\tset = 'set' + part;","\t\tthis[get] = function(_dontLink) {","\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\t\treturn new ctor(this[getX](), this[getY](), this, set);","\t\t};","\t\tthis[set] = function() {","\t\t\tvar point = Point.read(arguments);","\t\t\tthis[setX](point.x);","\t\t\tthis[setY](point.y);","\t\t};","\t}, {","\t\tbeans: true","\t}","));","","var LinkedRectangle = Rectangle.extend({","\tinitialize: function Rectangle(x, y, width, height, owner, setter) {","\t\tthis._set(x, y, width, height, true);","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\t_set: function(x, y, width, height, _dontNotify) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._width = width;","\t\tthis._height = height;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t}","},","new function() {","\tvar proto = Rectangle.prototype;","","\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {","\t\tvar part = Base.capitalize(key),","\t\t\tinternal = '_' + key;","\t\tthis['get' + part] = function() {","\t\t\treturn this[internal];","\t\t};","","\t\tthis['set' + part] = function(value) {","\t\t\tthis[internal] = value;","\t\t\tif (!this._dontNotify)","\t\t\t\tthis._owner[this._setter](this);","\t\t};","\t}, Base.each(['Point', 'Size', 'Center',","\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',","\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',","\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],","\t\tfunction(key) {","\t\t\tvar name = 'set' + key;","\t\t\tthis[name] = function() {","\t\t\t\tthis._dontNotify = true;","\t\t\t\tproto[name].apply(this, arguments);","\t\t\t\tthis._dontNotify = false;","\t\t\t\tthis._owner[this._setter](this);","\t\t\t};","\t\t}, {","\t\t\tisSelected: function() {","\t\t\t\treturn !!(this._owner._selection & 2);","\t\t\t},","","\t\t\tsetSelected: function(selected) {","\t\t\t\tvar owner = this._owner;","\t\t\t\tif (owner._changeSelection) {","\t\t\t\t\towner._changeSelection(2, selected);","\t\t\t\t}","\t\t\t}","\t\t})","\t);","});","","var Matrix = Base.extend({","\t_class: 'Matrix',","","\tinitialize: function Matrix(arg, _dontNotify) {","\t\tvar count = arguments.length,","\t\t\tok = true;","\t\tif (count >= 6) {","\t\t\tthis._set.apply(this, arguments);","\t\t} else if (count === 1 || count === 2) {","\t\t\tif (arg instanceof Matrix) {","\t\t\t\tthis._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty,","\t\t\t\t\t\t_dontNotify);","\t\t\t} else if (Array.isArray(arg)) {","\t\t\t\tthis._set.apply(this,","\t\t\t\t\t\t_dontNotify ? arg.concat([_dontNotify]) : arg);","\t\t\t} else {","\t\t\t\tok = false;","\t\t\t}","\t\t} else if (!count) {","\t\t\tthis.reset();","\t\t} else {","\t\t\tok = false;","\t\t}","\t\tif (!ok) {","\t\t\tthrow new Error('Unsupported matrix parameters');","\t\t}","\t\treturn this;","\t},","","\tset: '#initialize',","","\t_set: function(a, b, c, d, tx, ty, _dontNotify) {","\t\tthis._a = a;","\t\tthis._b = b;","\t\tthis._c = c;","\t\tthis._d = d;","\t\tthis._tx = tx;","\t\tthis._ty = ty;","\t\tif (!_dontNotify)","\t\t\tthis._changed();","\t\treturn this;","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn Base.serialize(this.getValues(), options, true, dictionary);","\t},","","\t_changed: function() {","\t\tvar owner = this._owner;","\t\tif (owner) {","\t\t\tif (owner._applyMatrix) {","\t\t\t\towner.transform(null, true);","\t\t\t} else {","\t\t\t\towner._changed(9);","\t\t\t}","\t\t}","\t},","","\tclone: function() {","\t\treturn new Matrix(this._a, this._b, this._c, this._d,","\t\t\t\tthis._tx, this._ty);","\t},","","\tequals: function(mx) {","\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b","\t\t\t\t&& this._c === mx._c && this._d === mx._d","\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty;","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '[[' + [f.number(this._a), f.number(this._c),","\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['","\t\t\t\t+ [f.number(this._b), f.number(this._d),","\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';","\t},","","\treset: function(_dontNotify) {","\t\tthis._a = this._d = 1;","\t\tthis._b = this._c = this._tx = this._ty = 0;","\t\tif (!_dontNotify)","\t\t\tthis._changed();","\t\treturn this;","\t},","","\tapply: function(recursively, _setApplyMatrix) {","\t\tvar owner = this._owner;","\t\tif (owner) {","\t\t\towner.transform(null, true, Base.pick(recursively, true),","\t\t\t\t\t_setApplyMatrix);","\t\t\treturn this.isIdentity();","\t\t}","\t\treturn false;","\t},","","\ttranslate: function() {","\t\tvar point = Point.read(arguments),","\t\t\tx = point.x,","\t\t\ty = point.y;","\t\tthis._tx += x * this._a + y * this._c;","\t\tthis._ty += x * this._b + y * this._d;","\t\tthis._changed();","\t\treturn this;","\t},","","\tscale: function() {","\t\tvar scale = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\tif (center)","\t\t\tthis.translate(center);","\t\tthis._a *= scale.x;","\t\tthis._b *= scale.x;","\t\tthis._c *= scale.y;","\t\tthis._d *= scale.y;","\t\tif (center)","\t\t\tthis.translate(center.negate());","\t\tthis._changed();","\t\treturn this;","\t},","","\trotate: function(angle ) {","\t\tangle *= Math.PI / 180;","\t\tvar center = Point.read(arguments, 1),","\t\t\tx = center.x,","\t\t\ty = center.y,","\t\t\tcos = Math.cos(angle),","\t\t\tsin = Math.sin(angle),","\t\t\ttx = x - x * cos + y * sin,","\t\t\tty = y - x * sin - y * cos,","\t\t\ta = this._a,","\t\t\tb = this._b,","\t\t\tc = this._c,","\t\t\td = this._d;","\t\tthis._a = cos * a + sin * c;","\t\tthis._b = cos * b + sin * d;","\t\tthis._c = -sin * a + cos * c;","\t\tthis._d = -sin * b + cos * d;","\t\tthis._tx += tx * a + ty * c;","\t\tthis._ty += tx * b + ty * d;","\t\tthis._changed();","\t\treturn this;","\t},","","\tshear: function() {","\t\tvar shear = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\tif (center)","\t\t\tthis.translate(center);","\t\tvar a = this._a,","\t\t\tb = this._b;","\t\tthis._a += shear.y * this._c;","\t\tthis._b += shear.y * this._d;","\t\tthis._c += shear.x * a;","\t\tthis._d += shear.x * b;","\t\tif (center)","\t\t\tthis.translate(center.negate());","\t\tthis._changed();","\t\treturn this;","\t},","","\tskew: function() {","\t\tvar skew = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),","\t\t\ttoRadians = Math.PI / 180,","\t\t\tshear = new Point(Math.tan(skew.x * toRadians),","\t\t\t\tMath.tan(skew.y * toRadians));","\t\treturn this.shear(shear, center);","\t},","","\tappend: function(mx, _dontNotify) {","\t\tif (mx) {","\t\t\tvar a1 = this._a,","\t\t\t\tb1 = this._b,","\t\t\t\tc1 = this._c,","\t\t\t\td1 = this._d,","\t\t\t\ta2 = mx._a,","\t\t\t\tb2 = mx._c,","\t\t\t\tc2 = mx._b,","\t\t\t\td2 = mx._d,","\t\t\t\ttx2 = mx._tx,","\t\t\t\tty2 = mx._ty;","\t\t\tthis._a = a2 * a1 + c2 * c1;","\t\t\tthis._c = b2 * a1 + d2 * c1;","\t\t\tthis._b = a2 * b1 + c2 * d1;","\t\t\tthis._d = b2 * b1 + d2 * d1;","\t\t\tthis._tx += tx2 * a1 + ty2 * c1;","\t\t\tthis._ty += tx2 * b1 + ty2 * d1;","\t\t\tif (!_dontNotify)","\t\t\t\tthis._changed();","\t\t}","\t\treturn this;","\t},","","\tprepend: function(mx, _dontNotify) {","\t\tif (mx) {","\t\t\tvar a1 = this._a,","\t\t\t\tb1 = this._b,","\t\t\t\tc1 = this._c,","\t\t\t\td1 = this._d,","\t\t\t\ttx1 = this._tx,","\t\t\t\tty1 = this._ty,","\t\t\t\ta2 = mx._a,","\t\t\t\tb2 = mx._c,","\t\t\t\tc2 = mx._b,","\t\t\t\td2 = mx._d,","\t\t\t\ttx2 = mx._tx,","\t\t\t\tty2 = mx._ty;","\t\t\tthis._a = a2 * a1 + b2 * b1;","\t\t\tthis._c = a2 * c1 + b2 * d1;","\t\t\tthis._b = c2 * a1 + d2 * b1;","\t\t\tthis._d = c2 * c1 + d2 * d1;","\t\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;","\t\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;","\t\t\tif (!_dontNotify)","\t\t\t\tthis._changed();","\t\t}","\t\treturn this;","\t},","","\tappended: function(mx) {","\t\treturn this.clone().append(mx);","\t},","","\tprepended: function(mx) {","\t\treturn this.clone().prepend(mx);","\t},","","\tinvert: function() {","\t\tvar a = this._a,","\t\t\tb = this._b,","\t\t\tc = this._c,","\t\t\td = this._d,","\t\t\ttx = this._tx,","\t\t\tty = this._ty,","\t\t\tdet = a * d - b * c,","\t\t\tres = null;","\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {","\t\t\tthis._a = d / det;","\t\t\tthis._b = -b / det;","\t\t\tthis._c = -c / det;","\t\t\tthis._d = a / det;","\t\t\tthis._tx = (c * ty - d * tx) / det;","\t\t\tthis._ty = (b * tx - a * ty) / det;","\t\t\tres = this;","\t\t}","\t\treturn res;","\t},","","\tinverted: function() {","\t\treturn this.clone().invert();","\t},","","\tconcatenate: '#append',","\tpreConcatenate: '#prepend',","\tchain: '#appended',","","\t_shiftless: function() {","\t\treturn new Matrix(this._a, this._b, this._c, this._d, 0, 0);","\t},","","\t_orNullIfIdentity: function() {","\t\treturn this.isIdentity() ? null : this;","\t},","","\tisIdentity: function() {","\t\treturn this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1","\t\t\t\t&& this._tx === 0 && this._ty === 0;","\t},","","\tisInvertible: function() {","\t\tvar det = this._a * this._d - this._c * this._b;","\t\treturn det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);","\t},","","\tisSingular: function() {","\t\treturn !this.isInvertible();","\t},","","\ttransform: function( src, dst, count) {","\t\treturn arguments.length < 3","\t\t\t? this._transformPoint(Point.read(arguments))","\t\t\t: this._transformCoordinates(src, dst, count);","\t},","","\t_transformPoint: function(point, dest, _dontNotify) {","\t\tvar x = point.x,","\t\t\ty = point.y;","\t\tif (!dest)","\t\t\tdest = new Point();","\t\treturn dest._set(","\t\t\t\tx * this._a + y * this._c + this._tx,","\t\t\t\tx * this._b + y * this._d + this._ty,","\t\t\t\t_dontNotify);","\t},","","\t_transformCoordinates: function(src, dst, count) {","\t\tfor (var i = 0, max = 2 * count; i < max; i += 2) {","\t\t\tvar x = src[i],","\t\t\t\ty = src[i + 1];","\t\t\tdst[i] = x * this._a + y * this._c + this._tx;","\t\t\tdst[i + 1] = x * this._b + y * this._d + this._ty;","\t\t}","\t\treturn dst;","\t},","","\t_transformCorners: function(rect) {","\t\tvar x1 = rect.x,","\t\t\ty1 = rect.y,","\t\t\tx2 = x1 + rect.width,","\t\t\ty2 = y1 + rect.height,","\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];","\t\treturn this._transformCoordinates(coords, coords, 4);","\t},","","\t_transformBounds: function(bounds, dest, _dontNotify) {","\t\tvar coords = this._transformCorners(bounds),","\t\t\tmin = coords.slice(0, 2),","\t\t\tmax = min.slice();","\t\tfor (var i = 2; i < 8; i++) {","\t\t\tvar val = coords[i],","\t\t\t\tj = i & 1;","\t\t\tif (val < min[j]) {","\t\t\t\tmin[j] = val;","\t\t\t} else if (val > max[j]) {","\t\t\t\tmax[j] = val;","\t\t\t}","\t\t}","\t\tif (!dest)","\t\t\tdest = new Rectangle();","\t\treturn dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1],","\t\t\t\t_dontNotify);","\t},","","\tinverseTransform: function() {","\t\treturn this._inverseTransform(Point.read(arguments));","\t},","","\t_inverseTransform: function(point, dest, _dontNotify) {","\t\tvar a = this._a,","\t\t\tb = this._b,","\t\t\tc = this._c,","\t\t\td = this._d,","\t\t\ttx = this._tx,","\t\t\tty = this._ty,","\t\t\tdet = a * d - b * c,","\t\t\tres = null;","\t\tif (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {","\t\t\tvar x = point.x - this._tx,","\t\t\t\ty = point.y - this._ty;","\t\t\tif (!dest)","\t\t\t\tdest = new Point();","\t\t\tres = dest._set(","\t\t\t\t\t(x * d - y * c) / det,","\t\t\t\t\t(y * a - x * b) / det,","\t\t\t\t\t_dontNotify);","\t\t}","\t\treturn res;","\t},","","\tdecompose: function() {","\t\tvar a = this._a,","\t\t\tb = this._b,","\t\t\tc = this._c,","\t\t\td = this._d,","\t\t\tdet = a * d - b * c,","\t\t\tsqrt = Math.sqrt,","\t\t\tatan2 = Math.atan2,","\t\t\tdegrees = 180 / Math.PI,","\t\t\trotate,","\t\t\tscale,","\t\t\tskew;","\t\tif (a !== 0 || b !== 0) {","\t\t\tvar r = sqrt(a * a + b * b);","\t\t\trotate = Math.acos(a / r) * (b > 0 ? 1 : -1);","\t\t\tscale = [r, det / r];","\t\t\tskew = [atan2(a * c + b * d, r * r), 0];","\t\t} else if (c !== 0 || d !== 0) {","\t\t\tvar s = sqrt(c * c + d * d);","\t\t\trotate = Math.asin(c / s)  * (d > 0 ? 1 : -1);","\t\t\tscale = [det / s, s];","\t\t\tskew = [0, atan2(a * c + b * d, s * s)];","\t\t} else {","\t\t\trotate = 0;","\t\t\tskew = scale = [0, 0];","\t\t}","\t\treturn {","\t\t\ttranslation: this.getTranslation(),","\t\t\trotation: rotate * degrees,","\t\t\tscaling: new Point(scale),","\t\t\tskewing: new Point(skew[0] * degrees, skew[1] * degrees)","\t\t};","\t},","","\tgetValues: function() {","\t\treturn [ this._a, this._b, this._c, this._d, this._tx, this._ty ];","\t},","","\tgetTranslation: function() {","\t\treturn new Point(this._tx, this._ty);","\t},","","\tgetScaling: function() {","\t\treturn (this.decompose() || {}).scaling;","\t},","","\tgetRotation: function() {","\t\treturn (this.decompose() || {}).rotation;","\t},","","\tapplyToContext: function(ctx) {","\t\tif (!this.isIdentity()) {","\t\t\tctx.transform(this._a, this._b, this._c, this._d,","\t\t\t\t\tthis._tx, this._ty);","\t\t}","\t}","}, Base.each(['a', 'b', 'c', 'd', 'tx', 'ty'], function(key) {","\tvar part = Base.capitalize(key),","\t\tprop = '_' + key;","\tthis['get' + part] = function() {","\t\treturn this[prop];","\t};","\tthis['set' + part] = function(value) {","\t\tthis[prop] = value;","\t\tthis._changed();","\t};","}, {}));","","var Line = Base.extend({","\t_class: 'Line',","","\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {","\t\tvar asVector = false;","\t\tif (arguments.length >= 4) {","\t\t\tthis._px = arg0;","\t\t\tthis._py = arg1;","\t\t\tthis._vx = arg2;","\t\t\tthis._vy = arg3;","\t\t\tasVector = arg4;","\t\t} else {","\t\t\tthis._px = arg0.x;","\t\t\tthis._py = arg0.y;","\t\t\tthis._vx = arg1.x;","\t\t\tthis._vy = arg1.y;","\t\t\tasVector = arg2;","\t\t}","\t\tif (!asVector) {","\t\t\tthis._vx -= this._px;","\t\t\tthis._vy -= this._py;","\t\t}","\t},","","\tgetPoint: function() {","\t\treturn new Point(this._px, this._py);","\t},","","\tgetVector: function() {","\t\treturn new Point(this._vx, this._vy);","\t},","","\tgetLength: function() {","\t\treturn this.getVector().getLength();","\t},","","\tintersect: function(line, isInfinite) {","\t\treturn Line.intersect(","\t\t\t\tthis._px, this._py, this._vx, this._vy,","\t\t\t\tline._px, line._py, line._vx, line._vy,","\t\t\t\ttrue, isInfinite);","\t},","","\tgetSide: function(point, isInfinite) {","\t\treturn Line.getSide(","\t\t\t\tthis._px, this._py, this._vx, this._vy,","\t\t\t\tpoint.x, point.y, true, isInfinite);","\t},","","\tgetDistance: function(point) {","\t\treturn Math.abs(this.getSignedDistance(point));","\t},","","\tgetSignedDistance: function(point) {","\t\treturn Line.getSignedDistance(this._px, this._py, this._vx, this._vy,","\t\t\t\tpoint.x, point.y, true);","\t},","","\tisCollinear: function(line) {","\t\treturn Point.isCollinear(this._vx, this._vy, line._vx, line._vy);","\t},","","\tisOrthogonal: function(line) {","\t\treturn Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);","\t},","","\tstatics: {","\t\tintersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector,","\t\t\t\tisInfinite) {","\t\t\tif (!asVector) {","\t\t\t\tv1x -= p1x;","\t\t\t\tv1y -= p1y;","\t\t\t\tv2x -= p2x;","\t\t\t\tv2y -= p2y;","\t\t\t}","\t\t\tvar cross = v1x * v2y - v1y * v2x;","\t\t\tif (!Numerical.isZero(cross)) {","\t\t\t\tvar dx = p1x - p2x,","\t\t\t\t\tdy = p1y - p2y,","\t\t\t\t\tu1 = (v2x * dy - v2y * dx) / cross,","\t\t\t\t\tu2 = (v1x * dy - v1y * dx) / cross,","\t\t\t\t\tepsilon = 1e-12,","\t\t\t\t\tuMin = -epsilon,","\t\t\t\t\tuMax = 1 + epsilon;","\t\t\t\tif (isInfinite","\t\t\t\t\t\t|| uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {","\t\t\t\t\tif (!isInfinite) {","\t\t\t\t\t\tu1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;","\t\t\t\t\t}","\t\t\t\t\treturn new Point(","\t\t\t\t\t\t\tp1x + u1 * v1x,","\t\t\t\t\t\t\tp1y + u1 * v1y);","\t\t\t\t}","\t\t\t}","\t\t},","","\t\tgetSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {","\t\t\tif (!asVector) {","\t\t\t\tvx -= px;","\t\t\t\tvy -= py;","\t\t\t}","\t\t\tvar v2x = x - px,","\t\t\t\tv2y = y - py,","\t\t\t\tccw = v2x * vy - v2y * vx;","\t\t\tif (!isInfinite && Numerical.isZero(ccw)) {","\t\t\t\tccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);","\t\t\t\tif (ccw >= 0 && ccw <= 1)","\t\t\t\t\tccw = 0;","\t\t\t}","\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;","\t\t},","","\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {","\t\t\tif (!asVector) {","\t\t\t\tvx -= px;","\t\t\t\tvy -= py;","\t\t\t}","\t\t\treturn vx === 0 ? vy > 0 ? x - px : px - x","\t\t\t\t : vy === 0 ? vx < 0 ? y - py : py - y","\t\t\t\t : ((x-px) * vy - (y-py) * vx) / Math.sqrt(vx * vx + vy * vy);","\t\t},","","\t\tgetDistance: function(px, py, vx, vy, x, y, asVector) {","\t\t\treturn Math.abs(","\t\t\t\t\tLine.getSignedDistance(px, py, vx, vy, x, y, asVector));","\t\t}","\t}","});","","var Project = PaperScopeItem.extend({","\t_class: 'Project',","\t_list: 'projects',","\t_reference: 'project',","\t_compactSerialize: true,","","\tinitialize: function Project(element) {","\t\tPaperScopeItem.call(this, true);","\t\tthis._children = [];","\t\tthis._namedChildren = {};","\t\tthis._activeLayer = null;","\t\tthis._currentStyle = new Style(null, null, this);","\t\tthis._view = View.create(this,","\t\t\t\telement || CanvasProvider.getCanvas(1, 1));","\t\tthis._selectionItems = {};","\t\tthis._selectionCount = 0;","\t\tthis._updateVersion = 0;","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn Base.serialize(this._children, options, true, dictionary);","\t},","","\t_changed: function(flags, item) {","\t\tif (flags & 1) {","\t\t\tvar view = this._view;","\t\t\tif (view) {","\t\t\t\tview._needsUpdate = true;","\t\t\t\tif (!view._requested && view._autoUpdate)","\t\t\t\t\tview.requestUpdate();","\t\t\t}","\t\t}","\t\tvar changes = this._changes;","\t\tif (changes && item) {","\t\t\tvar changesById = this._changesById,","\t\t\t\tid = item._id,","\t\t\t\tentry = changesById[id];","\t\t\tif (entry) {","\t\t\t\tentry.flags |= flags;","\t\t\t} else {","\t\t\t\tchanges.push(changesById[id] = { item: item, flags: flags });","\t\t\t}","\t\t}","\t},","","\tclear: function() {","\t\tvar children = this._children;","\t\tfor (var i = children.length - 1; i >= 0; i--)","\t\t\tchildren[i].remove();","\t},","","\tisEmpty: function() {","\t\treturn !this._children.length;","\t},","","\tremove: function remove() {","\t\tif (!remove.base.call(this))","\t\t\treturn false;","\t\tif (this._view)","\t\t\tthis._view.remove();","\t\treturn true;","\t},","","\tgetView: function() {","\t\treturn this._view;","\t},","","\tgetCurrentStyle: function() {","\t\treturn this._currentStyle;","\t},","","\tsetCurrentStyle: function(style) {","\t\tthis._currentStyle.set(style);","\t},","","\tgetIndex: function() {","\t\treturn this._index;","\t},","","\tgetOptions: function() {","\t\treturn this._scope.settings;","\t},","","\tgetLayers: function() {","\t\treturn this._children;","\t},","","\tgetActiveLayer: function() {","\t\treturn this._activeLayer || new Layer({ project: this, insert: true });","\t},","","\tgetSymbolDefinitions: function() {","\t\tvar definitions = [],","\t\t\tids = {};","\t\tthis.getItems({","\t\t\tclass: SymbolItem,","\t\t\tmatch: function(item) {","\t\t\t\tvar definition = item._definition,","\t\t\t\t\tid = definition._id;","\t\t\t\tif (!ids[id]) {","\t\t\t\t\tids[id] = true;","\t\t\t\t\tdefinitions.push(definition);","\t\t\t\t}","\t\t\t\treturn false;","\t\t\t}","\t\t});","\t\treturn definitions;","\t},","","\tgetSymbols: 'getSymbolDefinitions',","","\tgetSelectedItems: function() {","\t\tvar selectionItems = this._selectionItems,","\t\t\titems = [];","\t\tfor (var id in selectionItems) {","\t\t\tvar item = selectionItems[id],","\t\t\t\tselection = item._selection;","\t\t\tif ((selection & 1) && item.isInserted()) {","\t\t\t\titems.push(item);","\t\t\t} else if (!selection) {","\t\t\t\tthis._updateSelection(item);","\t\t\t}","\t\t}","\t\treturn items;","\t},","","\t_updateSelection: function(item) {","\t\tvar id = item._id,","\t\t\tselectionItems = this._selectionItems;","\t\tif (item._selection) {","\t\t\tif (selectionItems[id] !== item) {","\t\t\t\tthis._selectionCount++;","\t\t\t\tselectionItems[id] = item;","\t\t\t}","\t\t} else if (selectionItems[id] === item) {","\t\t\tthis._selectionCount--;","\t\t\tdelete selectionItems[id];","\t\t}","\t},","","\tselectAll: function() {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tchildren[i].setFullySelected(true);","\t},","","\tdeselectAll: function() {","\t\tvar selectionItems = this._selectionItems;","\t\tfor (var i in selectionItems)","\t\t\tselectionItems[i].setFullySelected(false);","\t},","","\taddLayer: function(layer) {","\t\treturn this.insertLayer(undefined, layer);","\t},","","\tinsertLayer: function(index, layer) {","\t\tif (layer instanceof Layer) {","\t\t\tlayer._remove(false, true);","\t\t\tBase.splice(this._children, [layer], index, 0);","\t\t\tlayer._setProject(this, true);","\t\t\tvar name = layer._name;","\t\t\tif (name)","\t\t\t\tlayer.setName(name);","\t\t\tif (this._changes)","\t\t\t\tlayer._changed(5);","\t\t\tif (!this._activeLayer)","\t\t\t\tthis._activeLayer = layer;","\t\t} else {","\t\t\tlayer = null;","\t\t}","\t\treturn layer;","\t},","","\t_insertItem: function(index, item, _created) {","\t\titem = this.insertLayer(index, item)","\t\t\t\t|| (this._activeLayer || this._insertItem(undefined,","\t\t\t\t\t\tnew Layer(Item.NO_INSERT), true))","\t\t\t\t\t\t.insertChild(index, item);","\t\tif (_created && item.activate)","\t\t\titem.activate();","\t\treturn item;","\t},","","\tgetItems: function(options) {","\t\treturn Item._getItems(this, options);","\t},","","\tgetItem: function(options) {","\t\treturn Item._getItems(this, options, null, null, true)[0] || null;","\t},","","\timportJSON: function(json) {","\t\tthis.activate();","\t\tvar layer = this._activeLayer;","\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);","\t},","","\tremoveOn: function(type) {","\t\tvar sets = this._removeSets;","\t\tif (sets) {","\t\t\tif (type === 'mouseup')","\t\t\t\tsets.mousedrag = null;","\t\t\tvar set = sets[type];","\t\t\tif (set) {","\t\t\t\tfor (var id in set) {","\t\t\t\t\tvar item = set[id];","\t\t\t\t\tfor (var key in sets) {","\t\t\t\t\t\tvar other = sets[key];","\t\t\t\t\t\tif (other && other != set)","\t\t\t\t\t\t\tdelete other[item._id];","\t\t\t\t\t}","\t\t\t\t\titem.remove();","\t\t\t\t}","\t\t\t\tsets[type] = null;","\t\t\t}","\t\t}","\t},","","\tdraw: function(ctx, matrix, pixelRatio) {","\t\tthis._updateVersion++;","\t\tctx.save();","\t\tmatrix.applyToContext(ctx);","\t\tvar children = this._children,","\t\t\tparam = new Base({","\t\t\t\toffset: new Point(0, 0),","\t\t\t\tpixelRatio: pixelRatio,","\t\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,","\t\t\t\tmatrices: [new Matrix()],","\t\t\t\tupdateMatrix: true","\t\t\t});","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tchildren[i].draw(ctx, param);","\t\t}","\t\tctx.restore();","","\t\tif (this._selectionCount > 0) {","\t\t\tctx.save();","\t\t\tctx.strokeWidth = 1;","\t\t\tvar items = this._selectionItems,","\t\t\t\tsize = this._scope.settings.handleSize,","\t\t\t\tversion = this._updateVersion;","\t\t\tfor (var id in items) {","\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);","\t\t\t}","\t\t\tctx.restore();","\t\t}","\t}","});","","var Item = Base.extend(Emitter, {","\tstatics: {","\t\textend: function extend(src) {","\t\t\tif (src._serializeFields)","\t\t\t\tsrc._serializeFields = Base.set({},","\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);","\t\t\treturn extend.base.apply(this, arguments);","\t\t},","","\t\tNO_INSERT: { insert: false }","\t},","","\t_class: 'Item',","\t_name: null,","\t_applyMatrix: true,","\t_canApplyMatrix: true,","\t_canScaleStroke: false,","\t_pivot: null,","\t_visible: true,","\t_blendMode: 'normal',","\t_opacity: 1,","\t_locked: false,","\t_guide: false,","\t_clipMask: false,","\t_selection: 0,","\t_selectBounds: true,","\t_selectChildren: false,","\t_serializeFields: {","\t\tname: null,","\t\tapplyMatrix: null,","\t\tmatrix: new Matrix(),","\t\tpivot: null,","\t\tvisible: true,","\t\tblendMode: 'normal',","\t\topacity: 1,","\t\tlocked: false,","\t\tguide: false,","\t\tclipMask: false,","\t\tselected: false,","\t\tdata: {}","\t},","\t_prioritize: ['applyMatrix']","},","new function() {","\tvar handlers = ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',","\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'];","\treturn Base.each(handlers,","\t\tfunction(name) {","\t\t\tthis._events[name] = {","\t\t\t\tinstall: function(type) {","\t\t\t\t\tthis.getView()._countItemEvent(type, 1);","\t\t\t\t},","","\t\t\t\tuninstall: function(type) {","\t\t\t\t\tthis.getView()._countItemEvent(type, -1);","\t\t\t\t}","\t\t\t};","\t\t}, {","\t\t\t_events: {","\t\t\t\tonFrame: {","\t\t\t\t\tinstall: function() {","\t\t\t\t\t\tthis.getView()._animateItem(this, true);","\t\t\t\t\t},","","\t\t\t\t\tuninstall: function() {","\t\t\t\t\t\tthis.getView()._animateItem(this, false);","\t\t\t\t\t}","\t\t\t\t},","","\t\t\t\tonLoad: {},","\t\t\t\tonError: {}","\t\t\t},","\t\t\tstatics: {","\t\t\t\t_itemHandlers: handlers","\t\t\t}","\t\t}","\t);","}, {","\tinitialize: function Item() {","\t},","","\t_initialize: function(props, point) {","\t\tvar hasProps = props && Base.isPlainObject(props),","\t\t\tinternal = hasProps && props.internal === true,","\t\t\tmatrix = this._matrix = new Matrix(),","\t\t\tproject = hasProps && props.project || paper.project,","\t\t\tsettings = paper.settings;","\t\tthis._id = internal ? null : UID.get();","\t\tthis._parent = this._index = null;","\t\tthis._applyMatrix = this._canApplyMatrix && settings.applyMatrix;","\t\tif (point)","\t\t\tmatrix.translate(point);","\t\tmatrix._owner = this;","\t\tthis._style = new Style(project._currentStyle, this, project);","\t\tif (internal || hasProps && props.insert == false","\t\t\t|| !settings.insertItems && !(hasProps && props.insert === true)) {","\t\t\tthis._setProject(project);","\t\t} else {","\t\t\t(hasProps && props.parent || project)","\t\t\t\t\t._insertItem(undefined, this, true);","\t\t}","\t\tif (hasProps && props !== Item.NO_INSERT) {","\t\t\tthis.set(props, {","\t\t\t\tinternal: true, insert: true, project: true, parent: true","\t\t\t});","\t\t}","\t\treturn hasProps;","\t},","","\t_serialize: function(options, dictionary) {","\t\tvar props = {},","\t\t\tthat = this;","","\t\tfunction serialize(fields) {","\t\t\tfor (var key in fields) {","\t\t\t\tvar value = that[key];","\t\t\t\tif (!Base.equals(value, key === 'leading'","\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {","\t\t\t\t\tprops[key] = Base.serialize(value, options,","\t\t\t\t\t\t\tkey !== 'data', dictionary);","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tserialize(this._serializeFields);","\t\tif (!(this instanceof Group))","\t\t\tserialize(this._style._defaults);","\t\treturn [ this._class, props ];","\t},","","\t_changed: function(flags) {","\t\tvar symbol = this._symbol,","\t\t\tcacheParent = this._parent || symbol,","\t\t\tproject = this._project;","\t\tif (flags & 8) {","\t\t\tthis._bounds = this._position = this._decomposed =","\t\t\t\t\tthis._globalMatrix = undefined;","\t\t}","\t\tif (cacheParent","\t\t\t\t&& (flags & 40)) {","\t\t\tItem._clearBoundsCache(cacheParent);","\t\t}","\t\tif (flags & 2) {","\t\t\tItem._clearBoundsCache(this);","\t\t}","\t\tif (project)","\t\t\tproject._changed(flags, this);","\t\tif (symbol)","\t\t\tsymbol._changed(flags);","\t},","","\tgetId: function() {","\t\treturn this._id;","\t},","","\tgetName: function() {","\t\treturn this._name;","\t},","","\tsetName: function(name) {","","\t\tif (this._name)","\t\t\tthis._removeNamed();","\t\tif (name === (+name) + '')","\t\t\tthrow new Error(","\t\t\t\t\t'Names consisting only of numbers are not supported.');","\t\tvar owner = this._getOwner();","\t\tif (name && owner) {","\t\t\tvar children = owner._children,","\t\t\t\tnamedChildren = owner._namedChildren;","\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);","\t\t\tif (!(name in children))","\t\t\t\tchildren[name] = this;","\t\t}","\t\tthis._name = name || undefined;","\t\tthis._changed(128);","\t},","","\tgetStyle: function() {","\t\treturn this._style;","\t},","","\tsetStyle: function(style) {","\t\tthis.getStyle().set(style);","\t}","}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],","\tfunction(name) {","\t\tvar part = Base.capitalize(name),","\t\t\tkey = '_' + name,","\t\t\tflags = {","\t\t\t\tlocked: 128,","\t\t\t\tvisible: 137","\t\t\t};","\t\tthis['get' + part] = function() {","\t\t\treturn this[key];","\t\t};","\t\tthis['set' + part] = function(value) {","\t\t\tif (value != this[key]) {","\t\t\t\tthis[key] = value;","\t\t\t\tthis._changed(flags[name] || 129);","\t\t\t}","\t\t};","\t},","{}), {","\tbeans: true,","","\tgetSelection: function() {","\t\treturn this._selection;","\t},","","\tsetSelection: function(selection) {","\t\tif (selection !== this._selection) {","\t\t\tthis._selection = selection;","\t\t\tvar project = this._project;","\t\t\tif (project) {","\t\t\t\tproject._updateSelection(this);","\t\t\t\tthis._changed(129);","\t\t\t}","\t\t}","\t},","","\t_changeSelection: function(flag, selected) {","\t\tvar selection = this._selection;","\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);","\t},","","\tisSelected: function() {","\t\tif (this._selectChildren) {","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tif (children[i].isSelected())","\t\t\t\t\treturn true;","\t\t}","\t\treturn !!(this._selection & 1);","\t},","","\tsetSelected: function(selected) {","\t\tif (this._selectChildren) {","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].setSelected(selected);","\t\t}","\t\tthis._changeSelection(1, selected);","\t},","","\tisFullySelected: function() {","\t\tvar children = this._children,","\t\t\tselected = !!(this._selection & 1);","\t\tif (children && selected) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tif (!children[i].isFullySelected())","\t\t\t\t\treturn false;","\t\t\treturn true;","\t\t}","\t\treturn selected;","\t},","","\tsetFullySelected: function(selected) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].setFullySelected(selected);","\t\t}","\t\tthis._changeSelection(1, selected);","\t},","","\tisClipMask: function() {","\t\treturn this._clipMask;","\t},","","\tsetClipMask: function(clipMask) {","\t\tif (this._clipMask != (clipMask = !!clipMask)) {","\t\t\tthis._clipMask = clipMask;","\t\t\tif (clipMask) {","\t\t\t\tthis.setFillColor(null);","\t\t\t\tthis.setStrokeColor(null);","\t\t\t}","\t\t\tthis._changed(129);","\t\t\tif (this._parent)","\t\t\t\tthis._parent._changed(1024);","\t\t}","\t},","","\tgetData: function() {","\t\tif (!this._data)","\t\t\tthis._data = {};","\t\treturn this._data;","\t},","","\tsetData: function(data) {","\t\tthis._data = data;","\t},","","\tgetPosition: function(_dontLink) {","\t\tvar position = this._position,","\t\t\tctor = _dontLink ? Point : LinkedPoint;","\t\tif (!position) {","\t\t\tvar pivot = this._pivot;","\t\t\tposition = this._position = pivot","\t\t\t\t\t? this._matrix._transformPoint(pivot)","\t\t\t\t\t: this.getBounds().getCenter(true);","\t\t}","\t\treturn new ctor(position.x, position.y, this, 'setPosition');","\t},","","\tsetPosition: function() {","\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));","\t},","","\tgetPivot: function() {","\t\tvar pivot = this._pivot;","\t\treturn pivot","\t\t\t\t? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot')","\t\t\t\t: null;","\t},","","\tsetPivot: function() {","\t\tthis._pivot = Point.read(arguments, 0, { clone: true, readNull: true });","\t\tthis._position = undefined;","\t}","}, Base.each({","\t\tgetStrokeBounds: { stroke: true },","\t\tgetHandleBounds: { handle: true },","\t\tgetInternalBounds: { internal: true }","\t},","\tfunction(options, key) {","\t\tthis[key] = function(matrix) {","\t\t\treturn this.getBounds(matrix, options);","\t\t};","\t},","{","\tbeans: true,","","\tgetBounds: function(matrix, options) {","\t\tvar hasMatrix = options || matrix instanceof Matrix,","\t\t\topts = Base.set({}, hasMatrix ? options : matrix,","\t\t\t\t\tthis._boundsOptions);","\t\tif (!opts.stroke || this.getStrokeScaling())","\t\t\topts.cacheItem = this;","\t\tvar rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;","\t\treturn !arguments.length","\t\t\t\t? new LinkedRectangle(rect.x, rect.y, rect.width, rect.height,","\t\t\t\t\tthis, 'setBounds')","\t\t\t\t: rect;","\t},","","\tsetBounds: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tbounds = this.getBounds(),","\t\t\t_matrix = this._matrix,","\t\t\tmatrix = new Matrix(),","\t\t\tcenter = rect.getCenter();","\t\tmatrix.translate(center);","\t\tif (rect.width != bounds.width || rect.height != bounds.height) {","\t\t\tif (!_matrix.isInvertible()) {","\t\t\t\t_matrix.set(_matrix._backup","\t\t\t\t\t\t|| new Matrix().translate(_matrix.getTranslation()));","\t\t\t\tbounds = this.getBounds();","\t\t\t}","\t\t\tmatrix.scale(","\t\t\t\t\tbounds.width !== 0 ? rect.width / bounds.width : 0,","\t\t\t\t\tbounds.height !== 0 ? rect.height / bounds.height : 0);","\t\t}","\t\tcenter = bounds.getCenter();","\t\tmatrix.translate(-center.x, -center.y);","\t\tthis.transform(matrix);","\t},","","\t_getBounds: function(matrix, options) {","\t\tvar children = this._children;","\t\tif (!children || !children.length)","\t\t\treturn new Rectangle();","\t\tItem._updateBoundsCache(this, options.cacheItem);","\t\treturn Item._getBounds(children, matrix, options);","\t},","","\t_getBoundsCacheKey: function(options, internal) {","\t\treturn [","\t\t\toptions.stroke ? 1 : 0,","\t\t\toptions.handle ? 1 : 0,","\t\t\tinternal ? 1 : 0","\t\t].join('');","\t},","","\t_getCachedBounds: function(matrix, options, noInternal) {","\t\tmatrix = matrix && matrix._orNullIfIdentity();","\t\tvar internal = options.internal && !noInternal,","\t\t\tcacheItem = options.cacheItem,","\t\t\t_matrix = internal ? null : this._matrix._orNullIfIdentity(),","\t\t\tcacheKey = cacheItem && (!matrix || matrix.equals(_matrix))","\t\t\t\t&& this._getBoundsCacheKey(options, internal),","\t\t\tbounds = this._bounds;","\t\tItem._updateBoundsCache(this._parent || this._symbol, cacheItem);","\t\tif (cacheKey && bounds && cacheKey in bounds) {","\t\t\tvar cached = bounds[cacheKey];","\t\t\treturn {","\t\t\t\trect: cached.rect.clone(),","\t\t\t\tnonscaling: cached.nonscaling","\t\t\t};","\t\t}","\t\tvar res = this._getBounds(matrix || _matrix, options),","\t\t\trect = res.rect || res,","\t\t\tstyle = this._style,","\t\t\tnonscaling = res.nonscaling || style.hasStroke()","\t\t\t\t&& !style.getStrokeScaling();","\t\tif (cacheKey) {","\t\t\tif (!bounds) {","\t\t\t\tthis._bounds = bounds = {};","\t\t\t}","\t\t\tvar cached = bounds[cacheKey] = {","\t\t\t\trect: rect.clone(),","\t\t\t\tnonscaling: nonscaling,","\t\t\t\tinternal: internal","\t\t\t};","\t\t}","\t\treturn {","\t\t\trect: rect,","\t\t\tnonscaling: nonscaling","\t\t};","\t},","","\t_getStrokeMatrix: function(matrix, options) {","\t\tvar parent = this.getStrokeScaling() ? null","\t\t\t\t: options && options.internal ? this","\t\t\t\t\t: this._parent || this._symbol && this._symbol._item,","\t\t\tmx = parent ? parent.getViewMatrix().invert() : matrix;","\t\treturn mx && mx._shiftless();","\t},","","\tstatics: {","\t\t_updateBoundsCache: function(parent, item) {","\t\t\tif (parent && item) {","\t\t\t\tvar id = item._id,","\t\t\t\t\tref = parent._boundsCache = parent._boundsCache || {","\t\t\t\t\t\tids: {},","\t\t\t\t\t\tlist: []","\t\t\t\t\t};","\t\t\t\tif (!ref.ids[id]) {","\t\t\t\t\tref.list.push(item);","\t\t\t\t\tref.ids[id] = item;","\t\t\t\t}","\t\t\t}","\t\t},","","\t\t_clearBoundsCache: function(item) {","\t\t\tvar cache = item._boundsCache;","\t\t\tif (cache) {","\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;","\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++){","\t\t\t\t\tvar other = list[i];","\t\t\t\t\tif (other !== item) {","\t\t\t\t\t\tother._bounds = other._position = undefined;","\t\t\t\t\t\tif (other._boundsCache)","\t\t\t\t\t\t\tItem._clearBoundsCache(other);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t},","","\t\t_getBounds: function(items, matrix, options) {","\t\t\tvar x1 = Infinity,","\t\t\t\tx2 = -x1,","\t\t\t\ty1 = x1,","\t\t\t\ty2 = x2,","\t\t\t\tnonscaling = false;","\t\t\toptions = options || {};","\t\t\tfor (var i = 0, l = items.length; i < l; i++) {","\t\t\t\tvar item = items[i];","\t\t\t\tif (item._visible && !item.isEmpty()) {","\t\t\t\t\tvar bounds = item._getCachedBounds(","\t\t\t\t\t\tmatrix && matrix.appended(item._matrix), options, true),","\t\t\t\t\t\trect = bounds.rect;","\t\t\t\t\tx1 = Math.min(rect.x, x1);","\t\t\t\t\ty1 = Math.min(rect.y, y1);","\t\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);","\t\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);","\t\t\t\t\tif (bounds.nonscaling)","\t\t\t\t\t\tnonscaling = true;","\t\t\t\t}","\t\t\t}","\t\t\treturn {","\t\t\t\trect: isFinite(x1)","\t\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)","\t\t\t\t\t: new Rectangle(),","\t\t\t\tnonscaling: nonscaling","\t\t\t};","\t\t}","\t}","","}), {","\tbeans: true,","","\t_decompose: function() {","\t\treturn this._applyMatrix","\t\t\t? null","\t\t\t: this._decomposed || (this._decomposed = this._matrix.decompose());","\t},","","\tgetRotation: function() {","\t\tvar decomposed = this._decompose();","\t\treturn decomposed ? decomposed.rotation : 0;","\t},","","\tsetRotation: function(rotation) {","\t\tvar current = this.getRotation();","\t\tif (current != null && rotation != null) {","\t\t\tvar decomposed = this._decomposed;","\t\t\tthis.rotate(rotation - current);","\t\t\tif (decomposed) {","\t\t\t\tdecomposed.rotation = rotation;","\t\t\t\tthis._decomposed = decomposed;","\t\t\t}","\t\t}","\t},","","\tgetScaling: function() {","\t\tvar decomposed = this._decompose(),","\t\t\ts = decomposed && decomposed.scaling;","\t\treturn new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');","\t},","","\tsetScaling: function() {","\t\tvar current = this.getScaling(),","\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });","\t\tif (current && scaling && !current.equals(scaling)) {","\t\t\tvar rotation = this.getRotation(),","\t\t\t\tdecomposed = this._decomposed,","\t\t\t\tmatrix = new Matrix(),","\t\t\t\tcenter = this.getPosition(true);","\t\t\tmatrix.translate(center);","\t\t\tif (rotation)","\t\t\t\tmatrix.rotate(rotation);","\t\t\tmatrix.scale(scaling.x / current.x, scaling.y / current.y);","\t\t\tif (rotation)","\t\t\t\tmatrix.rotate(-rotation);","\t\t\tmatrix.translate(center.negate());","\t\t\tthis.transform(matrix);","\t\t\tif (decomposed) {","\t\t\t\tdecomposed.scaling = scaling;","\t\t\t\tthis._decomposed = decomposed;","\t\t\t}","\t\t}","\t},","","\tgetMatrix: function() {","\t\treturn this._matrix;","\t},","","\tsetMatrix: function() {","\t\tvar matrix = this._matrix;","\t\tmatrix.initialize.apply(matrix, arguments);","\t},","","\tgetGlobalMatrix: function(_dontClone) {","\t\tvar matrix = this._globalMatrix,","\t\t\tupdateVersion = this._project._updateVersion;","\t\tif (matrix && matrix._updateVersion !== updateVersion)","\t\t\tmatrix = null;","\t\tif (!matrix) {","\t\t\tmatrix = this._globalMatrix = this._matrix.clone();","\t\t\tvar parent = this._parent;","\t\t\tif (parent)","\t\t\t\tmatrix.prepend(parent.getGlobalMatrix(true));","\t\t\tmatrix._updateVersion = updateVersion;","\t\t}","\t\treturn _dontClone ? matrix : matrix.clone();","\t},","","\tgetViewMatrix: function() {","\t\treturn this.getGlobalMatrix().prepend(this.getView()._matrix);","\t},","","\tgetApplyMatrix: function() {","\t\treturn this._applyMatrix;","\t},","","\tsetApplyMatrix: function(apply) {","\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)","\t\t\tthis.transform(null, true);","\t},","","\tgetTransformContent: '#getApplyMatrix',","\tsetTransformContent: '#setApplyMatrix',","}, {","\tgetProject: function() {","\t\treturn this._project;","\t},","","\t_setProject: function(project, installEvents) {","\t\tif (this._project !== project) {","\t\t\tif (this._project)","\t\t\t\tthis._installEvents(false);","\t\t\tthis._project = project;","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)","\t\t\t\tchildren[i]._setProject(project);","\t\t\tinstallEvents = true;","\t\t}","\t\tif (installEvents)","\t\t\tthis._installEvents(true);","\t},","","\tgetView: function() {","\t\treturn this._project._view;","\t},","","\t_installEvents: function _installEvents(install) {","\t\t_installEvents.base.call(this, install);","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children && children.length; i < l; i++)","\t\t\tchildren[i]._installEvents(install);","\t},","","\tgetLayer: function() {","\t\tvar parent = this;","\t\twhile (parent = parent._parent) {","\t\t\tif (parent instanceof Layer)","\t\t\t\treturn parent;","\t\t}","\t\treturn null;","\t},","","\tgetParent: function() {","\t\treturn this._parent;","\t},","","\tsetParent: function(item) {","\t\treturn item.addChild(this);","\t},","","\t_getOwner: '#getParent',","","\tgetChildren: function() {","\t\treturn this._children;","\t},","","\tsetChildren: function(items) {","\t\tthis.removeChildren();","\t\tthis.addChildren(items);","\t},","","\tgetFirstChild: function() {","\t\treturn this._children && this._children[0] || null;","\t},","","\tgetLastChild: function() {","\t\treturn this._children && this._children[this._children.length - 1]","\t\t\t\t|| null;","\t},","","\tgetNextSibling: function() {","\t\tvar owner = this._getOwner();","\t\treturn owner && owner._children[this._index + 1] || null;","\t},","","\tgetPreviousSibling: function() {","\t\tvar owner = this._getOwner();","\t\treturn owner && owner._children[this._index - 1] || null;","\t},","","\tgetIndex: function() {","\t\treturn this._index;","\t},","","\tequals: function(item) {","\t\treturn item === this || item && this._class === item._class","\t\t\t\t&& this._style.equals(item._style)","\t\t\t\t&& this._matrix.equals(item._matrix)","\t\t\t\t&& this._locked === item._locked","\t\t\t\t&& this._visible === item._visible","\t\t\t\t&& this._blendMode === item._blendMode","\t\t\t\t&& this._opacity === item._opacity","\t\t\t\t&& this._clipMask === item._clipMask","\t\t\t\t&& this._guide === item._guide","\t\t\t\t&& this._equals(item)","\t\t\t\t|| false;","\t},","","\t_equals: function(item) {","\t\treturn Base.equals(this._children, item._children);","\t},","","\tclone: function(options) {","\t\tvar copy = new this.constructor(Item.NO_INSERT),","\t\t\tchildren = this._children,","\t\t\tinsert = Base.pick(options ? options.insert : undefined,","\t\t\t\t\toptions === undefined || options === true),","\t\t\tdeep = Base.pick(options ? options.deep : undefined, true);","\t\tif (children)","\t\t\tcopy.copyAttributes(this);","\t\tif (!children || deep)","\t\t\tcopy.copyContent(this);","\t\tif (!children)","\t\t\tcopy.copyAttributes(this);","\t\tif (insert)","\t\t\tcopy.insertAbove(this);","\t\tvar name = this._name,","\t\t\tparent = this._parent;","\t\tif (name && parent) {","\t\t\tvar children = parent._children,","\t\t\t\torig = name,","\t\t\t\ti = 1;","\t\t\twhile (children[name])","\t\t\t\tname = orig + ' ' + (i++);","\t\t\tif (name !== orig)","\t\t\t\tcopy.setName(name);","\t\t}","\t\treturn copy;","\t},","","\tcopyContent: function(source) {","\t\tvar children = source._children;","\t\tfor (var i = 0, l = children && children.length; i < l; i++) {","\t\t\tthis.addChild(children[i].clone(false), true);","\t\t}","\t},","","\tcopyAttributes: function(source, excludeMatrix) {","\t\tthis.setStyle(source._style);","\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',","\t\t\t\t'_clipMask', '_guide'];","\t\tfor (var i = 0, l = keys.length; i < l; i++) {","\t\t\tvar key = keys[i];","\t\t\tif (source.hasOwnProperty(key))","\t\t\t\tthis[key] = source[key];","\t\t}","\t\tif (!excludeMatrix)","\t\t\tthis._matrix.set(source._matrix, true);","\t\tthis.setApplyMatrix(source._applyMatrix);","\t\tthis.setPivot(source._pivot);","\t\tthis.setSelection(source._selection);","\t\tvar data = source._data,","\t\t\tname = source._name;","\t\tthis._data = data ? Base.clone(data) : null;","\t\tif (name)","\t\t\tthis.setName(name);","\t},","","\trasterize: function(resolution, insert) {","\t\tvar bounds = this.getStrokeBounds(),","\t\t\tscale = (resolution || this.getView().getResolution()) / 72,","\t\t\ttopLeft = bounds.getTopLeft().floor(),","\t\t\tbottomRight = bounds.getBottomRight().ceil(),","\t\t\tsize = new Size(bottomRight.subtract(topLeft)),","\t\t\traster = new Raster(Item.NO_INSERT);","\t\tif (!size.isZero()) {","\t\t\tvar canvas = CanvasProvider.getCanvas(size.multiply(scale)),","\t\t\t\tctx = canvas.getContext('2d'),","\t\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());","\t\t\tctx.save();","\t\t\tmatrix.applyToContext(ctx);","\t\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));","\t\t\tctx.restore();","\t\t\traster.setCanvas(canvas);","\t\t}","\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))","\t\t\t\t.scale(1 / scale));","\t\tif (insert === undefined || insert)","\t\t\traster.insertAbove(this);","\t\treturn raster;","\t},","","\tcontains: function() {","\t\treturn !!this._contains(","\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));","\t},","","\t_contains: function(point) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = children.length - 1; i >= 0; i--) {","\t\t\t\tif (children[i].contains(point))","\t\t\t\t\treturn true;","\t\t\t}","\t\t\treturn false;","\t\t}","\t\treturn point.isInside(this.getInternalBounds());","\t},","","\tisInside: function() {","\t\treturn Rectangle.read(arguments).contains(this.getBounds());","\t},","","\t_asPathItem: function() {","\t\treturn new Path.Rectangle({","\t\t\trectangle: this.getInternalBounds(),","\t\t\tmatrix: this._matrix,","\t\t\tinsert: false,","\t\t});","\t},","","\tintersects: function(item, _matrix) {","\t\tif (!(item instanceof Item))","\t\t\treturn false;","\t\treturn this._asPathItem().getIntersections(item._asPathItem(), null,","\t\t\t\t_matrix, true).length > 0;","\t}","},","new function() {","\tfunction hitTest() {","\t\treturn this._hitTest(","\t\t\t\tPoint.read(arguments),","\t\t\t\tHitResult.getOptions(arguments));","\t}","","\tfunction hitTestAll() {","\t\tvar point = Point.read(arguments),","\t\t\toptions = HitResult.getOptions(arguments),","\t\t\tall = [];","\t\tthis._hitTest(point, Base.set({ all: all }, options));","\t\treturn all;","\t}","","\tfunction hitTestChildren(point, options, viewMatrix, _exclude) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = children.length - 1; i >= 0; i--) {","\t\t\t\tvar child = children[i];","\t\t\t\tvar res = child !== _exclude && child._hitTest(point, options,","\t\t\t\t\t\tviewMatrix);","\t\t\t\tif (res && !options.all)","\t\t\t\t\treturn res;","\t\t\t}","\t\t}","\t\treturn null;","\t}","","\tProject.inject({","\t\thitTest: hitTest,","\t\thitTestAll: hitTestAll,","\t\t_hitTest: hitTestChildren","\t});","","\treturn {","\t\thitTest: hitTest,","\t\thitTestAll: hitTestAll,","\t\t_hitTestChildren: hitTestChildren,","\t};","}, {","","\t_hitTest: function(point, options, parentViewMatrix) {","\t\tif (this._locked || !this._visible || this._guide && !options.guides","\t\t\t\t|| this.isEmpty()) {","\t\t\treturn null;","\t\t}","","\t\tvar matrix = this._matrix,","\t\t\tviewMatrix = parentViewMatrix","\t\t\t\t\t? parentViewMatrix.appended(matrix)","\t\t\t\t\t: this.getGlobalMatrix().prepend(this.getView()._matrix),","\t\t\ttolerance = Math.max(options.tolerance, 1e-12),","\t\t\ttolerancePadding = options._tolerancePadding = new Size(","\t\t\t\t\tPath._getStrokePadding(tolerance,","\t\t\t\t\t\tmatrix._shiftless().invert()));","\t\tpoint = matrix._inverseTransform(point);","\t\tif (!point || !this._children &&","\t\t\t!this.getBounds({ internal: true, stroke: true, handle: true })","\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point)) {","\t\t\treturn null;","\t\t}","","\t\tvar checkSelf = !(options.guides && !this._guide","\t\t\t\t|| options.selected && !this.isSelected()","\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)","\t\t\t\t|| options.class && !(this instanceof options.class)),","\t\t\tmatch = options.match,","\t\t\tthat = this,","\t\t\tbounds,","\t\t\tres;","","\t\tfunction filter(hit) {","\t\t\tif (hit && match && !match(hit))","\t\t\t\thit = null;","\t\t\tif (hit && options.all)","\t\t\t\toptions.all.push(hit);","\t\t\treturn hit;","\t\t}","","\t\tfunction checkPoint(type, part) {","\t\t\tvar pt = part ? bounds['get' + part]() : that.getPosition();","\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1) {","\t\t\t\treturn new HitResult(type, that, {","\t\t\t\t\tname: part ? Base.hyphenate(part) : type,","\t\t\t\t\tpoint: pt","\t\t\t\t});","\t\t\t}","\t\t}","","\t\tvar checkPosition = options.position,","\t\t\tcheckCenter = options.center,","\t\t\tcheckBounds = options.bounds;","\t\tif (checkSelf && this._parent","\t\t\t\t&& (checkPosition || checkCenter || checkBounds)) {","\t\t\tif (checkCenter || checkBounds) {","\t\t\t\tbounds = this.getInternalBounds();","\t\t\t}","\t\t\tres = checkPosition && checkPoint('position') ||","\t\t\t\t\tcheckCenter && checkPoint('center', 'Center');","\t\t\tif (!res && checkBounds) {","\t\t\t\tvar points = [","\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',","\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'","\t\t\t\t];","\t\t\t\tfor (var i = 0; i < 8 && !res; i++) {","\t\t\t\t\tres = checkPoint('bounds', points[i]);","\t\t\t\t}","\t\t\t}","\t\t\tres = filter(res);","\t\t}","","\t\tif (!res) {","\t\t\tres = this._hitTestChildren(point, options, viewMatrix)","\t\t\t\t|| checkSelf","\t\t\t\t\t&& filter(this._hitTestSelf(point, options, viewMatrix,","\t\t\t\t\t\tthis.getStrokeScaling() ? null","\t\t\t\t\t\t\t: viewMatrix._shiftless().invert()))","\t\t\t\t|| null;","\t\t}","\t\tif (res && res.point) {","\t\t\tres.point = matrix.transform(res.point);","\t\t}","\t\treturn res;","\t},","","\t_hitTestSelf: function(point, options) {","\t\tif (options.fill && this.hasFill() && this._contains(point))","\t\t\treturn new HitResult('fill', this);","\t},","","\tmatches: function(name, compare) {","\t\tfunction matchObject(obj1, obj2) {","\t\t\tfor (var i in obj1) {","\t\t\t\tif (obj1.hasOwnProperty(i)) {","\t\t\t\t\tvar val1 = obj1[i],","\t\t\t\t\t\tval2 = obj2[i];","\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {","\t\t\t\t\t\tif (!matchObject(val1, val2))","\t\t\t\t\t\t\treturn false;","\t\t\t\t\t} else if (!Base.equals(val1, val2)) {","\t\t\t\t\t\treturn false;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\treturn true;","\t\t}","\t\tvar type = typeof name;","\t\tif (type === 'object') {","\t\t\tfor (var key in name) {","\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))","\t\t\t\t\treturn false;","\t\t\t}","\t\t\treturn true;","\t\t} else if (type === 'function') {","\t\t\treturn name(this);","\t\t} else if (name === 'match') {","\t\t\treturn compare(this);","\t\t} else {","\t\t\tvar value = /^(empty|editable)$/.test(name)","\t\t\t\t\t? this['is' + Base.capitalize(name)]()","\t\t\t\t\t: name === 'type'","\t\t\t\t\t\t? Base.hyphenate(this._class)","\t\t\t\t\t\t: this[name];","\t\t\tif (name === 'class') {","\t\t\t\tif (typeof compare === 'function')","\t\t\t\t\treturn this instanceof compare;","\t\t\t\tvalue = this._class;","\t\t\t}","\t\t\tif (typeof compare === 'function') {","\t\t\t\treturn !!compare(value);","\t\t\t} else if (compare) {","\t\t\t\tif (compare.test) {","\t\t\t\t\treturn compare.test(value);","\t\t\t\t} else if (Base.isPlainObject(compare)) {","\t\t\t\t\treturn matchObject(compare, value);","\t\t\t\t}","\t\t\t}","\t\t\treturn Base.equals(value, compare);","\t\t}","\t},","","\tgetItems: function(options) {","\t\treturn Item._getItems(this, options, this._matrix);","\t},","","\tgetItem: function(options) {","\t\treturn Item._getItems(this, options, this._matrix, null, true)[0]","\t\t\t\t|| null;","\t},","","\tstatics: {","\t\t_getItems: function _getItems(item, options, matrix, param, firstOnly) {","\t\t\tif (!param) {","\t\t\t\tvar obj = typeof options === 'object' && options,","\t\t\t\t\toverlapping = obj && obj.overlapping,","\t\t\t\t\tinside = obj && obj.inside,","\t\t\t\t\tbounds = overlapping || inside,","\t\t\t\t\trect = bounds && Rectangle.read([bounds]);","\t\t\t\tparam = {","\t\t\t\t\titems: [],","\t\t\t\t\trecursive: obj && obj.recursive !== false,","\t\t\t\t\tinside: !!inside,","\t\t\t\t\toverlapping: !!overlapping,","\t\t\t\t\trect: rect,","\t\t\t\t\tpath: overlapping && new Path.Rectangle({","\t\t\t\t\t\trectangle: rect,","\t\t\t\t\t\tinsert: false","\t\t\t\t\t})","\t\t\t\t};","\t\t\t\tif (obj) {","\t\t\t\t\toptions = Base.filter({}, options, {","\t\t\t\t\t\trecursive: true, inside: true, overlapping: true","\t\t\t\t\t});","\t\t\t\t}","\t\t\t}","\t\t\tvar children = item._children,","\t\t\t\titems = param.items,","\t\t\t\trect = param.rect;","\t\t\tmatrix = rect && (matrix || new Matrix());","\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {","\t\t\t\tvar child = children[i],","\t\t\t\t\tchildMatrix = matrix && matrix.appended(child._matrix),","\t\t\t\t\tadd = true;","\t\t\t\tif (rect) {","\t\t\t\t\tvar bounds = child.getBounds(childMatrix);","\t\t\t\t\tif (!rect.intersects(bounds))","\t\t\t\t\t\tcontinue;","\t\t\t\t\tif (!(rect.contains(bounds)","\t\t\t\t\t\t\t|| param.overlapping && (bounds.contains(rect)","\t\t\t\t\t\t\t\t|| param.path.intersects(child, childMatrix))))","\t\t\t\t\t\tadd = false;","\t\t\t\t}","\t\t\t\tif (add && child.matches(options)) {","\t\t\t\t\titems.push(child);","\t\t\t\t\tif (firstOnly)","\t\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif (param.recursive !== false) {","\t\t\t\t\t_getItems(child, options, childMatrix, param, firstOnly);","\t\t\t\t}","\t\t\t\tif (firstOnly && items.length > 0)","\t\t\t\t\tbreak;","\t\t\t}","\t\t\treturn items;","\t\t}","\t}","}, {","","\timportJSON: function(json) {","\t\tvar res = Base.importJSON(json, this);","\t\treturn res !== this ? this.addChild(res) : res;","\t},","","\taddChild: function(item) {","\t\treturn this.insertChild(undefined, item);","\t},","","\tinsertChild: function(index, item) {","\t\tvar res = item ? this.insertChildren(index, [item]) : null;","\t\treturn res && res[0];","\t},","","\taddChildren: function(items) {","\t\treturn this.insertChildren(this._children.length, items);","\t},","","\tinsertChildren: function(index, items) {","\t\tvar children = this._children;","\t\tif (children && items && items.length > 0) {","\t\t\titems = Base.slice(items);","\t\t\tvar inserted = {};","\t\t\tfor (var i = items.length - 1; i >= 0; i--) {","\t\t\t\tvar item = items[i],","\t\t\t\t\tid = item && item._id;","\t\t\t\tif (!item || inserted[id]) {","\t\t\t\t\titems.splice(i, 1);","\t\t\t\t} else {","\t\t\t\t\titem._remove(false, true);","\t\t\t\t\tinserted[id] = true;","\t\t\t\t}","\t\t\t}","\t\t\tBase.splice(children, items, index, 0);","\t\t\tvar project = this._project,","\t\t\t\tnotifySelf = project._changes;","\t\t\tfor (var i = 0, l = items.length; i < l; i++) {","\t\t\t\tvar item = items[i],","\t\t\t\t\tname = item._name;","\t\t\t\titem._parent = this;","\t\t\t\titem._setProject(project, true);","\t\t\t\tif (name)","\t\t\t\t\titem.setName(name);","\t\t\t\tif (notifySelf)","\t\t\t\t\titem._changed(5);","\t\t\t}","\t\t\tthis._changed(11);","\t\t} else {","\t\t\titems = null;","\t\t}","\t\treturn items;","\t},","","\t_insertItem: '#insertChild',","","\t_insertAt: function(item, offset) {","\t\tvar owner = item && item._getOwner(),","\t\t\tres = item !== this && owner ? this : null;","\t\tif (res) {","\t\t\tres._remove(false, true);","\t\t\towner._insertItem(item._index + offset, res);","\t\t}","\t\treturn res;","\t},","","\tinsertAbove: function(item) {","\t\treturn this._insertAt(item, 1);","\t},","","\tinsertBelow: function(item) {","\t\treturn this._insertAt(item, 0);","\t},","","\tsendToBack: function() {","\t\tvar owner = this._getOwner();","\t\treturn owner ? owner._insertItem(0, this) : null;","\t},","","\tbringToFront: function() {","\t\tvar owner = this._getOwner();","\t\treturn owner ? owner._insertItem(undefined, this) : null;","\t},","","\tappendTop: '#addChild',","","\tappendBottom: function(item) {","\t\treturn this.insertChild(0, item);","\t},","","\tmoveAbove: '#insertAbove',","","\tmoveBelow: '#insertBelow',","","\taddTo: function(owner) {","\t\treturn owner._insertItem(undefined, this);","\t},","","\tcopyTo: function(owner) {","\t\treturn this.clone(false).addTo(owner);","\t},","","\treduce: function(options) {","\t\tvar children = this._children;","\t\tif (children && children.length === 1) {","\t\t\tvar child = children[0].reduce(options);","\t\t\tif (this._parent) {","\t\t\t\tchild.insertAbove(this);","\t\t\t\tthis.remove();","\t\t\t} else {","\t\t\t\tchild.remove();","\t\t\t}","\t\t\treturn child;","\t\t}","\t\treturn this;","\t},","","\t_removeNamed: function() {","\t\tvar owner = this._getOwner();","\t\tif (owner) {","\t\t\tvar children = owner._children,","\t\t\t\tnamedChildren = owner._namedChildren,","\t\t\t\tname = this._name,","\t\t\t\tnamedArray = namedChildren[name],","\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;","\t\t\tif (index !== -1) {","\t\t\t\tif (children[name] == this)","\t\t\t\t\tdelete children[name];","\t\t\t\tnamedArray.splice(index, 1);","\t\t\t\tif (namedArray.length) {","\t\t\t\t\tchildren[name] = namedArray[0];","\t\t\t\t} else {","\t\t\t\t\tdelete namedChildren[name];","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\t_remove: function(notifySelf, notifyParent) {","\t\tvar owner = this._getOwner(),","\t\t\tproject = this._project,","\t\t\tindex = this._index;","\t\tif (owner) {","\t\t\tif (this._name)","\t\t\t\tthis._removeNamed();","\t\t\tif (index != null) {","\t\t\t\tif (project._activeLayer === this)","\t\t\t\t\tproject._activeLayer = this.getNextSibling()","\t\t\t\t\t\t\t|| this.getPreviousSibling();","\t\t\t\tBase.splice(owner._children, null, index, 1);","\t\t\t}","\t\t\tthis._installEvents(false);","\t\t\tif (notifySelf && project._changes)","\t\t\t\tthis._changed(5);","\t\t\tif (notifyParent)","\t\t\t\towner._changed(11, this);","\t\t\tthis._parent = null;","\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tremove: function() {","\t\treturn this._remove(true, true);","\t},","","\treplaceWith: function(item) {","\t\tvar ok = item && item.insertBelow(this);","\t\tif (ok)","\t\t\tthis.remove();","\t\treturn ok;","\t},","","\tremoveChildren: function(start, end) {","\t\tif (!this._children)","\t\t\treturn null;","\t\tstart = start || 0;","\t\tend = Base.pick(end, this._children.length);","\t\tvar removed = Base.splice(this._children, null, start, end - start);","\t\tfor (var i = removed.length - 1; i >= 0; i--) {","\t\t\tremoved[i]._remove(true, false);","\t\t}","\t\tif (removed.length > 0)","\t\t\tthis._changed(11);","\t\treturn removed;","\t},","","\tclear: '#removeChildren',","","\treverseChildren: function() {","\t\tif (this._children) {","\t\t\tthis._children.reverse();","\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)","\t\t\t\tthis._children[i]._index = i;","\t\t\tthis._changed(11);","\t\t}","\t},","","\tisEmpty: function() {","\t\tvar children = this._children;","\t\treturn !children || !children.length;","\t},","","\tisEditable: function() {","\t\tvar item = this;","\t\twhile (item) {","\t\t\tif (!item._visible || item._locked)","\t\t\t\treturn false;","\t\t\titem = item._parent;","\t\t}","\t\treturn true;","\t},","","\thasFill: function() {","\t\treturn this.getStyle().hasFill();","\t},","","\thasStroke: function() {","\t\treturn this.getStyle().hasStroke();","\t},","","\thasShadow: function() {","\t\treturn this.getStyle().hasShadow();","\t},","","\t_getOrder: function(item) {","\t\tfunction getList(item) {","\t\t\tvar list = [];","\t\t\tdo {","\t\t\t\tlist.unshift(item);","\t\t\t} while (item = item._parent);","\t\t\treturn list;","\t\t}","\t\tvar list1 = getList(this),","\t\t\tlist2 = getList(item);","\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {","\t\t\tif (list1[i] != list2[i]) {","\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;","\t\t\t}","\t\t}","\t\treturn 0;","\t},","","\thasChildren: function() {","\t\treturn this._children && this._children.length > 0;","\t},","","\tisInserted: function() {","\t\treturn this._parent ? this._parent.isInserted() : false;","\t},","","\tisAbove: function(item) {","\t\treturn this._getOrder(item) === -1;","\t},","","\tisBelow: function(item) {","\t\treturn this._getOrder(item) === 1;","\t},","","\tisParent: function(item) {","\t\treturn this._parent === item;","\t},","","\tisChild: function(item) {","\t\treturn item && item._parent === this;","\t},","","\tisDescendant: function(item) {","\t\tvar parent = this;","\t\twhile (parent = parent._parent) {","\t\t\tif (parent === item)","\t\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tisAncestor: function(item) {","\t\treturn item ? item.isDescendant(this) : false;","\t},","","\tisSibling: function(item) {","\t\treturn this._parent === item._parent;","\t},","","\tisGroupedWith: function(item) {","\t\tvar parent = this._parent;","\t\twhile (parent) {","\t\t\tif (parent._parent","\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)","\t\t\t\t&& item.isDescendant(parent))","\t\t\t\t\treturn true;","\t\t\tparent = parent._parent;","\t\t}","\t\treturn false;","\t},","","}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {","\tvar rotate = key === 'rotate';","\tthis[key] = function() {","\t\tvar value = (rotate ? Base : Point).read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\treturn this.transform(new Matrix()[key](value,","\t\t\t\tcenter || this.getPosition(true)));","\t};","}, {","\ttranslate: function() {","\t\tvar mx = new Matrix();","\t\treturn this.transform(mx.translate.apply(mx, arguments));","\t},","","\ttransform: function(matrix, _applyMatrix, _applyRecursively,","\t\t\t_setApplyMatrix) {","\t\tvar _matrix = this._matrix,","\t\t\ttransform = matrix && !matrix.isIdentity(),","\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)","\t\t\t\t\t&& ((!_matrix.isIdentity() || transform)","\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);","\t\tif (!transform && !applyMatrix)","\t\t\treturn this;","\t\tif (transform) {","\t\t\tif (!matrix.isInvertible() && _matrix.isInvertible())","\t\t\t\t_matrix._backup = _matrix.getValues();","\t\t\t_matrix.prepend(matrix, true);","\t\t\tvar style = this._style,","\t\t\t\tfillColor = style.getFillColor(true),","\t\t\t\tstrokeColor = style.getStrokeColor(true);","\t\t\tif (fillColor)","\t\t\t\tfillColor.transform(matrix);","\t\t\tif (strokeColor)","\t\t\t\tstrokeColor.transform(matrix);","\t\t}","\t\tif (applyMatrix && (applyMatrix = this._transformContent(_matrix,","\t\t\t\t_applyRecursively, _setApplyMatrix))) {","\t\t\tvar pivot = this._pivot;","\t\t\tif (pivot)","\t\t\t\t_matrix._transformPoint(pivot, pivot, true);","\t\t\t_matrix.reset(true);","\t\t\tif (_setApplyMatrix && this._canApplyMatrix)","\t\t\t\tthis._applyMatrix = true;","\t\t}","\t\tvar bounds = this._bounds,","\t\t\tposition = this._position;","\t\tif (transform || applyMatrix) {","\t\t\tthis._changed(9);","\t\t}","\t\tvar decomp = transform && bounds && matrix.decompose();","\t\tif (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {","\t\t\tfor (var key in bounds) {","\t\t\t\tvar cache = bounds[key];","\t\t\t\tif (cache.nonscaling) {","\t\t\t\t\tdelete bounds[key];","\t\t\t\t} else if (applyMatrix || !cache.internal) {","\t\t\t\t\tvar rect = cache.rect;","\t\t\t\t\tmatrix._transformBounds(rect, rect);","\t\t\t\t}","\t\t\t}","\t\t\tthis._bounds = bounds;","\t\t\tvar cached = bounds[this._getBoundsCacheKey(","\t\t\t\t\tthis._boundsOptions || {})];","\t\t\tif (cached) {","\t\t\t\tthis._position = cached.rect.getCenter(true);","\t\t\t}","\t\t} else if (transform && position && this._pivot) {","\t\t\tthis._position = matrix._transformPoint(position, position);","\t\t}","\t\treturn this;","\t},","","\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,","\t\t\t\t\t\tsetApplyMatrix);","\t\t\treturn true;","\t\t}","\t},","","\tglobalToLocal: function() {","\t\treturn this.getGlobalMatrix(true)._inverseTransform(","\t\t\t\tPoint.read(arguments));","\t},","","\tlocalToGlobal: function() {","\t\treturn this.getGlobalMatrix(true)._transformPoint(","\t\t\t\tPoint.read(arguments));","\t},","","\tparentToLocal: function() {","\t\treturn this._matrix._inverseTransform(Point.read(arguments));","\t},","","\tlocalToParent: function() {","\t\treturn this._matrix._transformPoint(Point.read(arguments));","\t},","","\tfitBounds: function(rectangle, fill) {","\t\trectangle = Rectangle.read(arguments);","\t\tvar bounds = this.getBounds(),","\t\t\titemRatio = bounds.height / bounds.width,","\t\t\trectRatio = rectangle.height / rectangle.width,","\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)","\t\t\t\t\t? rectangle.width / bounds.width","\t\t\t\t\t: rectangle.height / bounds.height,","\t\t\tnewBounds = new Rectangle(new Point(),","\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));","\t\tnewBounds.setCenter(rectangle.getCenter());","\t\tthis.setBounds(newBounds);","\t}","}), {","","\t_setStyles: function(ctx, param, viewMatrix) {","\t\tvar style = this._style,","\t\t\tmatrix = this._matrix;","\t\tif (style.hasFill()) {","\t\t\tctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);","\t\t}","\t\tif (style.hasStroke()) {","\t\t\tctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);","\t\t\tctx.lineWidth = style.getStrokeWidth();","\t\t\tvar strokeJoin = style.getStrokeJoin(),","\t\t\t\tstrokeCap = style.getStrokeCap(),","\t\t\t\tmiterLimit = style.getMiterLimit();","\t\t\tif (strokeJoin)","\t\t\t\tctx.lineJoin = strokeJoin;","\t\t\tif (strokeCap)","\t\t\t\tctx.lineCap = strokeCap;","\t\t\tif (miterLimit)","\t\t\t\tctx.miterLimit = miterLimit;","\t\t\tif (paper.support.nativeDash) {","\t\t\t\tvar dashArray = style.getDashArray(),","\t\t\t\t\tdashOffset = style.getDashOffset();","\t\t\t\tif (dashArray && dashArray.length) {","\t\t\t\t\tif ('setLineDash' in ctx) {","\t\t\t\t\t\tctx.setLineDash(dashArray);","\t\t\t\t\t\tctx.lineDashOffset = dashOffset;","\t\t\t\t\t} else {","\t\t\t\t\t\tctx.mozDash = dashArray;","\t\t\t\t\t\tctx.mozDashOffset = dashOffset;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tif (style.hasShadow()) {","\t\t\tvar pixelRatio = param.pixelRatio || 1,","\t\t\t\tmx = viewMatrix._shiftless().prepend(","\t\t\t\t\tnew Matrix().scale(pixelRatio, pixelRatio)),","\t\t\t\tblur = mx.transform(new Point(style.getShadowBlur(), 0)),","\t\t\t\toffset = mx.transform(this.getShadowOffset());","\t\t\tctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);","\t\t\tctx.shadowBlur = blur.getLength();","\t\t\tctx.shadowOffsetX = offset.x;","\t\t\tctx.shadowOffsetY = offset.y;","\t\t}","\t},","","\tdraw: function(ctx, param, parentStrokeMatrix) {","\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;","\t\tif (!this._visible || this._opacity === 0)","\t\t\treturn;","\t\tvar matrices = param.matrices,","\t\t\tviewMatrix = param.viewMatrix,","\t\t\tmatrix = this._matrix,","\t\t\tglobalMatrix = matrices[matrices.length - 1].appended(matrix);","\t\tif (!globalMatrix.isInvertible())","\t\t\treturn;","","\t\tviewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix)","\t\t\t\t: globalMatrix;","","\t\tmatrices.push(globalMatrix);","\t\tif (param.updateMatrix) {","\t\t\tglobalMatrix._updateVersion = updateVersion;","\t\t\tthis._globalMatrix = globalMatrix;","\t\t}","","\t\tvar blendMode = this._blendMode,","\t\t\topacity = this._opacity,","\t\t\tnormalBlend = blendMode === 'normal',","\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],","\t\t\tdirect = normalBlend && opacity === 1","\t\t\t\t\t|| param.dontStart","\t\t\t\t\t|| param.clip","\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)","\t\t\t\t\t\t&& this._canComposite(),","\t\t\tpixelRatio = param.pixelRatio || 1,","\t\t\tmainCtx, itemOffset, prevOffset;","\t\tif (!direct) {","\t\t\tvar bounds = this.getStrokeBounds(viewMatrix);","\t\t\tif (!bounds.width || !bounds.height)","\t\t\t\treturn;","\t\t\tprevOffset = param.offset;","\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();","\t\t\tmainCtx = ctx;","\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)","\t\t\t\t\t.multiply(pixelRatio));","\t\t\tif (pixelRatio !== 1)","\t\t\t\tctx.scale(pixelRatio, pixelRatio);","\t\t}","\t\tctx.save();","\t\tvar strokeMatrix = parentStrokeMatrix","\t\t\t\t? parentStrokeMatrix.appended(matrix)","\t\t\t\t: this._canScaleStroke && !this.getStrokeScaling(true)","\t\t\t\t\t&& viewMatrix,","\t\t\tclip = !direct && param.clipItem,","\t\t\ttransform = !strokeMatrix || clip;","\t\tif (direct) {","\t\t\tctx.globalAlpha = opacity;","\t\t\tif (nativeBlend)","\t\t\t\tctx.globalCompositeOperation = blendMode;","\t\t} else if (transform) {","\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);","\t\t}","\t\tif (transform) {","\t\t\t(direct ? matrix : viewMatrix).applyToContext(ctx);","\t\t}","\t\tif (clip) {","\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));","\t\t}","\t\tif (strokeMatrix) {","\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);","\t\t\tvar offset = param.offset;","\t\t\tif (offset)","\t\t\t\tctx.translate(-offset.x, -offset.y);","\t\t}","\t\tthis._draw(ctx, param, viewMatrix, strokeMatrix);","\t\tctx.restore();","\t\tmatrices.pop();","\t\tif (param.clip && !param.dontFinish)","\t\t\tctx.clip();","\t\tif (!direct) {","\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,","\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));","\t\t\tCanvasProvider.release(ctx);","\t\t\tparam.offset = prevOffset;","\t\t}","\t},","","\t_isUpdated: function(updateVersion) {","\t\tvar parent = this._parent;","\t\tif (parent instanceof CompoundPath)","\t\t\treturn parent._isUpdated(updateVersion);","\t\tvar updated = this._updateVersion === updateVersion;","\t\tif (!updated && parent && parent._visible","\t\t\t\t&& parent._isUpdated(updateVersion)) {","\t\t\tthis._updateVersion = updateVersion;","\t\t\tupdated = true;","\t\t}","\t\treturn updated;","\t},","","\t_drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {","\t\tvar selection = this._selection,","\t\t\titemSelected = selection & 1,","\t\t\tboundsSelected = selection & 2","\t\t\t\t\t|| itemSelected && this._selectBounds,","\t\t\tpositionSelected = selection & 4;","\t\tif (!this._drawSelected)","\t\t\titemSelected = false;","\t\tif ((itemSelected || boundsSelected || positionSelected)","\t\t\t\t&& this._isUpdated(updateVersion)) {","\t\t\tvar layer,","\t\t\t\tcolor = this.getSelectedColor(true) || (layer = this.getLayer())","\t\t\t\t\t&& layer.getSelectedColor(true),","\t\t\t\tmx = matrix.appended(this.getGlobalMatrix(true)),","\t\t\t\thalf = size / 2;","\t\t\tctx.strokeStyle = ctx.fillStyle = color","\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';","\t\t\tif (itemSelected)","\t\t\t\tthis._drawSelected(ctx, mx, selectionItems);","\t\t\tif (positionSelected) {","\t\t\t\tvar point = this.getPosition(true),","\t\t\t\t\tx = point.x,","\t\t\t\t\ty = point.y;","\t\t\t\tctx.beginPath();","\t\t\t\tctx.arc(x, y, half, 0, Math.PI * 2, true);","\t\t\t\tctx.stroke();","\t\t\t\tvar deltas = [[0, -1], [1, 0], [0, 1], [-1, 0]],","\t\t\t\t\tstart = half,","\t\t\t\t\tend = size + 1;","\t\t\t\tfor (var i = 0; i < 4; i++) {","\t\t\t\t\tvar delta = deltas[i],","\t\t\t\t\t\tdx = delta[0],","\t\t\t\t\t\tdy = delta[1];","\t\t\t\t\tctx.moveTo(x + dx * start, y + dy * start);","\t\t\t\t\tctx.lineTo(x + dx * end, y + dy * end);","\t\t\t\t\tctx.stroke();","\t\t\t\t}","\t\t\t}","\t\t\tif (boundsSelected) {","\t\t\t\tvar coords = mx._transformCorners(this.getInternalBounds());","\t\t\t\tctx.beginPath();","\t\t\t\tfor (var i = 0; i < 8; i++) {","\t\t\t\t\tctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);","\t\t\t\t}","\t\t\t\tctx.closePath();","\t\t\t\tctx.stroke();","\t\t\t\tfor (var i = 0; i < 8; i++) {","\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,","\t\t\t\t\t\t\tsize, size);","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn false;","\t}","}, Base.each(['down', 'drag', 'up', 'move'], function(key) {","\tthis['removeOn' + Base.capitalize(key)] = function() {","\t\tvar hash = {};","\t\thash[key] = true;","\t\treturn this.removeOn(hash);","\t};","}, {","","\tremoveOn: function(obj) {","\t\tfor (var name in obj) {","\t\t\tif (obj[name]) {","\t\t\t\tvar key = 'mouse' + name,","\t\t\t\t\tproject = this._project,","\t\t\t\t\tsets = project._removeSets = project._removeSets || {};","\t\t\t\tsets[key] = sets[key] || {};","\t\t\t\tsets[key][this._id] = this;","\t\t\t}","\t\t}","\t\treturn this;","\t}","}));","","var Group = Item.extend({","\t_class: 'Group',","\t_selectBounds: false,","\t_selectChildren: true,","\t_serializeFields: {","\t\tchildren: []","\t},","","\tinitialize: function Group(arg) {","\t\tthis._children = [];","\t\tthis._namedChildren = {};","\t\tif (!this._initialize(arg))","\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);","\t},","","\t_changed: function _changed(flags) {","\t\t_changed.base.call(this, flags);","\t\tif (flags & 1026) {","\t\t\tthis._clipItem = undefined;","\t\t}","\t},","","\t_getClipItem: function() {","\t\tvar clipItem = this._clipItem;","\t\tif (clipItem === undefined) {","\t\t\tclipItem = null;","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\t\tif (children[i]._clipMask) {","\t\t\t\t\tclipItem = children[i];","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tthis._clipItem = clipItem;","\t\t}","\t\treturn clipItem;","\t},","","\tisClipped: function() {","\t\treturn !!this._getClipItem();","\t},","","\tsetClipped: function(clipped) {","\t\tvar child = this.getFirstChild();","\t\tif (child)","\t\t\tchild.setClipMask(clipped);","\t},","","\t_getBounds: function _getBounds(matrix, options) {","\t\tvar clipItem = this._getClipItem();","\t\treturn clipItem","\t\t\t? clipItem._getCachedBounds(","\t\t\t\tmatrix && matrix.appended(clipItem._matrix),","\t\t\t\tBase.set({}, options, { stroke: false }))","\t\t\t: _getBounds.base.call(this, matrix, options);","\t},","","\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {","\t\tvar clipItem = this._getClipItem();","\t\treturn (!clipItem || clipItem.contains(point))","\t\t\t\t&& _hitTestChildren.base.call(this, point, options, viewMatrix,","\t\t\t\t\tclipItem);","\t},","","\t_draw: function(ctx, param) {","\t\tvar clip = param.clip,","\t\t\tclipItem = !clip && this._getClipItem();","\t\tparam = param.extend({ clipItem: clipItem, clip: false });","\t\tif (clip) {","\t\t\tctx.beginPath();","\t\t\tparam.dontStart = param.dontFinish = true;","\t\t} else if (clipItem) {","\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));","\t\t}","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar item = children[i];","\t\t\tif (item !== clipItem)","\t\t\t\titem.draw(ctx, param);","\t\t}","\t}","});","","var Layer = Group.extend({","\t_class: 'Layer',","","\tinitialize: function Layer() {","\t\tGroup.apply(this, arguments);","\t},","","\t_getOwner: function() {","\t\treturn this._parent || this._index != null && this._project;","\t},","","\tisInserted: function isInserted() {","\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;","\t},","","\tactivate: function() {","\t\tthis._project._activeLayer = this;","\t},","","\t_hitTestSelf: function() {","\t}","});","","var Shape = Item.extend({","\t_class: 'Shape',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_canScaleStroke: true,","\t_serializeFields: {","\t\ttype: null,","\t\tsize: null,","\t\tradius: null","\t},","","\tinitialize: function Shape(props, point) {","\t\tthis._initialize(props, point);","\t},","","\t_equals: function(item) {","\t\treturn this._type === item._type","\t\t\t&& this._size.equals(item._size)","\t\t\t&& Base.equals(this._radius, item._radius);","\t},","","\tcopyContent: function(source) {","\t\tthis.setType(source._type);","\t\tthis.setSize(source._size);","\t\tthis.setRadius(source._radius);","\t},","","\tgetType: function() {","\t\treturn this._type;","\t},","","\tsetType: function(type) {","\t\tthis._type = type;","\t},","","\tgetShape: '#getType',","\tsetShape: '#setType',","","\tgetSize: function() {","\t\tvar size = this._size;","\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');","\t},","","\tsetSize: function() {","\t\tvar size = Size.read(arguments);","\t\tif (!this._size) {","\t\t\tthis._size = size.clone();","\t\t} else if (!this._size.equals(size)) {","\t\t\tvar type = this._type,","\t\t\t\twidth = size.width,","\t\t\t\theight = size.height;","\t\t\tif (type === 'rectangle') {","\t\t\t\tthis._radius.set(Size.min(this._radius, size.divide(2)));","\t\t\t} else if (type === 'circle') {","\t\t\t\twidth = height = (width + height) / 2;","\t\t\t\tthis._radius = width / 2;","\t\t\t} else if (type === 'ellipse') {","\t\t\t\tthis._radius._set(width / 2, height / 2);","\t\t\t}","\t\t\tthis._size._set(width, height);","\t\t\tthis._changed(9);","\t\t}","\t},","","\tgetRadius: function() {","\t\tvar rad = this._radius;","\t\treturn this._type === 'circle'","\t\t\t\t? rad","\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');","\t},","","\tsetRadius: function(radius) {","\t\tvar type = this._type;","\t\tif (type === 'circle') {","\t\t\tif (radius === this._radius)","\t\t\t\treturn;","\t\t\tvar size = radius * 2;","\t\t\tthis._radius = radius;","\t\t\tthis._size._set(size, size);","\t\t} else {","\t\t\tradius = Size.read(arguments);","\t\t\tif (!this._radius) {","\t\t\t\tthis._radius = radius.clone();","\t\t\t} else {","\t\t\t\tif (this._radius.equals(radius))","\t\t\t\t\treturn;","\t\t\t\tthis._radius.set(radius);","\t\t\t\tif (type === 'rectangle') {","\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));","\t\t\t\t\tthis._size.set(size);","\t\t\t\t} else if (type === 'ellipse') {","\t\t\t\t\tthis._size._set(radius.width * 2, radius.height * 2);","\t\t\t\t}","\t\t\t}","\t\t}","\t\tthis._changed(9);","\t},","","\tisEmpty: function() {","\t\treturn false;","\t},","","\ttoPath: function(insert) {","\t\tvar path = new Path[Base.capitalize(this._type)]({","\t\t\tcenter: new Point(),","\t\t\tsize: this._size,","\t\t\tradius: this._radius,","\t\t\tinsert: false","\t\t});","\t\tpath.copyAttributes(this);","\t\tif (paper.settings.applyMatrix)","\t\t\tpath.setApplyMatrix(true);","\t\tif (insert === undefined || insert)","\t\t\tpath.insertAbove(this);","\t\treturn path;","\t},","","\ttoShape: '#clone',","","\t_asPathItem: function() {","\t\treturn this.toPath(false);","\t},","","\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {","\t\tvar style = this._style,","\t\t\thasFill = style.hasFill(),","\t\t\thasStroke = style.hasStroke(),","\t\t\tdontPaint = param.dontFinish || param.clip,","\t\t\tuntransformed = !strokeMatrix;","\t\tif (hasFill || hasStroke || dontPaint) {","\t\t\tvar type = this._type,","\t\t\t\tradius = this._radius,","\t\t\t\tisCircle = type === 'circle';","\t\t\tif (!param.dontStart)","\t\t\t\tctx.beginPath();","\t\t\tif (untransformed && isCircle) {","\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);","\t\t\t} else {","\t\t\t\tvar rx = isCircle ? radius : radius.width,","\t\t\t\t\try = isCircle ? radius : radius.height,","\t\t\t\t\tsize = this._size,","\t\t\t\t\twidth = size.width,","\t\t\t\t\theight = size.height;","\t\t\t\tif (untransformed && type === 'rectangle' && rx === 0 && ry === 0) {","\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);","\t\t\t\t} else {","\t\t\t\t\tvar x = width / 2,","\t\t\t\t\t\ty = height / 2,","\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,","\t\t\t\t\t\tcx = rx * kappa,","\t\t\t\t\t\tcy = ry * kappa,","\t\t\t\t\t\tc = [","\t\t\t\t\t\t\t-x, -y + ry,","\t\t\t\t\t\t\t-x, -y + cy,","\t\t\t\t\t\t\t-x + cx, -y,","\t\t\t\t\t\t\t-x + rx, -y,","\t\t\t\t\t\t\tx - rx, -y,","\t\t\t\t\t\t\tx - cx, -y,","\t\t\t\t\t\t\tx, -y + cy,","\t\t\t\t\t\t\tx, -y + ry,","\t\t\t\t\t\t\tx, y - ry,","\t\t\t\t\t\t\tx, y - cy,","\t\t\t\t\t\t\tx - cx, y,","\t\t\t\t\t\t\tx - rx, y,","\t\t\t\t\t\t\t-x + rx, y,","\t\t\t\t\t\t\t-x + cx, y,","\t\t\t\t\t\t\t-x, y - cy,","\t\t\t\t\t\t\t-x, y - ry","\t\t\t\t\t\t];","\t\t\t\t\tif (strokeMatrix)","\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);","\t\t\t\t\tctx.moveTo(c[0], c[1]);","\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);","\t\t\t\t\tif (x !== rx)","\t\t\t\t\t\tctx.lineTo(c[8], c[9]);","\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);","\t\t\t\t\tif (y !== ry)","\t\t\t\t\t\tctx.lineTo(c[16], c[17]);","\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);","\t\t\t\t\tif (x !== rx)","\t\t\t\t\t\tctx.lineTo(c[24], c[25]);","\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);","\t\t\t\t}","\t\t\t}","\t\t\tctx.closePath();","\t\t}","\t\tif (!dontPaint && (hasFill || hasStroke)) {","\t\t\tthis._setStyles(ctx, param, viewMatrix);","\t\t\tif (hasFill) {","\t\t\t\tctx.fill(style.getFillRule());","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (hasStroke)","\t\t\t\tctx.stroke();","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn !(this.hasFill() && this.hasStroke());","\t},","","\t_getBounds: function(matrix, options) {","\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),","\t\t\tstyle = this._style,","\t\t\tstrokeWidth = options.stroke && style.hasStroke()","\t\t\t\t\t&& style.getStrokeWidth();","\t\tif (matrix)","\t\t\trect = matrix._transformBounds(rect);","\t\treturn strokeWidth","\t\t\t\t? rect.expand(Path._getStrokePadding(strokeWidth,","\t\t\t\t\tthis._getStrokeMatrix(matrix, options)))","\t\t\t\t: rect;","\t}","},","new function() {","\tfunction getCornerCenter(that, point, expand) {","\t\tvar radius = that._radius;","\t\tif (!radius.isZero()) {","\t\t\tvar halfSize = that._size.divide(2);","\t\t\tfor (var q = 1; q <= 4; q++) {","\t\t\t\tvar dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1),","\t\t\t\t\tcorner = dir.multiply(halfSize),","\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),","\t\t\t\t\trect = new Rectangle(","\t\t\t\t\t\t\texpand ? corner.add(dir.multiply(expand)) : corner,","\t\t\t\t\t\t\tcenter);","\t\t\t\tif (rect.contains(point))","\t\t\t\t\treturn { point: center, quadrant: q };","\t\t\t}","\t\t}","\t}","","\tfunction isOnEllipseStroke(point, radius, padding, quadrant) {","\t\tvar vector = point.divide(radius);","\t\treturn (!quadrant || vector.isInQuadrant(quadrant)) &&","\t\t\t\tvector.subtract(vector.normalize()).multiply(radius)","\t\t\t\t\t.divide(padding).length <= 1;","\t}","","\treturn {","\t\t_contains: function _contains(point) {","\t\t\tif (this._type === 'rectangle') {","\t\t\t\tvar center = getCornerCenter(this, point);","\t\t\t\treturn center","\t\t\t\t\t\t? point.subtract(center.point).divide(this._radius)","\t\t\t\t\t\t\t.getLength() <= 1","\t\t\t\t\t\t: _contains.base.call(this, point);","\t\t\t} else {","\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;","\t\t\t}","\t\t},","","\t\t_hitTestSelf: function _hitTestSelf(point, options, viewMatrix,","\t\t\t\tstrokeMatrix) {","\t\t\tvar hit = false,","\t\t\t\tstyle = this._style,","\t\t\t\thitStroke = options.stroke && style.hasStroke(),","\t\t\t\thitFill = options.fill && style.hasFill();","\t\t\tif (hitStroke || hitFill) {","\t\t\t\tvar type = this._type,","\t\t\t\t\tradius = this._radius,","\t\t\t\t\tstrokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0,","\t\t\t\t\tstrokePadding = options._tolerancePadding.add(","\t\t\t\t\t\tPath._getStrokePadding(strokeRadius,","\t\t\t\t\t\t\t!style.getStrokeScaling() && strokeMatrix));","\t\t\t\tif (type === 'rectangle') {","\t\t\t\t\tvar padding = strokePadding.multiply(2),","\t\t\t\t\t\tcenter = getCornerCenter(this, point, padding);","\t\t\t\t\tif (center) {","\t\t\t\t\t\thit = isOnEllipseStroke(point.subtract(center.point),","\t\t\t\t\t\t\t\tradius, strokePadding, center.quadrant);","\t\t\t\t\t} else {","\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),","\t\t\t\t\t\t\touter = rect.expand(padding),","\t\t\t\t\t\t\tinner = rect.expand(padding.negate());","\t\t\t\t\t\thit = outer._containsPoint(point)","\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);","\t\t\t\t\t}","\t\t\t\t} else {","\t\t\t\t\thit = isOnEllipseStroke(point, radius, strokePadding);","\t\t\t\t}","\t\t\t}","\t\t\treturn hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this)","\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);","\t\t}","\t};","}, {","","statics: new function() {","\tfunction createShape(type, point, size, radius, args) {","\t\tvar item = new Shape(Base.getNamed(args), point);","\t\titem._type = type;","\t\titem._size = size;","\t\titem._radius = radius;","\t\treturn item;","\t}","","\treturn {","\t\tCircle: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius');","\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,","\t\t\t\t\targuments);","\t\t},","","\t\tRectangle: function() {","\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),","\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),","\t\t\t\t\t\trect.getSize(true).divide(2));","\t\t\treturn createShape('rectangle', rect.getCenter(true),","\t\t\t\t\trect.getSize(true), radius, arguments);","\t\t},","","\t\tEllipse: function() {","\t\t\tvar ellipse = Shape._readEllipse(arguments),","\t\t\t\tradius = ellipse.radius;","\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),","\t\t\t\t\tradius, arguments);","\t\t},","","\t\t_readEllipse: function(args) {","\t\t\tvar center,","\t\t\t\tradius;","\t\t\tif (Base.hasNamed(args, 'radius')) {","\t\t\t\tcenter = Point.readNamed(args, 'center');","\t\t\t\tradius = Size.readNamed(args, 'radius');","\t\t\t} else {","\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');","\t\t\t\tcenter = rect.getCenter(true);","\t\t\t\tradius = rect.getSize(true).divide(2);","\t\t\t}","\t\t\treturn { center: center, radius: radius };","\t\t}","\t};","}});","","var Raster = Item.extend({","\t_class: 'Raster',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_boundsOptions: { stroke: false, handle: false },","\t_serializeFields: {","\t\tcrossOrigin: null,","\t\tsource: null","\t},","\t_prioritize: ['crossOrigin'],","","\tinitialize: function Raster(object, position) {","\t\tif (!this._initialize(object,","\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {","\t\t\tvar image = typeof object === 'string'","\t\t\t\t\t? document.getElementById(object) : object;","\t\t\tif (image) {","\t\t\t\tthis.setImage(image);","\t\t\t} else {","\t\t\t\tthis.setSource(object);","\t\t\t}","\t\t}","\t\tif (!this._size) {","\t\t\tthis._size = new Size();","\t\t\tthis._loaded = false;","\t\t}","\t},","","\t_equals: function(item) {","\t\treturn this.getSource() === item.getSource();","\t},","","\tcopyContent: function(source) {","\t\tvar image = source._image,","\t\t\tcanvas = source._canvas;","\t\tif (image) {","\t\t\tthis._setImage(image);","\t\t} else if (canvas) {","\t\t\tvar copyCanvas = CanvasProvider.getCanvas(source._size);","\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);","\t\t\tthis._setImage(copyCanvas);","\t\t}","\t\tthis._crossOrigin = source._crossOrigin;","\t},","","\tgetSize: function() {","\t\tvar size = this._size;","\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,","\t\t\t\tthis, 'setSize');","\t},","","\tsetSize: function() {","\t\tvar size = Size.read(arguments);","\t\tif (!size.equals(this._size)) {","\t\t\tif (size.width > 0 && size.height > 0) {","\t\t\t\tvar element = this.getElement();","\t\t\t\tthis._setImage(CanvasProvider.getCanvas(size));","\t\t\t\tif (element)","\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,","\t\t\t\t\t\t\tsize.width, size.height);","\t\t\t} else {","\t\t\t\tif (this._canvas)","\t\t\t\t\tCanvasProvider.release(this._canvas);","\t\t\t\tthis._size = size.clone();","\t\t\t}","\t\t}","\t},","","\tgetWidth: function() {","\t\treturn this._size ? this._size.width : 0;","\t},","","\tsetWidth: function(width) {","\t\tthis.setSize(width, this.getHeight());","\t},","","\tgetHeight: function() {","\t\treturn this._size ? this._size.height : 0;","\t},","","\tsetHeight: function(height) {","\t\tthis.setSize(this.getWidth(), height);","\t},","","\tgetLoaded: function() {","\t\treturn this._loaded;","\t},","","\tisEmpty: function() {","\t\tvar size = this._size;","\t\treturn !size || size.width === 0 && size.height === 0;","\t},","","\tgetResolution: function() {","\t\tvar matrix = this._matrix,","\t\t\torig = new Point(0, 0).transform(matrix),","\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),","\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);","\t\treturn new Size(","\t\t\t72 / u.getLength(),","\t\t\t72 / v.getLength()","\t\t);","\t},","","\tgetPpi: '#getResolution',","","\tgetImage: function() {","\t\treturn this._image;","\t},","","\tsetImage: function(image) {","\t\tvar that = this;","","\t\tfunction emit(event) {","\t\t\tvar view = that.getView(),","\t\t\t\ttype = event && event.type || 'load';","\t\t\tif (view && that.responds(type)) {","\t\t\t\tpaper = view._scope;","\t\t\t\tthat.emit(type, new Event(event));","\t\t\t}","\t\t}","","\t\tthis._setImage(image);","\t\tif (this._loaded) {","\t\t\tsetTimeout(emit, 0);","\t\t} else if (image) {","\t\t\tDomEvent.add(image, {","\t\t\t\tload: function(event) {","\t\t\t\t\tthat._setImage(image);","\t\t\t\t\temit(event);","\t\t\t\t},","\t\t\t\terror: emit","\t\t\t});","\t\t}","\t},","","\t_setImage: function(image) {","\t\tif (this._canvas)","\t\t\tCanvasProvider.release(this._canvas);","\t\tif (image && image.getContext) {","\t\t\tthis._image = null;","\t\t\tthis._canvas = image;","\t\t\tthis._loaded = true;","\t\t} else {","\t\t\tthis._image = image;","\t\t\tthis._canvas = null;","\t\t\tthis._loaded = !!(image && image.src && image.complete);","\t\t}","\t\tthis._size = new Size(","\t\t\t\timage ? image.naturalWidth || image.width : 0,","\t\t\t\timage ? image.naturalHeight || image.height : 0);","\t\tthis._context = null;","\t\tthis._changed(521);","\t},","","\tgetCanvas: function() {","\t\tif (!this._canvas) {","\t\t\tvar ctx = CanvasProvider.getContext(this._size);","\t\t\ttry {","\t\t\t\tif (this._image)","\t\t\t\t\tctx.drawImage(this._image, 0, 0);","\t\t\t\tthis._canvas = ctx.canvas;","\t\t\t} catch (e) {","\t\t\t\tCanvasProvider.release(ctx);","\t\t\t}","\t\t}","\t\treturn this._canvas;","\t},","","\tsetCanvas: '#setImage',","","\tgetContext: function(modify) {","\t\tif (!this._context)","\t\t\tthis._context = this.getCanvas().getContext('2d');","\t\tif (modify) {","\t\t\tthis._image = null;","\t\t\tthis._changed(513);","\t\t}","\t\treturn this._context;","\t},","","\tsetContext: function(context) {","\t\tthis._context = context;","\t},","","\tgetSource: function() {","\t\tvar image = this._image;","\t\treturn image && image.src || this.toDataURL();","\t},","","\tsetSource: function(src) {","\t\tvar image = new self.Image(),","\t\t\tcrossOrigin = this._crossOrigin;","\t\tif (crossOrigin)","\t\t\timage.crossOrigin = crossOrigin;","\t\timage.src = src;","\t\tthis.setImage(image);","\t},","","\tgetCrossOrigin: function() {","\t\tvar image = this._image;","\t\treturn image && image.crossOrigin || this._crossOrigin || '';","\t},","","\tsetCrossOrigin: function(crossOrigin) {","\t\tthis._crossOrigin = crossOrigin;","\t\tvar image = this._image;","\t\tif (image)","\t\t\timage.crossOrigin = crossOrigin;","\t},","","\tgetElement: function() {","\t\treturn this._canvas || this._loaded && this._image;","\t}","}, {","\tbeans: false,","","\tgetSubCanvas: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tctx = CanvasProvider.getContext(rect.getSize());","\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,","\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);","\t\treturn ctx.canvas;","\t},","","\tgetSubRaster: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\traster = new Raster(Item.NO_INSERT);","\t\traster._setImage(this.getSubCanvas(rect));","\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));","\t\traster._matrix.prepend(this._matrix);","\t\traster.insertAbove(this);","\t\treturn raster;","\t},","","\ttoDataURL: function() {","\t\tvar image = this._image,","\t\t\tsrc = image && image.src;","\t\tif (/^data:/.test(src))","\t\t\treturn src;","\t\tvar canvas = this.getCanvas();","\t\treturn canvas ? canvas.toDataURL.apply(canvas, arguments) : null;","\t},","","\tdrawImage: function(image ) {","\t\tvar point = Point.read(arguments, 1);","\t\tthis.getContext(true).drawImage(image, point.x, point.y);","\t},","","\tgetAverageColor: function(object) {","\t\tvar bounds, path;","\t\tif (!object) {","\t\t\tbounds = this.getBounds();","\t\t} else if (object instanceof PathItem) {","\t\t\tpath = object;","\t\t\tbounds = object.getBounds();","\t\t} else if (typeof object === 'object') {","\t\t\tif ('width' in object) {","\t\t\t\tbounds = new Rectangle(object);","\t\t\t} else if ('x' in object) {","\t\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);","\t\t\t}","\t\t}","\t\tif (!bounds)","\t\t\treturn null;","\t\tvar sampleSize = 32,","\t\t\twidth = Math.min(bounds.width, sampleSize),","\t\t\theight = Math.min(bounds.height, sampleSize);","\t\tvar ctx = Raster._sampleContext;","\t\tif (!ctx) {","\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(","\t\t\t\t\tnew Size(sampleSize));","\t\t} else {","\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);","\t\t}","\t\tctx.save();","\t\tvar matrix = new Matrix()","\t\t\t\t.scale(width / bounds.width, height / bounds.height)","\t\t\t\t.translate(-bounds.x, -bounds.y);","\t\tmatrix.applyToContext(ctx);","\t\tif (path)","\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));","\t\tthis._matrix.applyToContext(ctx);","\t\tvar element = this.getElement(),","\t\t\tsize = this._size;","\t\tif (element)","\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);","\t\tctx.restore();","\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),","\t\t\t\tMath.ceil(height)).data,","\t\t\tchannels = [0, 0, 0],","\t\t\ttotal = 0;","\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {","\t\t\tvar alpha = pixels[i + 3];","\t\t\ttotal += alpha;","\t\t\talpha /= 255;","\t\t\tchannels[0] += pixels[i] * alpha;","\t\t\tchannels[1] += pixels[i + 1] * alpha;","\t\t\tchannels[2] += pixels[i + 2] * alpha;","\t\t}","\t\tfor (var i = 0; i < 3; i++)","\t\t\tchannels[i] /= total;","\t\treturn total ? Color.read(channels) : null;","\t},","","\tgetPixel: function() {","\t\tvar point = Point.read(arguments);","\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;","\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],","\t\t\t\tdata[3] / 255);","\t},","","\tsetPixel: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcolor = Color.read(arguments),","\t\t\tcomponents = color._convert('rgb'),","\t\t\talpha = color._alpha,","\t\t\tctx = this.getContext(true),","\t\t\timageData = ctx.createImageData(1, 1),","\t\t\tdata = imageData.data;","\t\tdata[0] = components[0] * 255;","\t\tdata[1] = components[1] * 255;","\t\tdata[2] = components[2] * 255;","\t\tdata[3] = alpha != null ? alpha * 255 : 255;","\t\tctx.putImageData(imageData, point.x, point.y);","\t},","","\tcreateImageData: function() {","\t\tvar size = Size.read(arguments);","\t\treturn this.getContext().createImageData(size.width, size.height);","\t},","","\tgetImageData: function() {","\t\tvar rect = Rectangle.read(arguments);","\t\tif (rect.isEmpty())","\t\t\trect = new Rectangle(this._size);","\t\treturn this.getContext().getImageData(rect.x, rect.y,","\t\t\t\trect.width, rect.height);","\t},","","\tsetImageData: function(data ) {","\t\tvar point = Point.read(arguments, 1);","\t\tthis.getContext(true).putImageData(data, point.x, point.y);","\t},","","\t_getBounds: function(matrix, options) {","\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);","\t\treturn matrix ? matrix._transformBounds(rect) : rect;","\t},","","\t_hitTestSelf: function(point) {","\t\tif (this._contains(point)) {","\t\t\tvar that = this;","\t\t\treturn new HitResult('pixel', that, {","\t\t\t\toffset: point.add(that._size.divide(2)).round(),","\t\t\t\tcolor: {","\t\t\t\t\tget: function() {","\t\t\t\t\t\treturn that.getPixel(this.offset);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t});","\t\t}","\t},","","\t_draw: function(ctx) {","\t\tvar element = this.getElement();","\t\tif (element) {","\t\t\tctx.globalAlpha = this._opacity;","\t\t\tctx.drawImage(element,","\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn true;","\t}","});","","var SymbolItem = Item.extend({","\t_class: 'SymbolItem',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_boundsOptions: { stroke: true },","\t_serializeFields: {","\t\tsymbol: null","\t},","","\tinitialize: function SymbolItem(arg0, arg1) {","\t\tif (!this._initialize(arg0,","\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))","\t\t\tthis.setDefinition(arg0 instanceof SymbolDefinition ?","\t\t\t\t\targ0 : new SymbolDefinition(arg0));","\t},","","\t_equals: function(item) {","\t\treturn this._definition === item._definition;","\t},","","\tcopyContent: function(source) {","\t\tthis.setDefinition(source._definition);","\t},","","\tgetDefinition: function() {","\t\treturn this._definition;","\t},","","\tsetDefinition: function(definition) {","\t\tthis._definition = definition;","\t\tthis._changed(9);","\t},","","\tgetSymbol: '#getDefinition',","\tsetSymbol: '#setDefinition',","","\tisEmpty: function() {","\t\treturn this._definition._item.isEmpty();","\t},","","\t_getBounds: function(matrix, options) {","\t\tvar item = this._definition._item;","\t\treturn item._getCachedBounds(item._matrix.prepended(matrix), options);","\t},","","\t_hitTestSelf: function(point, options, viewMatrix) {","\t\tvar res = this._definition._item._hitTest(point, options, viewMatrix);","\t\tif (res)","\t\t\tres.item = this;","\t\treturn res;","\t},","","\t_draw: function(ctx, param) {","\t\tthis._definition._item.draw(ctx, param);","\t}","","});","","var SymbolDefinition = Base.extend({","\t_class: 'SymbolDefinition',","","\tinitialize: function SymbolDefinition(item, dontCenter) {","\t\tthis._id = UID.get();","\t\tthis.project = paper.project;","\t\tif (item)","\t\t\tthis.setItem(item, dontCenter);","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn dictionary.add(this, function() {","\t\t\treturn Base.serialize([this._class, this._item],","\t\t\t\t\toptions, false, dictionary);","\t\t});","\t},","","\t_changed: function(flags) {","\t\tif (flags & 8)","\t\t\tItem._clearBoundsCache(this);","\t\tif (flags & 1)","\t\t\tthis.project._changed(flags);","\t},","","\tgetItem: function() {","\t\treturn this._item;","\t},","","\tsetItem: function(item, _dontCenter) {","\t\tif (item._symbol)","\t\t\titem = item.clone();","\t\tif (this._item)","\t\t\tthis._item._symbol = null;","\t\tthis._item = item;","\t\titem.remove();","\t\titem.setSelected(false);","\t\tif (!_dontCenter)","\t\t\titem.setPosition(new Point());","\t\titem._symbol = this;","\t\tthis._changed(9);","\t},","","\tgetDefinition: '#getItem',","\tsetDefinition: '#setItem',","","\tplace: function(position) {","\t\treturn new SymbolItem(this, position);","\t},","","\tclone: function() {","\t\treturn new SymbolDefinition(this._item.clone(false));","\t},","","\tequals: function(symbol) {","\t\treturn symbol === this","\t\t\t\t|| symbol && this._item.equals(symbol._item)","\t\t\t\t|| false;","\t}","});","","var HitResult = Base.extend({","\t_class: 'HitResult',","","\tinitialize: function HitResult(type, item, values) {","\t\tthis.type = type;","\t\tthis.item = item;","\t\tif (values)","\t\t\tthis.inject(values);","\t},","","\tstatics: {","\t\tgetOptions: function(args) {","\t\t\tvar options = args && Base.read(args);","\t\t\treturn Base.set({","\t\t\t\ttype: null,","\t\t\t\ttolerance: paper.settings.hitTolerance,","\t\t\t\tfill: !options,","\t\t\t\tstroke: !options,","\t\t\t\tsegments: !options,","\t\t\t\thandles: false,","\t\t\t\tends: false,","\t\t\t\tposition: false,","\t\t\t\tcenter: false,","\t\t\t\tbounds: false,","\t\t\t\tguides: false,","\t\t\t\tselected: false","\t\t\t}, options);","\t\t}","\t}","});","","var Segment = Base.extend({","\t_class: 'Segment',","\tbeans: true,","\t_selection: 0,","","\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {","\t\tvar count = arguments.length,","\t\t\tpoint, handleIn, handleOut, selection;","\t\tif (count > 0) {","\t\t\tif (arg0 == null || typeof arg0 === 'object') {","\t\t\t\tif (count === 1 && arg0 && 'point' in arg0) {","\t\t\t\t\tpoint = arg0.point;","\t\t\t\t\thandleIn = arg0.handleIn;","\t\t\t\t\thandleOut = arg0.handleOut;","\t\t\t\t\tselection = arg0.selection;","\t\t\t\t} else {","\t\t\t\t\tpoint = arg0;","\t\t\t\t\thandleIn = arg1;","\t\t\t\t\thandleOut = arg2;","\t\t\t\t\tselection = arg3;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tpoint = [ arg0, arg1 ];","\t\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;","\t\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;","\t\t\t}","\t\t}","\t\tnew SegmentPoint(point, this, '_point');","\t\tnew SegmentPoint(handleIn, this, '_handleIn');","\t\tnew SegmentPoint(handleOut, this, '_handleOut');","\t\tif (selection)","\t\t\tthis.setSelection(selection);","\t},","","\t_serialize: function(options, dictionary) {","\t\tvar point = this._point,","\t\t\tselection = this._selection,","\t\t\tobj = selection || this.hasHandles()","\t\t\t\t\t? [point, this._handleIn, this._handleOut]","\t\t\t\t\t: point;","\t\tif (selection)","\t\t\tobj.push(selection);","\t\treturn Base.serialize(obj, options, true, dictionary);","\t},","","\t_changed: function(point) {","\t\tvar path = this._path;","\t\tif (!path)","\t\t\treturn;","\t\tvar curves = path._curves,","\t\t\tindex = this._index,","\t\t\tcurve;","\t\tif (curves) {","\t\t\tif ((!point || point === this._point || point === this._handleIn)","\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed","\t\t\t\t\t\t? curves[curves.length - 1] : null))","\t\t\t\tcurve._changed();","\t\t\tif ((!point || point === this._point || point === this._handleOut)","\t\t\t\t\t&& (curve = curves[index]))","\t\t\t\tcurve._changed();","\t\t}","\t\tpath._changed(25);","\t},","","\tgetPoint: function() {","\t\treturn this._point;","\t},","","\tsetPoint: function() {","\t\tthis._point.set(Point.read(arguments));","\t},","","\tgetHandleIn: function() {","\t\treturn this._handleIn;","\t},","","\tsetHandleIn: function() {","\t\tthis._handleIn.set(Point.read(arguments));","\t},","","\tgetHandleOut: function() {","\t\treturn this._handleOut;","\t},","","\tsetHandleOut: function() {","\t\tthis._handleOut.set(Point.read(arguments));","\t},","","\thasHandles: function() {","\t\treturn !this._handleIn.isZero() || !this._handleOut.isZero();","\t},","","\tisSmooth: function() {","\t\tvar handleIn = this._handleIn,","\t\t\thandleOut = this._handleOut;","\t\treturn !handleIn.isZero() && !handleOut.isZero()","\t\t\t\t&& handleIn.isCollinear(handleOut);","\t},","","\tclearHandles: function() {","\t\tthis._handleIn._set(0, 0);","\t\tthis._handleOut._set(0, 0);","\t},","","\tgetSelection: function() {","\t\treturn this._selection;","\t},","","\tsetSelection: function(selection) {","\t\tvar oldSelection = this._selection,","\t\t\tpath = this._path;","\t\tthis._selection = selection = selection || 0;","\t\tif (path && selection !== oldSelection) {","\t\t\tpath._updateSelection(this, oldSelection, selection);","\t\t\tpath._changed(129);","\t\t}","\t},","","\t_changeSelection: function(flag, selected) {","\t\tvar selection = this._selection;","\t\tthis.setSelection(selected ? selection | flag : selection & ~flag);","\t},","","\tisSelected: function() {","\t\treturn !!(this._selection & 7);","\t},","","\tsetSelected: function(selected) {","\t\tthis._changeSelection(7, selected);","\t},","","\tgetIndex: function() {","\t\treturn this._index !== undefined ? this._index : null;","\t},","","\tgetPath: function() {","\t\treturn this._path || null;","\t},","","\tgetCurve: function() {","\t\tvar path = this._path,","\t\t\tindex = this._index;","\t\tif (path) {","\t\t\tif (index > 0 && !path._closed","\t\t\t\t\t&& index === path._segments.length - 1)","\t\t\t\tindex--;","\t\t\treturn path.getCurves()[index] || null;","\t\t}","\t\treturn null;","\t},","","\tgetLocation: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve","\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)","\t\t\t\t: null;","\t},","","\tgetNext: function() {","\t\tvar segments = this._path && this._path._segments;","\t\treturn segments && (segments[this._index + 1]","\t\t\t\t|| this._path._closed && segments[0]) || null;","\t},","","\tsmooth: function(options, _first, _last) {","\t\tvar opts = options || {},","\t\t\ttype = opts.type,","\t\t\tfactor = opts.factor,","\t\t\tprev = this.getPrevious(),","\t\t\tnext = this.getNext(),","\t\t\tp0 = (prev || this)._point,","\t\t\tp1 = this._point,","\t\t\tp2 = (next || this)._point,","\t\t\td1 = p0.getDistance(p1),","\t\t\td2 = p1.getDistance(p2);","\t\tif (!type || type === 'catmull-rom') {","\t\t\tvar a = factor === undefined ? 0.5 : factor,","\t\t\t\td1_a = Math.pow(d1, a),","\t\t\t\td1_2a = d1_a * d1_a,","\t\t\t\td2_a = Math.pow(d2, a),","\t\t\t\td2_2a = d2_a * d2_a;","\t\t\tif (!_first && prev) {","\t\t\t\tvar A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a,","\t\t\t\t\tN = 3 * d2_a * (d2_a + d1_a);","\t\t\t\tthis.setHandleIn(N !== 0","\t\t\t\t\t? new Point(","\t\t\t\t\t\t(d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x,","\t\t\t\t\t\t(d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y)","\t\t\t\t\t: new Point());","\t\t\t}","\t\t\tif (!_last && next) {","\t\t\t\tvar A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a,","\t\t\t\t\tN = 3 * d1_a * (d1_a + d2_a);","\t\t\t\tthis.setHandleOut(N !== 0","\t\t\t\t\t? new Point(","\t\t\t\t\t\t(d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x,","\t\t\t\t\t\t(d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y)","\t\t\t\t\t: new Point());","\t\t\t}","\t\t} else if (type === 'geometric') {","\t\t\tif (prev && next) {","\t\t\t\tvar vector = p0.subtract(p2),","\t\t\t\t\tt = factor === undefined ? 0.4 : factor,","\t\t\t\t\tk = t * d1 / (d1 + d2);","\t\t\t\tif (!_first)","\t\t\t\t\tthis.setHandleIn(vector.multiply(k));","\t\t\t\tif (!_last)","\t\t\t\t\tthis.setHandleOut(vector.multiply(k - t));","\t\t\t}","\t\t} else {","\t\t\tthrow new Error('Smoothing method \\'' + type + '\\' not supported.');","\t\t}","\t},","","\tgetPrevious: function() {","\t\tvar segments = this._path && this._path._segments;","\t\treturn segments && (segments[this._index - 1]","\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;","\t},","","\tisFirst: function() {","\t\treturn !this._index;","\t},","","\tisLast: function() {","\t\tvar path = this._path;","\t\treturn path && this._index === path._segments.length - 1 || false;","\t},","","\treverse: function() {","\t\tvar handleIn = this._handleIn,","\t\t\thandleOut = this._handleOut,","\t\t\ttmp = handleIn.clone();","\t\thandleIn.set(handleOut);","\t\thandleOut.set(tmp);","\t},","","\treversed: function() {","\t\treturn new Segment(this._point, this._handleOut, this._handleIn);","\t},","","\tremove: function() {","\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;","\t},","","\tclone: function() {","\t\treturn new Segment(this._point, this._handleIn, this._handleOut);","\t},","","\tequals: function(segment) {","\t\treturn segment === this || segment && this._class === segment._class","\t\t\t\t&& this._point.equals(segment._point)","\t\t\t\t&& this._handleIn.equals(segment._handleIn)","\t\t\t\t&& this._handleOut.equals(segment._handleOut)","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar parts = [ 'point: ' + this._point ];","\t\tif (!this._handleIn.isZero())","\t\t\tparts.push('handleIn: ' + this._handleIn);","\t\tif (!this._handleOut.isZero())","\t\t\tparts.push('handleOut: ' + this._handleOut);","\t\treturn '{ ' + parts.join(', ') + ' }';","\t},","","\ttransform: function(matrix) {","\t\tthis._transformCoordinates(matrix, new Array(6), true);","\t\tthis._changed();","\t},","","\tinterpolate: function(from, to, factor) {","\t\tvar u = 1 - factor,","\t\t\tv = factor,","\t\t\tpoint1 = from._point,","\t\t\tpoint2 = to._point,","\t\t\thandleIn1 = from._handleIn,","\t\t\thandleIn2 = to._handleIn,","\t\t\thandleOut2 = to._handleOut,","\t\t\thandleOut1 = from._handleOut;","\t\tthis._point._set(","\t\t\t\tu * point1._x + v * point2._x,","\t\t\t\tu * point1._y + v * point2._y, true);","\t\tthis._handleIn._set(","\t\t\t\tu * handleIn1._x + v * handleIn2._x,","\t\t\t\tu * handleIn1._y + v * handleIn2._y, true);","\t\tthis._handleOut._set(","\t\t\t\tu * handleOut1._x + v * handleOut2._x,","\t\t\t\tu * handleOut1._y + v * handleOut2._y, true);","\t\tthis._changed();","\t},","","\t_transformCoordinates: function(matrix, coords, change) {","\t\tvar point = this._point,","\t\t\thandleIn = !change || !this._handleIn.isZero()","\t\t\t\t\t? this._handleIn : null,","\t\t\thandleOut = !change || !this._handleOut.isZero()","\t\t\t\t\t? this._handleOut : null,","\t\t\tx = point._x,","\t\t\ty = point._y,","\t\t\ti = 2;","\t\tcoords[0] = x;","\t\tcoords[1] = y;","\t\tif (handleIn) {","\t\t\tcoords[i++] = handleIn._x + x;","\t\t\tcoords[i++] = handleIn._y + y;","\t\t}","\t\tif (handleOut) {","\t\t\tcoords[i++] = handleOut._x + x;","\t\t\tcoords[i++] = handleOut._y + y;","\t\t}","\t\tif (matrix) {","\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);","\t\t\tx = coords[0];","\t\t\ty = coords[1];","\t\t\tif (change) {","\t\t\t\tpoint._x = x;","\t\t\t\tpoint._y = y;","\t\t\t\ti = 2;","\t\t\t\tif (handleIn) {","\t\t\t\t\thandleIn._x = coords[i++] - x;","\t\t\t\t\thandleIn._y = coords[i++] - y;","\t\t\t\t}","\t\t\t\tif (handleOut) {","\t\t\t\t\thandleOut._x = coords[i++] - x;","\t\t\t\t\thandleOut._y = coords[i++] - y;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tif (!handleIn) {","\t\t\t\t\tcoords[i++] = x;","\t\t\t\t\tcoords[i++] = y;","\t\t\t\t}","\t\t\t\tif (!handleOut) {","\t\t\t\t\tcoords[i++] = x;","\t\t\t\t\tcoords[i++] = y;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn coords;","\t}","});","","var SegmentPoint = Point.extend({","\tinitialize: function SegmentPoint(point, owner, key) {","\t\tvar x, y,","\t\t\tselected;","\t\tif (!point) {","\t\t\tx = y = 0;","\t\t} else if ((x = point[0]) !== undefined) {","\t\t\ty = point[1];","\t\t} else {","\t\t\tvar pt = point;","\t\t\tif ((x = pt.x) === undefined) {","\t\t\t\tpt = Point.read(arguments);","\t\t\t\tx = pt.x;","\t\t\t}","\t\t\ty = pt.y;","\t\t\tselected = pt.selected;","\t\t}","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner = owner;","\t\towner[key] = this;","\t\tif (selected)","\t\t\tthis.setSelected(true);","\t},","","\t_set: function(x, y) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner._changed(this);","\t\treturn this;","\t},","","\tgetX: function() {","\t\treturn this._x;","\t},","","\tsetX: function(x) {","\t\tthis._x = x;","\t\tthis._owner._changed(this);","\t},","","\tgetY: function() {","\t\treturn this._y;","\t},","","\tsetY: function(y) {","\t\tthis._y = y;","\t\tthis._owner._changed(this);","\t},","","\tisZero: function() {","\t\tvar isZero = Numerical.isZero;","\t\treturn isZero(this._x) && isZero(this._y);","\t},","","\tisSelected: function() {","\t\treturn !!(this._owner._selection & this._getSelection());","\t},","","\tsetSelected: function(selected) {","\t\tthis._owner._changeSelection(this._getSelection(), selected);","\t},","","\t_getSelection: function() {","\t\tvar owner = this._owner;","\t\treturn this === owner._point ? 1","\t\t\t: this === owner._handleIn ? 2","\t\t\t: this === owner._handleOut ? 4","\t\t\t: 0;","\t}","});","","var Curve = Base.extend({","\t_class: 'Curve',","\tbeans: true,","","\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {","\t\tvar count = arguments.length,","\t\t\tseg1, seg2,","\t\t\tpoint1, point2,","\t\t\thandle1, handle2;","\t\tif (count === 3) {","\t\t\tthis._path = arg0;","\t\t\tseg1 = arg1;","\t\t\tseg2 = arg2;","\t\t} else if (!count) {","\t\t\tseg1 = new Segment();","\t\t\tseg2 = new Segment();","\t\t} else if (count === 1) {","\t\t\tif ('segment1' in arg0) {","\t\t\t\tseg1 = new Segment(arg0.segment1);","\t\t\t\tseg2 = new Segment(arg0.segment2);","\t\t\t} else if ('point1' in arg0) {","\t\t\t\tpoint1 = arg0.point1;","\t\t\t\thandle1 = arg0.handle1;","\t\t\t\thandle2 = arg0.handle2;","\t\t\t\tpoint2 = arg0.point2;","\t\t\t} else if (Array.isArray(arg0)) {","\t\t\t\tpoint1 = [arg0[0], arg0[1]];","\t\t\t\tpoint2 = [arg0[6], arg0[7]];","\t\t\t\thandle1 = [arg0[2] - arg0[0], arg0[3] - arg0[1]];","\t\t\t\thandle2 = [arg0[4] - arg0[6], arg0[5] - arg0[7]];","\t\t\t}","\t\t} else if (count === 2) {","\t\t\tseg1 = new Segment(arg0);","\t\t\tseg2 = new Segment(arg1);","\t\t} else if (count === 4) {","\t\t\tpoint1 = arg0;","\t\t\thandle1 = arg1;","\t\t\thandle2 = arg2;","\t\t\tpoint2 = arg3;","\t\t} else if (count === 8) {","\t\t\tpoint1 = [arg0, arg1];","\t\t\tpoint2 = [arg6, arg7];","\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];","\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];","\t\t}","\t\tthis._segment1 = seg1 || new Segment(point1, null, handle1);","\t\tthis._segment2 = seg2 || new Segment(point2, handle2, null);","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn Base.serialize(this.hasHandles()","\t\t\t\t? [this.getPoint1(), this.getHandle1(), this.getHandle2(),","\t\t\t\t\tthis.getPoint2()]","\t\t\t\t: [this.getPoint1(), this.getPoint2()],","\t\t\t\toptions, true, dictionary);","\t},","","\t_changed: function() {","\t\tthis._length = this._bounds = undefined;","\t},","","\tclone: function() {","\t\treturn new Curve(this._segment1, this._segment2);","\t},","","\ttoString: function() {","\t\tvar parts = [ 'point1: ' + this._segment1._point ];","\t\tif (!this._segment1._handleOut.isZero())","\t\t\tparts.push('handle1: ' + this._segment1._handleOut);","\t\tif (!this._segment2._handleIn.isZero())","\t\t\tparts.push('handle2: ' + this._segment2._handleIn);","\t\tparts.push('point2: ' + this._segment2._point);","\t\treturn '{ ' + parts.join(', ') + ' }';","\t},","","\tclassify: function() {","\t\treturn Curve.classify(this.getValues());","\t},","","\tremove: function() {","\t\tvar removed = false;","\t\tif (this._path) {","\t\t\tvar segment2 = this._segment2,","\t\t\t\thandleOut = segment2._handleOut;","\t\t\tremoved = segment2.remove();","\t\t\tif (removed)","\t\t\t\tthis._segment1._handleOut.set(handleOut);","\t\t}","\t\treturn removed;","\t},","","\tgetPoint1: function() {","\t\treturn this._segment1._point;","\t},","","\tsetPoint1: function() {","\t\tthis._segment1._point.set(Point.read(arguments));","\t},","","\tgetPoint2: function() {","\t\treturn this._segment2._point;","\t},","","\tsetPoint2: function() {","\t\tthis._segment2._point.set(Point.read(arguments));","\t},","","\tgetHandle1: function() {","\t\treturn this._segment1._handleOut;","\t},","","\tsetHandle1: function() {","\t\tthis._segment1._handleOut.set(Point.read(arguments));","\t},","","\tgetHandle2: function() {","\t\treturn this._segment2._handleIn;","\t},","","\tsetHandle2: function() {","\t\tthis._segment2._handleIn.set(Point.read(arguments));","\t},","","\tgetSegment1: function() {","\t\treturn this._segment1;","\t},","","\tgetSegment2: function() {","\t\treturn this._segment2;","\t},","","\tgetPath: function() {","\t\treturn this._path;","\t},","","\tgetIndex: function() {","\t\treturn this._segment1._index;","\t},","","\tgetNext: function() {","\t\tvar curves = this._path && this._path._curves;","\t\treturn curves && (curves[this._segment1._index + 1]","\t\t\t\t|| this._path._closed && curves[0]) || null;","\t},","","\tgetPrevious: function() {","\t\tvar curves = this._path && this._path._curves;","\t\treturn curves && (curves[this._segment1._index - 1]","\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;","\t},","","\tisFirst: function() {","\t\treturn !this._segment1._index;","\t},","","\tisLast: function() {","\t\tvar path = this._path;","\t\treturn path && this._segment1._index === path._curves.length - 1","\t\t\t\t|| false;","\t},","","\tisSelected: function() {","\t\treturn this.getPoint1().isSelected()","\t\t\t\t&& this.getHandle2().isSelected()","\t\t\t\t&& this.getHandle2().isSelected()","\t\t\t\t&& this.getPoint2().isSelected();","\t},","","\tsetSelected: function(selected) {","\t\tthis.getPoint1().setSelected(selected);","\t\tthis.getHandle1().setSelected(selected);","\t\tthis.getHandle2().setSelected(selected);","\t\tthis.getPoint2().setSelected(selected);","\t},","","\tgetValues: function(matrix) {","\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);","\t},","","\tgetPoints: function() {","\t\tvar coords = this.getValues(),","\t\t\tpoints = [];","\t\tfor (var i = 0; i < 8; i += 2)","\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));","\t\treturn points;","\t}","}, {","\tgetLength: function() {","\t\tif (this._length == null)","\t\t\tthis._length = Curve.getLength(this.getValues(), 0, 1);","\t\treturn this._length;","\t},","","\tgetArea: function() {","\t\treturn Curve.getArea(this.getValues());","\t},","","\tgetLine: function() {","\t\treturn new Line(this._segment1._point, this._segment2._point);","\t},","","\tgetPart: function(from, to) {","\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));","\t},","","\tgetPartLength: function(from, to) {","\t\treturn Curve.getLength(this.getValues(), from, to);","\t},","","\tdivideAt: function(location) {","\t\treturn this.divideAtTime(location && location.curve === this","\t\t\t\t? location.time : this.getTimeAt(location));","\t},","","\tdivideAtTime: function(time, _setHandles) {","\t\tvar tMin = 1e-8,","\t\t\ttMax = 1 - tMin,","\t\t\tres = null;","\t\tif (time >= tMin && time <= tMax) {","\t\t\tvar parts = Curve.subdivide(this.getValues(), time),","\t\t\t\tleft = parts[0],","\t\t\t\tright = parts[1],","\t\t\t\tsetHandles = _setHandles || this.hasHandles(),","\t\t\t\tseg1 = this._segment1,","\t\t\t\tseg2 = this._segment2,","\t\t\t\tpath = this._path;","\t\t\tif (setHandles) {","\t\t\t\tseg1._handleOut._set(left[2] - left[0], left[3] - left[1]);","\t\t\t\tseg2._handleIn._set(right[4] - right[6],right[5] - right[7]);","\t\t\t}","\t\t\tvar x = left[6], y = left[7],","\t\t\t\tsegment = new Segment(new Point(x, y),","\t\t\t\t\t\tsetHandles && new Point(left[4] - x, left[5] - y),","\t\t\t\t\t\tsetHandles && new Point(right[2] - x, right[3] - y));","\t\t\tif (path) {","\t\t\t\tpath.insert(seg1._index + 1, segment);","\t\t\t\tres = this.getNext();","\t\t\t} else {","\t\t\t\tthis._segment2 = segment;","\t\t\t\tthis._changed();","\t\t\t\tres = new Curve(segment, seg2);","\t\t\t}","\t\t}","\t\treturn res;","\t},","","\tsplitAt: function(location) {","\t\tvar path = this._path;","\t\treturn path ? path.splitAt(location) : null;","\t},","","\tsplitAtTime: function(time) {","\t\treturn this.splitAt(this.getLocationAtTime(time));","\t},","","\tdivide: function(offset, isTime) {","\t\treturn this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset","\t\t\t\t: this.getTimeAt(offset));","\t},","","\tsplit: function(offset, isTime) {","\t\treturn this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset","\t\t\t\t: this.getTimeAt(offset));","\t},","","\treversed: function() {","\t\treturn new Curve(this._segment2.reversed(), this._segment1.reversed());","\t},","","\tclearHandles: function() {","\t\tthis._segment1._handleOut._set(0, 0);","\t\tthis._segment2._handleIn._set(0, 0);","\t},","","statics: {","\tgetValues: function(segment1, segment2, matrix, straight) {","\t\tvar p1 = segment1._point,","\t\t\th1 = segment1._handleOut,","\t\t\th2 = segment2._handleIn,","\t\t\tp2 = segment2._point,","\t\t\tx1 = p1.x, y1 = p1.y,","\t\t\tx2 = p2.x, y2 = p2.y,","\t\t\tvalues = straight","\t\t\t\t? [ x1, y1, x1, y1, x2, y2, x2, y2 ]","\t\t\t\t: [","\t\t\t\t\tx1, y1,","\t\t\t\t\tx1 + h1._x, y1 + h1._y,","\t\t\t\t\tx2 + h2._x, y2 + h2._y,","\t\t\t\t\tx2, y2","\t\t\t\t];","\t\tif (matrix)","\t\t\tmatrix._transformCoordinates(values, values, 4);","\t\treturn values;","\t},","","\tsubdivide: function(v, t) {","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx1 = v[2], y1 = v[3],","\t\t\tx2 = v[4], y2 = v[5],","\t\t\tx3 = v[6], y3 = v[7];","\t\tif (t === undefined)","\t\t\tt = 0.5;","\t\tvar u = 1 - t,","\t\t\tx4 = u * x0 + t * x1, y4 = u * y0 + t * y1,","\t\t\tx5 = u * x1 + t * x2, y5 = u * y1 + t * y2,","\t\t\tx6 = u * x2 + t * x3, y6 = u * y2 + t * y3,","\t\t\tx7 = u * x4 + t * x5, y7 = u * y4 + t * y5,","\t\t\tx8 = u * x5 + t * x6, y8 = u * y5 + t * y6,","\t\t\tx9 = u * x7 + t * x8, y9 = u * y7 + t * y8;","\t\treturn [","\t\t\t[x0, y0, x4, y4, x7, y7, x9, y9],","\t\t\t[x9, y9, x8, y8, x6, y6, x3, y3]","\t\t];","\t},","","\tgetMonoCurves: function(v, dir) {","\t\tvar curves = [],","\t\t\tio = dir ? 0 : 1,","\t\t\to0 = v[io + 0],","\t\t\to1 = v[io + 2],","\t\t\to2 = v[io + 4],","\t\t\to3 = v[io + 6];","\t\tif ((o0 >= o1) === (o1 >= o2) && (o1 >= o2) === (o2 >= o3)","\t\t\t\t|| Curve.isStraight(v)) {","\t\t\tcurves.push(v);","\t\t} else {","\t\t\tvar a = 3 * (o1 - o2) - o0 + o3,","\t\t\t\tb = 2 * (o0 + o2) - 4 * o1,","\t\t\t\tc = o1 - o0,","\t\t\t\ttMin = 1e-8,","\t\t\t\ttMax = 1 - tMin,","\t\t\t\troots = [],","\t\t\t\tn = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);","\t\t\tif (!n) {","\t\t\t\tcurves.push(v);","\t\t\t} else {","\t\t\t\troots.sort();","\t\t\t\tvar t = roots[0],","\t\t\t\t\tparts = Curve.subdivide(v, t);","\t\t\t\tcurves.push(parts[0]);","\t\t\t\tif (n > 1) {","\t\t\t\t\tt = (roots[1] - t) / (1 - t);","\t\t\t\t\tparts = Curve.subdivide(parts[1], t);","\t\t\t\t\tcurves.push(parts[0]);","\t\t\t\t}","\t\t\t\tcurves.push(parts[1]);","\t\t\t}","\t\t}","\t\treturn curves;","\t},","","\tsolveCubic: function (v, coord, val, roots, min, max) {","\t\tvar v0 = v[coord],","\t\t\tv1 = v[coord + 2],","\t\t\tv2 = v[coord + 4],","\t\t\tv3 = v[coord + 6],","\t\t\tres = 0;","\t\tif (  !(v0 < val && v3 < val && v1 < val && v2 < val ||","\t\t\t\tv0 > val && v3 > val && v1 > val && v2 > val)) {","\t\t\tvar c = 3 * (v1 - v0),","\t\t\t\tb = 3 * (v2 - v1) - c,","\t\t\t\ta = v3 - v0 - c - b;","\t\t\tres = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);","\t\t}","\t\treturn res;","\t},","","\tgetTimeOf: function(v, point) {","\t\tvar p0 = new Point(v[0], v[1]),","\t\t\tp3 = new Point(v[6], v[7]),","\t\t\tepsilon = 1e-12,","\t\t\tgeomEpsilon = 1e-7,","\t\t\tt = point.isClose(p0, epsilon) ? 0","\t\t\t  : point.isClose(p3, epsilon) ? 1","\t\t\t  : null;","\t\tif (t === null) {","\t\t\tvar coords = [point.x, point.y],","\t\t\t\troots = [];","\t\t\tfor (var c = 0; c < 2; c++) {","\t\t\t\tvar count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);","\t\t\t\tfor (var i = 0; i < count; i++) {","\t\t\t\t\tvar u = roots[i];","\t\t\t\t\tif (point.isClose(Curve.getPoint(v, u), geomEpsilon))","\t\t\t\t\t\treturn u;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn point.isClose(p0, geomEpsilon) ? 0","\t\t\t : point.isClose(p3, geomEpsilon) ? 1","\t\t\t : null;","\t},","","\tgetNearestTime: function(v, point) {","\t\tif (Curve.isStraight(v)) {","\t\t\tvar x0 = v[0], y0 = v[1],","\t\t\t\tx3 = v[6], y3 = v[7],","\t\t\t\tvx = x3 - x0, vy = y3 - y0,","\t\t\t\tdet = vx * vx + vy * vy;","\t\t\tif (det === 0)","\t\t\t\treturn 0;","\t\t\tvar u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;","\t\t\treturn u < 1e-12 ? 0","\t\t\t\t : u > 0.999999999999 ? 1","\t\t\t\t : Curve.getTimeOf(v,","\t\t\t\t\tnew Point(x0 + u * vx, y0 + u * vy));","\t\t}","","\t\tvar count = 100,","\t\t\tminDist = Infinity,","\t\t\tminT = 0;","","\t\tfunction refine(t) {","\t\t\tif (t >= 0 && t <= 1) {","\t\t\t\tvar dist = point.getDistance(Curve.getPoint(v, t), true);","\t\t\t\tif (dist < minDist) {","\t\t\t\t\tminDist = dist;","\t\t\t\t\tminT = t;","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfor (var i = 0; i <= count; i++)","\t\t\trefine(i / count);","","\t\tvar step = 1 / (count * 2);","\t\twhile (step > 1e-8) {","\t\t\tif (!refine(minT - step) && !refine(minT + step))","\t\t\t\tstep /= 2;","\t\t}","\t\treturn minT;","\t},","","\tgetPart: function(v, from, to) {","\t\tvar flip = from > to;","\t\tif (flip) {","\t\t\tvar tmp = from;","\t\t\tfrom = to;","\t\t\tto = tmp;","\t\t}","\t\tif (from > 0)","\t\t\tv = Curve.subdivide(v, from)[1];","\t\tif (to < 1)","\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];","\t\treturn flip","\t\t\t\t? [v[6], v[7], v[4], v[5], v[2], v[3], v[0], v[1]]","\t\t\t\t: v;","\t},","","\tisFlatEnough: function(v, flatness) {","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx1 = v[2], y1 = v[3],","\t\t\tx2 = v[4], y2 = v[5],","\t\t\tx3 = v[6], y3 = v[7],","\t\t\tux = 3 * x1 - 2 * x0 - x3,","\t\t\tuy = 3 * y1 - 2 * y0 - y3,","\t\t\tvx = 3 * x2 - 2 * x3 - x0,","\t\t\tvy = 3 * y2 - 2 * y3 - y0;","\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)","\t\t\t\t<= 16 * flatness * flatness;","\t},","","\tgetArea: function(v) {","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx1 = v[2], y1 = v[3],","\t\t\tx2 = v[4], y2 = v[5],","\t\t\tx3 = v[6], y3 = v[7];","\t\treturn 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2)","\t\t\t\t+ y1 * (x0 - x2) - x1 * (y0 - y2)","\t\t\t\t+ y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;","\t},","","\tgetBounds: function(v) {","\t\tvar min = v.slice(0, 2),","\t\t\tmax = min.slice(),","\t\t\troots = [0, 0];","\t\tfor (var i = 0; i < 2; i++)","\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],","\t\t\t\t\ti, 0, min, max, roots);","\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);","\t},","","\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {","\t\tfunction add(value, padding) {","\t\t\tvar left = value - padding,","\t\t\t\tright = value + padding;","\t\t\tif (left < min[coord])","\t\t\t\tmin[coord] = left;","\t\t\tif (right > max[coord])","\t\t\t\tmax[coord] = right;","\t\t}","","\t\tpadding /= 2;","\t\tvar minPad = min[coord] - padding,","\t\t\tmaxPad = max[coord] + padding;","\t\tif (    v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad ||","\t\t\t\tv0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {","\t\t\tif (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {","\t\t\t\tadd(v0, padding);","\t\t\t\tadd(v3, padding);","\t\t\t} else {","\t\t\t\tvar a = 3 * (v1 - v2) - v0 + v3,","\t\t\t\t\tb = 2 * (v0 + v2) - 4 * v1,","\t\t\t\t\tc = v1 - v0,","\t\t\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),","\t\t\t\t\ttMin = 1e-8,","\t\t\t\t\ttMax = 1 - tMin;","\t\t\t\tadd(v3, 0);","\t\t\t\tfor (var i = 0; i < count; i++) {","\t\t\t\t\tvar t = roots[i],","\t\t\t\t\t\tu = 1 - t;","\t\t\t\t\tif (tMin <= t && t <= tMax)","\t\t\t\t\t\tadd(u * u * u * v0","\t\t\t\t\t\t\t+ 3 * u * u * t * v1","\t\t\t\t\t\t\t+ 3 * u * t * t * v2","\t\t\t\t\t\t\t+ t * t * t * v3,","\t\t\t\t\t\t\tpadding);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","}}, Base.each(","\t['getBounds', 'getStrokeBounds', 'getHandleBounds'],","\tfunction(name) {","\t\tthis[name] = function() {","\t\t\tif (!this._bounds)","\t\t\t\tthis._bounds = {};","\t\t\tvar bounds = this._bounds[name];","\t\t\tif (!bounds) {","\t\t\t\tbounds = this._bounds[name] = Path[name](","\t\t\t\t\t\t[this._segment1, this._segment2], false, this._path);","\t\t\t}","\t\t\treturn bounds.clone();","\t\t};","\t},","{","","}), Base.each({","\tisStraight: function(p1, h1, h2, p2) {","\t\tif (h1.isZero() && h2.isZero()) {","\t\t\treturn true;","\t\t} else {","\t\t\tvar v = p2.subtract(p1);","\t\t\tif (v.isZero()) {","\t\t\t\treturn false;","\t\t\t} else if (v.isCollinear(h1) && v.isCollinear(h2)) {","\t\t\t\tvar l = new Line(p1, p2),","\t\t\t\t\tepsilon = 1e-7;","\t\t\t\tif (l.getDistance(p1.add(h1)) < epsilon &&","\t\t\t\t\tl.getDistance(p2.add(h2)) < epsilon) {","\t\t\t\t\tvar div = v.dot(v),","\t\t\t\t\t\ts1 = v.dot(h1) / div,","\t\t\t\t\t\ts2 = v.dot(h2) / div;","\t\t\t\t\treturn s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn false;","\t},","","\tisLinear: function(p1, h1, h2, p2) {","\t\tvar third = p2.subtract(p1).divide(3);","\t\treturn h1.equals(third) && h2.negate().equals(third);","\t}","}, function(test, name) {","\tthis[name] = function(epsilon) {","\t\tvar seg1 = this._segment1,","\t\t\tseg2 = this._segment2;","\t\treturn test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point,","\t\t\t\tepsilon);","\t};","","\tthis.statics[name] = function(v, epsilon) {","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx3 = v[6], y3 = v[7];","\t\treturn test(","\t\t\t\tnew Point(x0, y0),","\t\t\t\tnew Point(v[2] - x0, v[3] - y0),","\t\t\t\tnew Point(v[4] - x3, v[5] - y3),","\t\t\t\tnew Point(x3, y3), epsilon);","\t};","}, {","\tstatics: {},","","\thasHandles: function() {","\t\treturn !this._segment1._handleOut.isZero()","\t\t\t\t|| !this._segment2._handleIn.isZero();","\t},","","\thasLength: function(epsilon) {","\t\treturn (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles())","\t\t\t\t&& this.getLength() > (epsilon || 0);","\t},","","\tisCollinear: function(curve) {","\t\treturn curve && this.isStraight() && curve.isStraight()","\t\t\t\t&& this.getLine().isCollinear(curve.getLine());","\t},","","\tisHorizontal: function() {","\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y)","\t\t\t\t< 1e-8;","\t},","","\tisVertical: function() {","\t\treturn this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x)","\t\t\t\t< 1e-8;","\t}","}), {","\tbeans: false,","","\tgetLocationAt: function(offset, _isTime) {","\t\treturn this.getLocationAtTime(","\t\t\t\t_isTime ? offset : this.getTimeAt(offset));","\t},","","\tgetLocationAtTime: function(t) {","\t\treturn t != null && t >= 0 && t <= 1","\t\t\t\t? new CurveLocation(this, t)","\t\t\t\t: null;","\t},","","\tgetTimeAt: function(offset, start) {","\t\treturn Curve.getTimeAt(this.getValues(), offset, start);","\t},","","\tgetParameterAt: '#getTimeAt',","","\tgetOffsetAtTime: function(t) {","\t\treturn this.getPartLength(0, t);","\t},","","\tgetLocationOf: function() {","\t\treturn this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));","\t},","","\tgetOffsetOf: function() {","\t\tvar loc = this.getLocationOf.apply(this, arguments);","\t\treturn loc ? loc.getOffset() : null;","\t},","","\tgetTimeOf: function() {","\t\treturn Curve.getTimeOf(this.getValues(), Point.read(arguments));","\t},","","\tgetParameterOf: '#getTimeOf',","","\tgetNearestLocation: function() {","\t\tvar point = Point.read(arguments),","\t\t\tvalues = this.getValues(),","\t\t\tt = Curve.getNearestTime(values, point),","\t\t\tpt = Curve.getPoint(values, t);","\t\treturn new CurveLocation(this, t, pt, null, point.getDistance(pt));","\t},","","\tgetNearestPoint: function() {","\t\tvar loc = this.getNearestLocation.apply(this, arguments);","\t\treturn loc ? loc.getPoint() : loc;","\t}","","},","new function() {","\tvar methods = ['getPoint', 'getTangent', 'getNormal', 'getWeightedTangent',","\t\t'getWeightedNormal', 'getCurvature'];","\treturn Base.each(methods,","\t\tfunction(name) {","\t\t\tthis[name + 'At'] = function(location, _isTime) {","\t\t\t\tvar values = this.getValues();","\t\t\t\treturn Curve[name](values, _isTime ? location","\t\t\t\t\t\t: Curve.getTimeAt(values, location));","\t\t\t};","","\t\t\tthis[name + 'AtTime'] = function(time) {","\t\t\t\treturn Curve[name](this.getValues(), time);","\t\t\t};","\t\t}, {","\t\t\tstatics: {","\t\t\t\t_evaluateMethods: methods","\t\t\t}","\t\t}","\t);","},","new function() {","","\tfunction getLengthIntegrand(v) {","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx1 = v[2], y1 = v[3],","\t\t\tx2 = v[4], y2 = v[5],","\t\t\tx3 = v[6], y3 = v[7],","","\t\t\tax = 9 * (x1 - x2) + 3 * (x3 - x0),","\t\t\tbx = 6 * (x0 + x2) - 12 * x1,","\t\t\tcx = 3 * (x1 - x0),","","\t\t\tay = 9 * (y1 - y2) + 3 * (y3 - y0),","\t\t\tby = 6 * (y0 + y2) - 12 * y1,","\t\t\tcy = 3 * (y1 - y0);","","\t\treturn function(t) {","\t\t\tvar dx = (ax * t + bx) * t + cx,","\t\t\t\tdy = (ay * t + by) * t + cy;","\t\t\treturn Math.sqrt(dx * dx + dy * dy);","\t\t};","\t}","","\tfunction getIterations(a, b) {","\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));","\t}","","\tfunction evaluate(v, t, type, normalized) {","\t\tif (t == null || t < 0 || t > 1)","\t\t\treturn null;","\t\tvar x0 = v[0], y0 = v[1],","\t\t\tx1 = v[2], y1 = v[3],","\t\t\tx2 = v[4], y2 = v[5],","\t\t\tx3 = v[6], y3 = v[7],","\t\t\tisZero = Numerical.isZero;","\t\tif (isZero(x1 - x0) && isZero(y1 - y0)) {","\t\t\tx1 = x0;","\t\t\ty1 = y0;","\t\t}","\t\tif (isZero(x2 - x3) && isZero(y2 - y3)) {","\t\t\tx2 = x3;","\t\t\ty2 = y3;","\t\t}","\t\tvar cx = 3 * (x1 - x0),","\t\t\tbx = 3 * (x2 - x1) - cx,","\t\t\tax = x3 - x0 - cx - bx,","\t\t\tcy = 3 * (y1 - y0),","\t\t\tby = 3 * (y2 - y1) - cy,","\t\t\tay = y3 - y0 - cy - by,","\t\t\tx, y;","\t\tif (type === 0) {","\t\t\tx = t === 0 ? x0 : t === 1 ? x3","\t\t\t\t\t: ((ax * t + bx) * t + cx) * t + x0;","\t\t\ty = t === 0 ? y0 : t === 1 ? y3","\t\t\t\t\t: ((ay * t + by) * t + cy) * t + y0;","\t\t} else {","\t\t\tvar tMin = 1e-8,","\t\t\t\ttMax = 1 - tMin;","\t\t\tif (t < tMin) {","\t\t\t\tx = cx;","\t\t\t\ty = cy;","\t\t\t} else if (t > tMax) {","\t\t\t\tx = 3 * (x3 - x2);","\t\t\t\ty = 3 * (y3 - y2);","\t\t\t} else {","\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;","\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;","\t\t\t}","\t\t\tif (normalized) {","\t\t\t\tif (x === 0 && y === 0 && (t < tMin || t > tMax)) {","\t\t\t\t\tx = x2 - x1;","\t\t\t\t\ty = y2 - y1;","\t\t\t\t}","\t\t\t\tvar len = Math.sqrt(x * x + y * y);","\t\t\t\tif (len) {","\t\t\t\t\tx /= len;","\t\t\t\t\ty /= len;","\t\t\t\t}","\t\t\t}","\t\t\tif (type === 3) {","\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,","\t\t\t\t\ty2 = 6 * ay * t + 2 * by,","\t\t\t\t\td = Math.pow(x * x + y * y, 3 / 2);","\t\t\t\tx = d !== 0 ? (x * y2 - y * x2) / d : 0;","\t\t\t\ty = 0;","\t\t\t}","\t\t}","\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);","\t}","","\treturn { statics: {","","\t\tclassify: function(v) {","","\t\t\tvar x0 = v[0], y0 = v[1],","\t\t\t\tx1 = v[2], y1 = v[3],","\t\t\t\tx2 = v[4], y2 = v[5],","\t\t\t\tx3 = v[6], y3 = v[7],","\t\t\t\ta1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2,","\t\t\t\ta2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3,","\t\t\t\ta3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0,","\t\t\t\td3 = 3 * a3,","\t\t\t\td2 = d3 - a2,","\t\t\t\td1 = d2 - a2 + a1,","\t\t\t\tl = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3),","\t\t\t\ts = l !== 0 ? 1 / l : 0,","\t\t\t\tisZero = Numerical.isZero,","\t\t\t\tserpentine = 'serpentine';","\t\t\td1 *= s;","\t\t\td2 *= s;","\t\t\td3 *= s;","","\t\t\tfunction type(type, t1, t2) {","\t\t\t\tvar hasRoots = t1 !== undefined,","\t\t\t\t\tt1Ok = hasRoots && t1 > 0 && t1 < 1,","\t\t\t\t\tt2Ok = hasRoots && t2 > 0 && t2 < 1;","\t\t\t\tif (hasRoots && (!(t1Ok || t2Ok)","\t\t\t\t\t\t|| type === 'loop' && !(t1Ok && t2Ok))) {","\t\t\t\t\ttype = 'arch';","\t\t\t\t\tt1Ok = t2Ok = false;","\t\t\t\t}","\t\t\t\treturn {","\t\t\t\t\ttype: type,","\t\t\t\t\troots: t1Ok || t2Ok","\t\t\t\t\t\t\t? t1Ok && t2Ok","\t\t\t\t\t\t\t\t? t1 < t2 ? [t1, t2] : [t2, t1]","\t\t\t\t\t\t\t\t: [t1Ok ? t1 : t2]","\t\t\t\t\t\t\t: null","\t\t\t\t};","\t\t\t}","","\t\t\tif (isZero(d1)) {","\t\t\t\treturn isZero(d2)","\t\t\t\t\t\t? type(isZero(d3) ? 'line' : 'quadratic')","\t\t\t\t\t\t: type(serpentine, d3 / (3 * d2));","\t\t\t}","\t\t\tvar d = 3 * d2 * d2 - 4 * d1 * d3;","\t\t\tif (isZero(d)) {","\t\t\t\treturn type('cusp', d2 / (2 * d1));","\t\t\t}","\t\t\tvar f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d),","\t\t\t\tf2 = 2 * d1;","\t\t\treturn type(d > 0 ? serpentine : 'loop',","\t\t\t\t\t(d2 + f1) / f2,","\t\t\t\t\t(d2 - f1) / f2);","\t\t},","","\t\tgetLength: function(v, a, b, ds) {","\t\t\tif (a === undefined)","\t\t\t\ta = 0;","\t\t\tif (b === undefined)","\t\t\t\tb = 1;","\t\t\tif (Curve.isStraight(v)) {","\t\t\t\tvar c = v;","\t\t\t\tif (b < 1) {","\t\t\t\t\tc = Curve.subdivide(c, b)[0];","\t\t\t\t\ta /= b;","\t\t\t\t}","\t\t\t\tif (a > 0) {","\t\t\t\t\tc = Curve.subdivide(c, a)[1];","\t\t\t\t}","\t\t\t\tvar dx = c[6] - c[0],","\t\t\t\t\tdy = c[7] - c[1];","\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);","\t\t\t}","\t\t\treturn Numerical.integrate(ds || getLengthIntegrand(v), a, b,","\t\t\t\t\tgetIterations(a, b));","\t\t},","","\t\tgetTimeAt: function(v, offset, start) {","\t\t\tif (start === undefined)","\t\t\t\tstart = offset < 0 ? 1 : 0;","\t\t\tif (offset === 0)","\t\t\t\treturn start;","\t\t\tvar abs = Math.abs,","\t\t\t\tepsilon = 1e-12,","\t\t\t\tforward = offset > 0,","\t\t\t\ta = forward ? start : 0,","\t\t\t\tb = forward ? 1 : start,","\t\t\t\tds = getLengthIntegrand(v),","\t\t\t\trangeLength = Curve.getLength(v, a, b, ds),","\t\t\t\tdiff = abs(offset) - rangeLength;","\t\t\tif (abs(diff) < epsilon) {","\t\t\t\treturn forward ? b : a;","\t\t\t} else if (diff > epsilon) {","\t\t\t\treturn null;","\t\t\t}","\t\t\tvar guess = offset / rangeLength,","\t\t\t\tlength = 0;","\t\t\tfunction f(t) {","\t\t\t\tlength += Numerical.integrate(ds, start, t,","\t\t\t\t\t\tgetIterations(start, t));","\t\t\t\tstart = t;","\t\t\t\treturn length - offset;","\t\t\t}","\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 32,","\t\t\t\t\t1e-12);","\t\t},","","\t\tgetPoint: function(v, t) {","\t\t\treturn evaluate(v, t, 0, false);","\t\t},","","\t\tgetTangent: function(v, t) {","\t\t\treturn evaluate(v, t, 1, true);","\t\t},","","\t\tgetWeightedTangent: function(v, t) {","\t\t\treturn evaluate(v, t, 1, false);","\t\t},","","\t\tgetNormal: function(v, t) {","\t\t\treturn evaluate(v, t, 2, true);","\t\t},","","\t\tgetWeightedNormal: function(v, t) {","\t\t\treturn evaluate(v, t, 2, false);","\t\t},","","\t\tgetCurvature: function(v, t) {","\t\t\treturn evaluate(v, t, 3, false).x;","\t\t},","","\t\tgetPeaks: function(v) {","\t\t\tvar x0 = v[0], y0 = v[1],","\t\t\t\tx1 = v[2], y1 = v[3],","\t\t\t\tx2 = v[4], y2 = v[5],","\t\t\t\tx3 = v[6], y3 = v[7],","\t\t\t\tax =     -x0 + 3 * x1 - 3 * x2 + x3,","\t\t\t\tbx =  3 * x0 - 6 * x1 + 3 * x2,","\t\t\t\tcx = -3 * x0 + 3 * x1,","\t\t\t\tay =     -y0 + 3 * y1 - 3 * y2 + y3,","\t\t\t\tby =  3 * y0 - 6 * y1 + 3 * y2,","\t\t\t\tcy = -3 * y0 + 3 * y1,","\t\t\t\ttMin = 1e-8,","\t\t\t\ttMax = 1 - tMin,","\t\t\t\troots = [];","\t\t\tNumerical.solveCubic(","\t\t\t\t\t9 * (ax * ax + ay * ay),","\t\t\t\t\t9 * (ax * bx + by * ay),","\t\t\t\t\t2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay),","\t\t\t\t\t(cx * bx + by * cy),","\t\t\t\t\troots, tMin, tMax);","\t\t\treturn roots.sort();","\t\t}","\t}};","},","new function() {","","\tfunction addLocation(locations, include, c1, t1, c2, t2, overlap) {","\t\tvar excludeStart = !overlap && c1.getPrevious() === c2,","\t\t\texcludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2,","\t\t\ttMin = 1e-8,","\t\t\ttMax = 1 - tMin;","\t\tif (t1 !== null && t1 >= (excludeStart ? tMin : 0) &&","\t\t\tt1 <= (excludeEnd ? tMax : 1)) {","\t\t\tif (t2 !== null && t2 >= (excludeEnd ? tMin : 0) &&","\t\t\t\tt2 <= (excludeStart ? tMax : 1)) {","\t\t\t\tvar loc1 = new CurveLocation(c1, t1, null, overlap),","\t\t\t\t\tloc2 = new CurveLocation(c2, t2, null, overlap);","\t\t\t\tloc1._intersection = loc2;","\t\t\t\tloc2._intersection = loc1;","\t\t\t\tif (!include || include(loc1)) {","\t\t\t\t\tCurveLocation.insert(locations, loc1, true);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","","\tfunction addCurveIntersections(v1, v2, c1, c2, locations, include, flip,","\t\t\trecursion, calls, tMin, tMax, uMin, uMax) {","\t\tif (++calls >= 4096 || ++recursion >= 40)","\t\t\treturn calls;","\t\tvar fatLineEpsilon = 1e-9,","\t\t\tq0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],","\t\t\tgetSignedDistance = Line.getSignedDistance,","\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]),","\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]),","\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,","\t\t\tdMin = factor * Math.min(0, d1, d2),","\t\t\tdMax = factor * Math.max(0, d1, d2),","\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),","\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),","\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),","\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),","\t\t\thull = getConvexHull(dp0, dp1, dp2, dp3),","\t\t\ttop = hull[0],","\t\t\tbottom = hull[1],","\t\t\ttMinClip,","\t\t\ttMaxClip;","\t\tif (d1 === 0 && d2 === 0","\t\t\t\t&& dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0","\t\t\t|| (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null","\t\t\t|| (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(),","\t\t\t\tdMin, dMax)) == null)","\t\t\treturn calls;","\t\tvar tMinNew = tMin + (tMax - tMin) * tMinClip,","\t\t\ttMaxNew = tMin + (tMax - tMin) * tMaxClip;","\t\tif (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {","\t\t\tvar t = (tMinNew + tMaxNew) / 2,","\t\t\t\tu = (uMin + uMax) / 2;","\t\t\taddLocation(locations, include,","\t\t\t\t\tflip ? c2 : c1, flip ? u : t,","\t\t\t\t\tflip ? c1 : c2, flip ? t : u);","\t\t} else {","\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);","\t\t\tif (tMaxClip - tMinClip > 0.8) {","\t\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {","\t\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),","\t\t\t\t\t\tt = (tMinNew + tMaxNew) / 2;","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tv2, parts[0], c2, c1, locations, include, !flip,","\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, t);","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tv2, parts[1], c2, c1, locations, include, !flip,","\t\t\t\t\t\t\trecursion, calls, uMin, uMax, t, tMaxNew);","\t\t\t\t} else {","\t\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),","\t\t\t\t\t\tu = (uMin + uMax) / 2;","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tparts[0], v1, c2, c1, locations, include, !flip,","\t\t\t\t\t\t\trecursion, calls, uMin, u, tMinNew, tMaxNew);","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tparts[1], v1, c2, c1, locations, include, !flip,","\t\t\t\t\t\t\trecursion, calls, u, uMax, tMinNew, tMaxNew);","\t\t\t\t}","\t\t\t} else {","\t\t\t\tif (uMax - uMin >= fatLineEpsilon) {","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tv2, v1, c2, c1, locations, include, !flip,","\t\t\t\t\t\t\trecursion, calls, uMin, uMax, tMinNew, tMaxNew);","\t\t\t\t} else {","\t\t\t\t\tcalls = addCurveIntersections(","\t\t\t\t\t\t\tv1, v2, c1, c2, locations, include, flip,","\t\t\t\t\t\t\trecursion, calls, tMinNew, tMaxNew, uMin, uMax);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn calls;","\t}","","\tfunction getConvexHull(dq0, dq1, dq2, dq3) {","\t\tvar p0 = [ 0, dq0 ],","\t\t\tp1 = [ 1 / 3, dq1 ],","\t\t\tp2 = [ 2 / 3, dq2 ],","\t\t\tp3 = [ 1, dq3 ],","\t\t\tdist1 = dq1 - (2 * dq0 + dq3) / 3,","\t\t\tdist2 = dq2 - (dq0 + 2 * dq3) / 3,","\t\t\thull;","\t\tif (dist1 * dist2 < 0) {","\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];","\t\t} else {","\t\t\tvar distRatio = dist1 / dist2;","\t\t\thull = [","\t\t\t\tdistRatio >= 2 ? [p0, p1, p3]","\t\t\t\t: distRatio <= 0.5 ? [p0, p2, p3]","\t\t\t\t: [p0, p1, p2, p3],","\t\t\t\t[p0, p3]","\t\t\t];","\t\t}","\t\treturn (dist1 || dist2) < 0 ? hull.reverse() : hull;","\t}","","\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {","\t\tif (hullTop[0][1] < dMin) {","\t\t\treturn clipConvexHullPart(hullTop, true, dMin);","\t\t} else if (hullBottom[0][1] > dMax) {","\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);","\t\t} else {","\t\t\treturn hullTop[0][0];","\t\t}","\t}","","\tfunction clipConvexHullPart(part, top, threshold) {","\t\tvar px = part[0][0],","\t\t\tpy = part[0][1];","\t\tfor (var i = 1, l = part.length; i < l; i++) {","\t\t\tvar qx = part[i][0],","\t\t\t\tqy = part[i][1];","\t\t\tif (top ? qy >= threshold : qy <= threshold) {","\t\t\t\treturn qy === threshold ? qx","\t\t\t\t\t\t: px + (threshold - py) * (qx - px) / (qy - py);","\t\t\t}","\t\t\tpx = qx;","\t\t\tpy = qy;","\t\t}","\t\treturn null;","\t}","","\tfunction getCurveLineIntersections(v, px, py, vx, vy) {","\t\tvar isZero = Numerical.isZero;","\t\tif (isZero(vx) && isZero(vy)) {","\t\t\tvar t = Curve.getTimeOf(v, new Point(px, py));","\t\t\treturn t === null ? [] : [t];","\t\t}","\t\tvar angle = Math.atan2(-vy, vx),","\t\t\tsin = Math.sin(angle),","\t\t\tcos = Math.cos(angle),","\t\t\trv = [],","\t\t\troots = [];","\t\tfor (var i = 0; i < 8; i += 2) {","\t\t\tvar x = v[i] - px,","\t\t\t\ty = v[i + 1] - py;","\t\t\trv.push(","\t\t\t\tx * cos - y * sin,","\t\t\t\tx * sin + y * cos);","\t\t}","\t\tCurve.solveCubic(rv, 1, 0, roots, 0, 1);","\t\treturn roots;","\t}","","\tfunction addCurveLineIntersections(v1, v2, c1, c2, locations, include,","\t\t\tflip) {","\t\tvar x1 = v2[0], y1 = v2[1],","\t\t\tx2 = v2[6], y2 = v2[7],","\t\t\troots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);","\t\tfor (var i = 0, l = roots.length; i < l; i++) {","\t\t\tvar t1 = roots[i],","\t\t\t\tp1 = Curve.getPoint(v1, t1),","\t\t\t\tt2 = Curve.getTimeOf(v2, p1);","\t\t\tif (t2 !== null) {","\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\tflip ? c2 : c1, flip ? t2 : t1,","\t\t\t\t\t\tflip ? c1 : c2, flip ? t1 : t2);","\t\t\t}","\t\t}","\t}","","\tfunction addLineIntersection(v1, v2, c1, c2, locations, include) {","\t\tvar pt = Line.intersect(","\t\t\t\tv1[0], v1[1], v1[6], v1[7],","\t\t\t\tv2[0], v2[1], v2[6], v2[7]);","\t\tif (pt) {","\t\t\taddLocation(locations, include,","\t\t\t\t\tc1, Curve.getTimeOf(v1, pt),","\t\t\t\t\tc2, Curve.getTimeOf(v2, pt));","\t\t}","\t}","","\tfunction getCurveIntersections(v1, v2, c1, c2, locations, include) {","\t\tvar epsilon = 1e-12,","\t\t\tmin = Math.min,","\t\t\tmax = Math.max;","","\t\tif (max(v1[0], v1[2], v1[4], v1[6]) + epsilon >","\t\t\tmin(v2[0], v2[2], v2[4], v2[6]) &&","\t\t\tmin(v1[0], v1[2], v1[4], v1[6]) - epsilon <","\t\t\tmax(v2[0], v2[2], v2[4], v2[6]) &&","\t\t\tmax(v1[1], v1[3], v1[5], v1[7]) + epsilon >","\t\t\tmin(v2[1], v2[3], v2[5], v2[7]) &&","\t\t\tmin(v1[1], v1[3], v1[5], v1[7]) - epsilon <","\t\t\tmax(v2[1], v2[3], v2[5], v2[7])) {","\t\t\tvar overlaps = getOverlaps(v1, v2);","\t\t\tif (overlaps) {","\t\t\t\tfor (var i = 0; i < 2; i++) {","\t\t\t\t\tvar overlap = overlaps[i];","\t\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\t\tc1, overlap[0],","\t\t\t\t\t\t\tc2, overlap[1], true);","\t\t\t\t}","\t\t\t} else {","\t\t\t\tvar straight1 = Curve.isStraight(v1),","\t\t\t\t\tstraight2 = Curve.isStraight(v2),","\t\t\t\t\tstraight = straight1 && straight2,","\t\t\t\t\tflip = straight1 && !straight2,","\t\t\t\t\tbefore = locations.length;","\t\t\t\t(straight","\t\t\t\t\t? addLineIntersection","\t\t\t\t\t: straight1 || straight2","\t\t\t\t\t\t? addCurveLineIntersections","\t\t\t\t\t\t: addCurveIntersections)(","\t\t\t\t\t\t\tflip ? v2 : v1, flip ? v1 : v2,","\t\t\t\t\t\t\tflip ? c2 : c1, flip ? c1 : c2,","\t\t\t\t\t\t\tlocations, include, flip,","\t\t\t\t\t\t\t0, 0, 0, 1, 0, 1);","\t\t\t\tif (!straight || locations.length === before) {","\t\t\t\t\tfor (var i = 0; i < 4; i++) {","\t\t\t\t\t\tvar t1 = i >> 1,","\t\t\t\t\t\t\tt2 = i & 1,","\t\t\t\t\t\t\ti1 = t1 * 6,","\t\t\t\t\t\t\ti2 = t2 * 6,","\t\t\t\t\t\t\tp1 = new Point(v1[i1], v1[i1 + 1]),","\t\t\t\t\t\t\tp2 = new Point(v2[i2], v2[i2 + 1]);","\t\t\t\t\t\tif (p1.isClose(p2, epsilon)) {","\t\t\t\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\t\t\t\tc1, t1,","\t\t\t\t\t\t\t\t\tc2, t2);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn locations;","\t}","","\tfunction getLoopIntersection(v1, c1, locations, include) {","\t\tvar info = Curve.classify(v1);","\t\tif (info.type === 'loop') {","\t\t\tvar roots = info.roots;","\t\t\taddLocation(locations, include,","\t\t\t\t\tc1, roots[0],","\t\t\t\t\tc1, roots[1]);","\t\t}","\t  return locations;","\t}","","\tfunction getIntersections(curves1, curves2, include, matrix1, matrix2,","\t\t\t_returnFirst) {","\t\tvar self = !curves2;","\t\tif (self)","\t\t\tcurves2 = curves1;","\t\tvar length1 = curves1.length,","\t\t\tlength2 = curves2.length,","\t\t\tvalues2 = [],","\t\t\tarrays = [],","\t\t\tlocations,","\t\t\tcurrent;","\t\tfor (var i = 0; i < length2; i++)","\t\t\tvalues2[i] = curves2[i].getValues(matrix2);","\t\tfor (var i = 0; i < length1; i++) {","\t\t\tvar curve1 = curves1[i],","\t\t\t\tvalues1 = self ? values2[i] : curve1.getValues(matrix1),","\t\t\t\tpath1 = curve1.getPath();","\t\t\tif (path1 !== current) {","\t\t\t\tcurrent = path1;","\t\t\t\tlocations = [];","\t\t\t\tarrays.push(locations);","\t\t\t}","\t\t\tif (self) {","\t\t\t\tgetLoopIntersection(values1, curve1, locations, include);","\t\t\t}","\t\t\tfor (var j = self ? i + 1 : 0; j < length2; j++) {","\t\t\t\tif (_returnFirst && locations.length)","\t\t\t\t\treturn locations;","\t\t\t\tgetCurveIntersections(values1, values2[j], curve1, curves2[j],","\t\t\t\t\t\tlocations, include);","\t\t\t}","\t\t}","\t\tlocations = [];","\t\tfor (var i = 0, l = arrays.length; i < l; i++) {","\t\t\tlocations.push.apply(locations, arrays[i]);","\t\t}","\t\treturn locations;","\t}","","\tfunction getOverlaps(v1, v2) {","","\t\tfunction getSquaredLineLength(v) {","\t\t\tvar x = v[6] - v[0],","\t\t\t\ty = v[7] - v[1];","\t\t\treturn x * x + y * y;","\t\t}","","\t\tvar abs = Math.abs,","\t\t\tgetDistance = Line.getDistance,","\t\t\ttimeEpsilon = 1e-8,","\t\t\tgeomEpsilon = 1e-7,","\t\t\tstraight1 = Curve.isStraight(v1),","\t\t\tstraight2 = Curve.isStraight(v2),","\t\t\tstraightBoth = straight1 && straight2,","\t\t\tflip = getSquaredLineLength(v1) < getSquaredLineLength(v2),","\t\t\tl1 = flip ? v2 : v1,","\t\t\tl2 = flip ? v1 : v2,","\t\t\tpx = l1[0], py = l1[1],","\t\t\tvx = l1[6] - px, vy = l1[7] - py;","\t\tif (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon &&","\t\t\tgetDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {","\t\t\tif (!straightBoth &&","\t\t\t\tgetDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon &&","\t\t\t\tgetDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon &&","\t\t\t\tgetDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon &&","\t\t\t\tgetDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) {","\t\t\t\tstraight1 = straight2 = straightBoth = true;","\t\t\t}","\t\t} else if (straightBoth) {","\t\t\treturn null;","\t\t}","\t\tif (straight1 ^ straight2) {","\t\t\treturn null;","\t\t}","","\t\tvar v = [v1, v2],","\t\t\tpairs = [];","\t\tfor (var i = 0; i < 4 && pairs.length < 2; i++) {","\t\t\tvar i1 = i & 1,","\t\t\t\ti2 = i1 ^ 1,","\t\t\t\tt1 = i >> 1,","\t\t\t\tt2 = Curve.getTimeOf(v[i1], new Point(","\t\t\t\t\tv[i2][t1 ? 6 : 0],","\t\t\t\t\tv[i2][t1 ? 7 : 1]));","\t\t\tif (t2 != null) {","\t\t\t\tvar pair = i1 ? [t1, t2] : [t2, t1];","\t\t\t\tif (!pairs.length ||","\t\t\t\t\tabs(pair[0] - pairs[0][0]) > timeEpsilon &&","\t\t\t\t\tabs(pair[1] - pairs[0][1]) > timeEpsilon) {","\t\t\t\t\tpairs.push(pair);","\t\t\t\t}","\t\t\t}","\t\t\tif (i > 2 && !pairs.length)","\t\t\t\tbreak;","\t\t}","\t\tif (pairs.length !== 2) {","\t\t\tpairs = null;","\t\t} else if (!straightBoth) {","\t\t\tvar o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]),","\t\t\t\to2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);","\t\t\tif (abs(o2[2] - o1[2]) > geomEpsilon ||","\t\t\t\tabs(o2[3] - o1[3]) > geomEpsilon ||","\t\t\t\tabs(o2[4] - o1[4]) > geomEpsilon ||","\t\t\t\tabs(o2[5] - o1[5]) > geomEpsilon)","\t\t\t\tpairs = null;","\t\t}","\t\treturn pairs;","\t}","","\treturn {","\t\tgetIntersections: function(curve) {","\t\t\tvar v1 = this.getValues(),","\t\t\t\tv2 = curve && curve !== this && curve.getValues();","\t\t\treturn v2 ? getCurveIntersections(v1, v2, this, curve, [])","\t\t\t\t\t  : getLoopIntersection(v1, this, []);","\t\t},","","\t\tstatics: {","\t\t\tgetOverlaps: getOverlaps,","\t\t\tgetIntersections: getIntersections,","\t\t\tgetCurveLineIntersections: getCurveLineIntersections","\t\t}","\t};","});","","var CurveLocation = Base.extend({","\t_class: 'CurveLocation',","","\tinitialize: function CurveLocation(curve, time, point, _overlap, _distance) {","\t\tif (time >= 0.99999999) {","\t\t\tvar next = curve.getNext();","\t\t\tif (next) {","\t\t\t\ttime = 0;","\t\t\t\tcurve = next;","\t\t\t}","\t\t}","\t\tthis._setCurve(curve);","\t\tthis._time = time;","\t\tthis._point = point || curve.getPointAtTime(time);","\t\tthis._overlap = _overlap;","\t\tthis._distance = _distance;","\t\tthis._intersection = this._next = this._previous = null;","\t},","","\t_setCurve: function(curve) {","\t\tvar path = curve._path;","\t\tthis._path = path;","\t\tthis._version = path ? path._version : 0;","\t\tthis._curve = curve;","\t\tthis._segment = null;","\t\tthis._segment1 = curve._segment1;","\t\tthis._segment2 = curve._segment2;","\t},","","\t_setSegment: function(segment) {","\t\tthis._setCurve(segment.getCurve());","\t\tthis._segment = segment;","\t\tthis._time = segment === this._segment1 ? 0 : 1;","\t\tthis._point = segment._point.clone();","\t},","","\tgetSegment: function() {","\t\tvar segment = this._segment;","\t\tif (!segment) {","\t\t\tvar curve = this.getCurve(),","\t\t\t\ttime = this.getTime();","\t\t\tif (time === 0) {","\t\t\t\tsegment = curve._segment1;","\t\t\t} else if (time === 1) {","\t\t\t\tsegment = curve._segment2;","\t\t\t} else if (time != null) {","\t\t\t\tsegment = curve.getPartLength(0, time)","\t\t\t\t\t< curve.getPartLength(time, 1)","\t\t\t\t\t\t? curve._segment1","\t\t\t\t\t\t: curve._segment2;","\t\t\t}","\t\t\tthis._segment = segment;","\t\t}","\t\treturn segment;","\t},","","\tgetCurve: function() {","\t\tvar path = this._path,","\t\t\tthat = this;","\t\tif (path && path._version !== this._version) {","\t\t\tthis._time = this._offset = this._curveOffset = this._curve = null;","\t\t}","","\t\tfunction trySegment(segment) {","\t\t\tvar curve = segment && segment.getCurve();","\t\t\tif (curve && (that._time = curve.getTimeOf(that._point)) != null) {","\t\t\t\tthat._setCurve(curve);","\t\t\t\treturn curve;","\t\t\t}","\t\t}","","\t\treturn this._curve","\t\t\t|| trySegment(this._segment)","\t\t\t|| trySegment(this._segment1)","\t\t\t|| trySegment(this._segment2.getPrevious());","\t},","","\tgetPath: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve && curve._path;","\t},","","\tgetIndex: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve && curve.getIndex();","\t},","","\tgetTime: function() {","\t\tvar curve = this.getCurve(),","\t\t\ttime = this._time;","\t\treturn curve && time == null","\t\t\t? this._time = curve.getTimeOf(this._point)","\t\t\t: time;","\t},","","\tgetParameter: '#getTime',","","\tgetPoint: function() {","\t\treturn this._point;","\t},","","\tgetOffset: function() {","\t\tvar offset = this._offset;","\t\tif (offset == null) {","\t\t\toffset = 0;","\t\t\tvar path = this.getPath(),","\t\t\t\tindex = this.getIndex();","\t\t\tif (path && index != null) {","\t\t\t\tvar curves = path.getCurves();","\t\t\t\tfor (var i = 0; i < index; i++)","\t\t\t\t\toffset += curves[i].getLength();","\t\t\t}","\t\t\tthis._offset = offset += this.getCurveOffset();","\t\t}","\t\treturn offset;","\t},","","\tgetCurveOffset: function() {","\t\tvar offset = this._curveOffset;","\t\tif (offset == null) {","\t\t\tvar curve = this.getCurve(),","\t\t\t\ttime = this.getTime();","\t\t\tthis._curveOffset = offset = time != null && curve","\t\t\t\t\t&& curve.getPartLength(0, time);","\t\t}","\t\treturn offset;","\t},","","\tgetIntersection: function() {","\t\treturn this._intersection;","\t},","","\tgetDistance: function() {","\t\treturn this._distance;","\t},","","\tdivide: function() {","\t\tvar curve = this.getCurve(),","\t\t\tres = curve && curve.divideAtTime(this.getTime());","\t\tif (res) {","\t\t\tthis._setSegment(res._segment1);","\t\t}","\t\treturn res;","\t},","","\tsplit: function() {","\t\tvar curve = this.getCurve(),","\t\t\tpath = curve._path,","\t\t\tres = curve && curve.splitAtTime(this.getTime());","\t\tif (res) {","\t\t\tthis._setSegment(path.getLastSegment());","\t\t}","\t\treturn  res;","\t},","","\tequals: function(loc, _ignoreOther) {","\t\tvar res = this === loc;","\t\tif (!res && loc instanceof CurveLocation) {","\t\t\tvar c1 = this.getCurve(),","\t\t\t\tc2 = loc.getCurve(),","\t\t\t\tp1 = c1._path,","\t\t\t\tp2 = c2._path;","\t\t\tif (p1 === p2) {","\t\t\t\tvar abs = Math.abs,","\t\t\t\t\tepsilon = 1e-7,","\t\t\t\t\tdiff = abs(this.getOffset() - loc.getOffset()),","\t\t\t\t\ti1 = !_ignoreOther && this._intersection,","\t\t\t\t\ti2 = !_ignoreOther && loc._intersection;","\t\t\t\tres = (diff < epsilon","\t\t\t\t\t\t|| p1 && abs(p1.getLength() - diff) < epsilon)","\t\t\t\t\t&& (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));","\t\t\t}","\t\t}","\t\treturn res;","\t},","","\ttoString: function() {","\t\tvar parts = [],","\t\t\tpoint = this.getPoint(),","\t\t\tf = Formatter.instance;","\t\tif (point)","\t\t\tparts.push('point: ' + point);","\t\tvar index = this.getIndex();","\t\tif (index != null)","\t\t\tparts.push('index: ' + index);","\t\tvar time = this.getTime();","\t\tif (time != null)","\t\t\tparts.push('time: ' + f.number(time));","\t\tif (this._distance != null)","\t\t\tparts.push('distance: ' + f.number(this._distance));","\t\treturn '{ ' + parts.join(', ') + ' }';","\t},","","\tisTouching: function() {","\t\tvar inter = this._intersection;","\t\tif (inter && this.getTangent().isCollinear(inter.getTangent())) {","\t\t\tvar curve1 = this.getCurve(),","\t\t\t\tcurve2 = inter.getCurve();","\t\t\treturn !(curve1.isStraight() && curve2.isStraight()","\t\t\t\t\t&& curve1.getLine().intersect(curve2.getLine()));","\t\t}","\t\treturn false;","\t},","","\tisCrossing: function() {","\t\tvar inter = this._intersection;","\t\tif (!inter)","\t\t\treturn false;","\t\tvar t1 = this.getTime(),","\t\t\tt2 = inter.getTime(),","\t\t\ttMin = 1e-8,","\t\t\ttMax = 1 - tMin,","\t\t\tt1Inside = t1 >= tMin && t1 <= tMax,","\t\t\tt2Inside = t2 >= tMin && t2 <= tMax;","\t\tif (t1Inside && t2Inside)","\t\t\treturn !this.isTouching();","\t\tvar c2 = this.getCurve(),","\t\t\tc1 = t1 < tMin ? c2.getPrevious() : c2,","\t\t\tc4 = inter.getCurve(),","\t\t\tc3 = t2 < tMin ? c4.getPrevious() : c4;","\t\tif (t1 > tMax)","\t\t\tc2 = c2.getNext();","\t\tif (t2 > tMax)","\t\t\tc4 = c4.getNext();","\t\tif (!c1 || !c2 || !c3 || !c4)","\t\t\treturn false;","","\t\tvar offsets = [];","","\t\tfunction addOffsets(curve, end) {","\t\t\tvar v = curve.getValues(),","\t\t\t\troots = Curve.classify(v).roots || Curve.getPeaks(v),","\t\t\t\tcount = roots.length,","\t\t\t\tt = end && count > 1 ? roots[count - 1]","\t\t\t\t\t\t: count > 0 ? roots[0]","\t\t\t\t\t\t: 0.5;","\t\t\toffsets.push(Curve.getLength(v, end ? t : 0, end ? 1 : t) / 2);","\t\t}","","\t\tfunction isInRange(angle, min, max) {","\t\t\treturn min < max","\t\t\t\t\t? angle > min && angle < max","\t\t\t\t\t: angle > min || angle < max;","\t\t}","","\t\tif (!t1Inside) {","\t\t\taddOffsets(c1, true);","\t\t\taddOffsets(c2, false);","\t\t}","\t\tif (!t2Inside) {","\t\t\taddOffsets(c3, true);","\t\t\taddOffsets(c4, false);","\t\t}","\t\tvar pt = this.getPoint(),","\t\t\toffset = Math.min.apply(Math, offsets),","\t\t\tv2 = t1Inside ? c2.getTangentAtTime(t1)","\t\t\t\t\t: c2.getPointAt(offset).subtract(pt),","\t\t\tv1 = t1Inside ? v2.negate()","\t\t\t\t\t: c1.getPointAt(-offset).subtract(pt),","\t\t\tv4 = t2Inside ? c4.getTangentAtTime(t2)","\t\t\t\t\t: c4.getPointAt(offset).subtract(pt),","\t\t\tv3 = t2Inside ? v4.negate()","\t\t\t\t\t: c3.getPointAt(-offset).subtract(pt),","\t\t\ta1 = v1.getAngle(),","\t\t\ta2 = v2.getAngle(),","\t\t\ta3 = v3.getAngle(),","\t\t\ta4 = v4.getAngle();","\t\treturn !!(t1Inside","\t\t\t\t? (isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4)) &&","\t\t\t\t  (isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3))","\t\t\t\t: (isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2)) &&","\t\t\t\t  (isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1)));","\t},","","\thasOverlap: function() {","\t\treturn !!this._overlap;","\t}","}, Base.each(Curve._evaluateMethods, function(name) {","\tvar get = name + 'At';","\tthis[name] = function() {","\t\tvar curve = this.getCurve(),","\t\t\ttime = this.getTime();","\t\treturn time != null && curve && curve[get](time, true);","\t};","}, {","\tpreserve: true","}),","new function() {","","\tfunction insert(locations, loc, merge) {","\t\tvar length = locations.length,","\t\t\tl = 0,","\t\t\tr = length - 1;","","\t\tfunction search(index, dir) {","\t\t\tfor (var i = index + dir; i >= -1 && i <= length; i += dir) {","\t\t\t\tvar loc2 = locations[((i % length) + length) % length];","\t\t\t\tif (!loc.getPoint().isClose(loc2.getPoint(),","\t\t\t\t\t\t1e-7))","\t\t\t\t\tbreak;","\t\t\t\tif (loc.equals(loc2))","\t\t\t\t\treturn loc2;","\t\t\t}","\t\t\treturn null;","\t\t}","","\t\twhile (l <= r) {","\t\t\tvar m = (l + r) >>> 1,","\t\t\t\tloc2 = locations[m],","\t\t\t\tfound;","\t\t\tif (merge && (found = loc.equals(loc2) ? loc2","\t\t\t\t\t: (search(m, -1) || search(m, 1)))) {","\t\t\t\tif (loc._overlap) {","\t\t\t\t\tfound._overlap = found._intersection._overlap = true;","\t\t\t\t}","\t\t\t\treturn found;","\t\t\t}","\t\tvar path1 = loc.getPath(),","\t\t\tpath2 = loc2.getPath(),","\t\t\tdiff = path1 !== path2","\t\t\t\t? path1._id - path2._id","\t\t\t\t: (loc.getIndex() + loc.getTime())","\t\t\t\t- (loc2.getIndex() + loc2.getTime());","\t\t\tif (diff < 0) {","\t\t\t\tr = m - 1;","\t\t\t} else {","\t\t\t\tl = m + 1;","\t\t\t}","\t\t}","\t\tlocations.splice(l, 0, loc);","\t\treturn loc;","\t}","","\treturn { statics: {","\t\tinsert: insert,","","\t\texpand: function(locations) {","\t\t\tvar expanded = locations.slice();","\t\t\tfor (var i = locations.length - 1; i >= 0; i--) {","\t\t\t\tinsert(expanded, locations[i]._intersection, false);","\t\t\t}","\t\t\treturn expanded;","\t\t}","\t}};","});","","var PathItem = Item.extend({","\t_class: 'PathItem',","\t_selectBounds: false,","\t_canScaleStroke: true,","\tbeans: true,","","\tinitialize: function PathItem() {","\t},","","\tstatics: {","\t\tcreate: function(arg) {","\t\t\tvar data,","\t\t\t\tsegments,","\t\t\t\tcompound;","\t\t\tif (Base.isPlainObject(arg)) {","\t\t\t\tsegments = arg.segments;","\t\t\t\tdata = arg.pathData;","\t\t\t} else if (Array.isArray(arg)) {","\t\t\t\tsegments = arg;","\t\t\t} else if (typeof arg === 'string') {","\t\t\t\tdata = arg;","\t\t\t}","\t\t\tif (segments) {","\t\t\t\tvar first = segments[0];","\t\t\t\tcompound = first && Array.isArray(first[0]);","\t\t\t} else if (data) {","\t\t\t\tcompound = (data.match(/m/gi) || []).length > 1","\t\t\t\t\t\t|| /z\\s*\\S+/i.test(data);","\t\t\t}","\t\t\tvar ctor = compound ? CompoundPath : Path;","\t\t\treturn new ctor(arg);","\t\t}","\t},","","\t_asPathItem: function() {","\t\treturn this;","\t},","","\tisClockwise: function() {","\t\treturn this.getArea() >= 0;","\t},","","\tsetClockwise: function(clockwise) {","\t\tif (this.isClockwise() != (clockwise = !!clockwise))","\t\t\tthis.reverse();","\t},","","\tsetPathData: function(data) {","","\t\tvar parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),","\t\t\tcoords,","\t\t\trelative = false,","\t\t\tprevious,","\t\t\tcontrol,","\t\t\tcurrent = new Point(),","\t\t\tstart = new Point();","","\t\tfunction getCoord(index, coord) {","\t\t\tvar val = +coords[index];","\t\t\tif (relative)","\t\t\t\tval += current[coord];","\t\t\treturn val;","\t\t}","","\t\tfunction getPoint(index) {","\t\t\treturn new Point(","\t\t\t\tgetCoord(index, 'x'),","\t\t\t\tgetCoord(index + 1, 'y')","\t\t\t);","\t\t}","","\t\tthis.clear();","","\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {","\t\t\tvar part = parts[i],","\t\t\t\tcommand = part[0],","\t\t\t\tlower = command.toLowerCase();","\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);","\t\t\tvar length = coords && coords.length;","\t\t\trelative = command === lower;","\t\t\tif (previous === 'z' && !/[mz]/.test(lower))","\t\t\t\tthis.moveTo(current);","\t\t\tswitch (lower) {","\t\t\tcase 'm':","\t\t\tcase 'l':","\t\t\t\tvar move = lower === 'm';","\t\t\t\tfor (var j = 0; j < length; j += 2) {","\t\t\t\t\tthis[move ? 'moveTo' : 'lineTo'](current = getPoint(j));","\t\t\t\t\tif (move) {","\t\t\t\t\t\tstart = current;","\t\t\t\t\t\tmove = false;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tcontrol = current;","\t\t\t\tbreak;","\t\t\tcase 'h':","\t\t\tcase 'v':","\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';","\t\t\t\tcurrent = current.clone();","\t\t\t\tfor (var j = 0; j < length; j++) {","\t\t\t\t\tcurrent[coord] = getCoord(j, coord);","\t\t\t\t\tthis.lineTo(current);","\t\t\t\t}","\t\t\t\tcontrol = current;","\t\t\t\tbreak;","\t\t\tcase 'c':","\t\t\t\tfor (var j = 0; j < length; j += 6) {","\t\t\t\t\tthis.cubicCurveTo(","\t\t\t\t\t\t\tgetPoint(j),","\t\t\t\t\t\t\tcontrol = getPoint(j + 2),","\t\t\t\t\t\t\tcurrent = getPoint(j + 4));","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 's':","\t\t\t\tfor (var j = 0; j < length; j += 4) {","\t\t\t\t\tthis.cubicCurveTo(","\t\t\t\t\t\t\t/[cs]/.test(previous)","\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)","\t\t\t\t\t\t\t\t\t: current,","\t\t\t\t\t\t\tcontrol = getPoint(j),","\t\t\t\t\t\t\tcurrent = getPoint(j + 2));","\t\t\t\t\tprevious = lower;","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'q':","\t\t\t\tfor (var j = 0; j < length; j += 4) {","\t\t\t\t\tthis.quadraticCurveTo(","\t\t\t\t\t\t\tcontrol = getPoint(j),","\t\t\t\t\t\t\tcurrent = getPoint(j + 2));","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 't':","\t\t\t\tfor (var j = 0; j < length; j += 2) {","\t\t\t\t\tthis.quadraticCurveTo(","\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)","\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)","\t\t\t\t\t\t\t\t\t: current),","\t\t\t\t\t\t\tcurrent = getPoint(j));","\t\t\t\t\tprevious = lower;","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'a':","\t\t\t\tfor (var j = 0; j < length; j += 7) {","\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),","\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),","\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'z':","\t\t\t\tthis.closePath(1e-12);","\t\t\t\tcurrent = start;","\t\t\t\tbreak;","\t\t\t}","\t\t\tprevious = lower;","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn !(this.hasFill() && this.hasStroke());","\t},","","\t_contains: function(point) {","\t\tvar winding = point.isInside(","\t\t\t\tthis.getBounds({ internal: true, handle: true }))","\t\t\t\t\t? this._getWinding(point)","\t\t\t\t\t: {};","\t\treturn winding.onPath || !!(this.getFillRule() === 'evenodd'","\t\t\t\t? winding.windingL & 1 || winding.windingR & 1","\t\t\t\t: winding.winding);","\t},","","\tgetIntersections: function(path, include, _matrix, _returnFirst) {","\t\tvar self = this === path || !path,","\t\t\tmatrix1 = this._matrix._orNullIfIdentity(),","\t\t\tmatrix2 = self ? matrix1","\t\t\t\t: (_matrix || path._matrix)._orNullIfIdentity();","\t\treturn self || this.getBounds(matrix1).intersects(","\t\t\t\tpath.getBounds(matrix2), 1e-12)","\t\t\t\t? Curve.getIntersections(","\t\t\t\t\t\tthis.getCurves(), !self && path.getCurves(), include,","\t\t\t\t\t\tmatrix1, matrix2, _returnFirst)","\t\t\t\t: [];","\t},","","\tgetCrossings: function(path) {","\t\treturn this.getIntersections(path, function(inter) {","\t\t\treturn inter.hasOverlap() || inter.isCrossing();","\t\t});","\t},","","\tgetNearestLocation: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcurves = this.getCurves(),","\t\t\tminDist = Infinity,","\t\t\tminLoc = null;","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar loc = curves[i].getNearestLocation(point);","\t\t\tif (loc._distance < minDist) {","\t\t\t\tminDist = loc._distance;","\t\t\t\tminLoc = loc;","\t\t\t}","\t\t}","\t\treturn minLoc;","\t},","","\tgetNearestPoint: function() {","\t\tvar loc = this.getNearestLocation.apply(this, arguments);","\t\treturn loc ? loc.getPoint() : loc;","\t},","","\tinterpolate: function(from, to, factor) {","\t\tvar isPath = !this._children,","\t\t\tname = isPath ? '_segments' : '_children',","\t\t\titemsFrom = from[name],","\t\t\titemsTo = to[name],","\t\t\titems = this[name];","\t\tif (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) {","\t\t\tthrow new Error('Invalid operands in interpolate() call: ' +","\t\t\t\t\tfrom + ', ' + to);","\t\t}","\t\tvar current = items.length,","\t\t\tlength = itemsTo.length;","\t\tif (current < length) {","\t\t\tvar ctor = isPath ? Segment : Path;","\t\t\tfor (var i = current; i < length; i++) {","\t\t\t\tthis.add(new ctor());","\t\t\t}","\t\t} else if (current > length) {","\t\t\tthis[isPath ? 'removeSegments' : 'removeChildren'](length, current);","\t\t}","\t\tfor (var i = 0; i < length; i++) {","\t\t\titems[i].interpolate(itemsFrom[i], itemsTo[i], factor);","\t\t}","\t\tif (isPath) {","\t\t\tthis.setClosed(from._closed);","\t\t\tthis._changed(9);","\t\t}","\t},","","\tcompare: function(path) {","\t\tvar ok = false;","\t\tif (path) {","\t\t\tvar paths1 = this._children || [this],","\t\t\t\tpaths2 = path._children ? path._children.slice() : [path],","\t\t\t\tlength1 = paths1.length,","\t\t\t\tlength2 = paths2.length,","\t\t\t\tmatched = [],","\t\t\t\tcount = 0;","\t\t\tok = true;","\t\t\tfor (var i1 = length1 - 1; i1 >= 0 && ok; i1--) {","\t\t\t\tvar path1 = paths1[i1];","\t\t\t\tok = false;","\t\t\t\tfor (var i2 = length2 - 1; i2 >= 0 && !ok; i2--) {","\t\t\t\t\tif (path1.compare(paths2[i2])) {","\t\t\t\t\t\tif (!matched[i2]) {","\t\t\t\t\t\t\tmatched[i2] = true;","\t\t\t\t\t\t\tcount++;","\t\t\t\t\t\t}","\t\t\t\t\t\tok = true;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tok = ok && count === length2;","\t\t}","\t\treturn ok;","\t},","","});","","var Path = PathItem.extend({","\t_class: 'Path',","\t_serializeFields: {","\t\tsegments: [],","\t\tclosed: false","\t},","","\tinitialize: function Path(arg) {","\t\tthis._closed = false;","\t\tthis._segments = [];","\t\tthis._version = 0;","\t\tvar segments = Array.isArray(arg)","\t\t\t? typeof arg[0] === 'object'","\t\t\t\t? arg","\t\t\t\t: arguments","\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined","\t\t\t\t\t|| arg.point !== undefined))","\t\t\t\t? arguments","\t\t\t\t: null;","\t\tif (segments && segments.length > 0) {","\t\t\tthis.setSegments(segments);","\t\t} else {","\t\t\tthis._curves = undefined;","\t\t\tthis._segmentSelection = 0;","\t\t\tif (!segments && typeof arg === 'string') {","\t\t\t\tthis.setPathData(arg);","\t\t\t\targ = null;","\t\t\t}","\t\t}","\t\tthis._initialize(!segments && arg);","\t},","","\t_equals: function(item) {","\t\treturn this._closed === item._closed","\t\t\t\t&& Base.equals(this._segments, item._segments);","\t},","","\tcopyContent: function(source) {","\t\tthis.setSegments(source._segments);","\t\tthis._closed = source._closed;","\t},","","\t_changed: function _changed(flags) {","\t\t_changed.base.call(this, flags);","\t\tif (flags & 8) {","\t\t\tthis._length = this._area = undefined;","\t\t\tif (flags & 16) {","\t\t\t\tthis._version++;","\t\t\t} else if (this._curves) {","\t\t\t   for (var i = 0, l = this._curves.length; i < l; i++)","\t\t\t\t\tthis._curves[i]._changed();","\t\t\t}","\t\t} else if (flags & 32) {","\t\t\tthis._bounds = undefined;","\t\t}","\t},","","\tgetStyle: function() {","\t\tvar parent = this._parent;","\t\treturn (parent instanceof CompoundPath ? parent : this)._style;","\t},","","\tgetSegments: function() {","\t\treturn this._segments;","\t},","","\tsetSegments: function(segments) {","\t\tvar fullySelected = this.isFullySelected(),","\t\t\tlength = segments && segments.length;","\t\tthis._segments.length = 0;","\t\tthis._segmentSelection = 0;","\t\tthis._curves = undefined;","\t\tif (length) {","\t\t\tvar last = segments[length - 1];","\t\t\tif (typeof last === 'boolean') {","\t\t\t\tthis.setClosed(last);","\t\t\t\tlength--;","\t\t\t}","\t\t\tthis._add(Segment.readList(segments, 0, {}, length));","\t\t}","\t\tif (fullySelected)","\t\t\tthis.setFullySelected(true);","\t},","","\tgetFirstSegment: function() {","\t\treturn this._segments[0];","\t},","","\tgetLastSegment: function() {","\t\treturn this._segments[this._segments.length - 1];","\t},","","\tgetCurves: function() {","\t\tvar curves = this._curves,","\t\t\tsegments = this._segments;","\t\tif (!curves) {","\t\t\tvar length = this._countCurves();","\t\t\tcurves = this._curves = new Array(length);","\t\t\tfor (var i = 0; i < length; i++)","\t\t\t\tcurves[i] = new Curve(this, segments[i],","\t\t\t\t\tsegments[i + 1] || segments[0]);","\t\t}","\t\treturn curves;","\t},","","\tgetFirstCurve: function() {","\t\treturn this.getCurves()[0];","\t},","","\tgetLastCurve: function() {","\t\tvar curves = this.getCurves();","\t\treturn curves[curves.length - 1];","\t},","","\tisClosed: function() {","\t\treturn this._closed;","\t},","","\tsetClosed: function(closed) {","\t\tif (this._closed != (closed = !!closed)) {","\t\t\tthis._closed = closed;","\t\t\tif (this._curves) {","\t\t\t\tvar length = this._curves.length = this._countCurves();","\t\t\t\tif (closed)","\t\t\t\t\tthis._curves[length - 1] = new Curve(this,","\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);","\t\t\t}","\t\t\tthis._changed(25);","\t\t}","\t}","}, {","\tbeans: true,","","\tgetPathData: function(_matrix, _precision) {","\t\tvar segments = this._segments,","\t\t\tlength = segments.length,","\t\t\tf = new Formatter(_precision),","\t\t\tcoords = new Array(6),","\t\t\tfirst = true,","\t\t\tcurX, curY,","\t\t\tprevX, prevY,","\t\t\tinX, inY,","\t\t\toutX, outY,","\t\t\tparts = [];","","\t\tfunction addSegment(segment, skipLine) {","\t\t\tsegment._transformCoordinates(_matrix, coords);","\t\t\tcurX = coords[0];","\t\t\tcurY = coords[1];","\t\t\tif (first) {","\t\t\t\tparts.push('M' + f.pair(curX, curY));","\t\t\t\tfirst = false;","\t\t\t} else {","\t\t\t\tinX = coords[2];","\t\t\t\tinY = coords[3];","\t\t\t\tif (inX === curX && inY === curY","\t\t\t\t\t\t&& outX === prevX && outY === prevY) {","\t\t\t\t\tif (!skipLine) {","\t\t\t\t\t\tvar dx = curX - prevX,","\t\t\t\t\t\t\tdy = curY - prevY;","\t\t\t\t\t\tparts.push(","\t\t\t\t\t\t\t  dx === 0 ? 'v' + f.number(dy)","\t\t\t\t\t\t\t: dy === 0 ? 'h' + f.number(dx)","\t\t\t\t\t\t\t: 'l' + f.pair(dx, dy));","\t\t\t\t\t}","\t\t\t\t} else {","\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)","\t\t\t\t\t\t\t + ' ' + f.pair( inX - prevX,  inY - prevY)","\t\t\t\t\t\t\t + ' ' + f.pair(curX - prevX, curY - prevY));","\t\t\t\t}","\t\t\t}","\t\t\tprevX = curX;","\t\t\tprevY = curY;","\t\t\toutX = coords[4];","\t\t\toutY = coords[5];","\t\t}","","\t\tif (!length)","\t\t\treturn '';","","\t\tfor (var i = 0; i < length; i++)","\t\t\taddSegment(segments[i]);","\t\tif (this._closed && length > 0) {","\t\t\taddSegment(segments[0], true);","\t\t\tparts.push('z');","\t\t}","\t\treturn parts.join('');","\t},","","\tisEmpty: function() {","\t\treturn !this._segments.length;","\t},","","\t_transformContent: function(matrix) {","\t\tvar segments = this._segments,","\t\t\tcoords = new Array(6);","\t\tfor (var i = 0, l = segments.length; i < l; i++)","\t\t\tsegments[i]._transformCoordinates(matrix, coords, true);","\t\treturn true;","\t},","","\t_add: function(segs, index) {","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tamount = segs.length,","\t\t\tappend = index == null,","\t\t\tindex = append ? segments.length : index;","\t\tfor (var i = 0; i < amount; i++) {","\t\t\tvar segment = segs[i];","\t\t\tif (segment._path)","\t\t\t\tsegment = segs[i] = segment.clone();","\t\t\tsegment._path = this;","\t\t\tsegment._index = index + i;","\t\t\tif (segment._selection)","\t\t\t\tthis._updateSelection(segment, 0, segment._selection);","\t\t}","\t\tif (append) {","\t\t\tsegments.push.apply(segments, segs);","\t\t} else {","\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));","\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)","\t\t\t\tsegments[i]._index = i;","\t\t}","\t\tif (curves) {","\t\t\tvar total = this._countCurves(),","\t\t\t\tstart = index > 0 && index + amount - 1 === total ? index - 1","\t\t\t\t\t: index,","\t\t\t\tinsert = start,","\t\t\t\tend = Math.min(start + amount, total);","\t\t\tif (segs._curves) {","\t\t\t\tcurves.splice.apply(curves, [start, 0].concat(segs._curves));","\t\t\t\tinsert += segs._curves.length;","\t\t\t}","\t\t\tfor (var i = insert; i < end; i++)","\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));","\t\t\tthis._adjustCurves(start, end);","\t\t}","\t\tthis._changed(25);","\t\treturn segs;","\t},","","\t_adjustCurves: function(start, end) {","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tcurve;","\t\tfor (var i = start; i < end; i++) {","\t\t\tcurve = curves[i];","\t\t\tcurve._path = this;","\t\t\tcurve._segment1 = segments[i];","\t\t\tcurve._segment2 = segments[i + 1] || segments[0];","\t\t\tcurve._changed();","\t\t}","\t\tif (curve = curves[this._closed && !start ? segments.length - 1","\t\t\t\t: start - 1]) {","\t\t\tcurve._segment2 = segments[start] || segments[0];","\t\t\tcurve._changed();","\t\t}","\t\tif (curve = curves[end]) {","\t\t\tcurve._segment1 = segments[end];","\t\t\tcurve._changed();","\t\t}","\t},","","\t_countCurves: function() {","\t\tvar length = this._segments.length;","\t\treturn !this._closed && length > 0 ? length - 1 : length;","\t},","","\tadd: function(segment1 ) {","\t\treturn arguments.length > 1 && typeof segment1 !== 'number'","\t\t\t? this._add(Segment.readList(arguments))","\t\t\t: this._add([ Segment.read(arguments) ])[0];","\t},","","\tinsert: function(index, segment1 ) {","\t\treturn arguments.length > 2 && typeof segment1 !== 'number'","\t\t\t? this._add(Segment.readList(arguments, 1), index)","\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];","\t},","","\taddSegment: function() {","\t\treturn this._add([ Segment.read(arguments) ])[0];","\t},","","\tinsertSegment: function(index ) {","\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];","\t},","","\taddSegments: function(segments) {","\t\treturn this._add(Segment.readList(segments));","\t},","","\tinsertSegments: function(index, segments) {","\t\treturn this._add(Segment.readList(segments), index);","\t},","","\tremoveSegment: function(index) {","\t\treturn this.removeSegments(index, index + 1)[0] || null;","\t},","","\tremoveSegments: function(start, end, _includeCurves) {","\t\tstart = start || 0;","\t\tend = Base.pick(end, this._segments.length);","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tcount = segments.length,","\t\t\tremoved = segments.splice(start, end - start),","\t\t\tamount = removed.length;","\t\tif (!amount)","\t\t\treturn removed;","\t\tfor (var i = 0; i < amount; i++) {","\t\t\tvar segment = removed[i];","\t\t\tif (segment._selection)","\t\t\t\tthis._updateSelection(segment, segment._selection, 0);","\t\t\tsegment._index = segment._path = null;","\t\t}","\t\tfor (var i = start, l = segments.length; i < l; i++)","\t\t\tsegments[i]._index = i;","\t\tif (curves) {","\t\t\tvar index = start > 0 && end === count + (this._closed ? 1 : 0)","\t\t\t\t\t? start - 1","\t\t\t\t\t: start,","\t\t\t\tcurves = curves.splice(index, amount);","\t\t\tfor (var i = curves.length - 1; i >= 0; i--)","\t\t\t\tcurves[i]._path = null;","\t\t\tif (_includeCurves)","\t\t\t\tremoved._curves = curves.slice(1);","\t\t\tthis._adjustCurves(index, index);","\t\t}","\t\tthis._changed(25);","\t\treturn removed;","\t},","","\tclear: '#removeSegments',","","\thasHandles: function() {","\t\tvar segments = this._segments;","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tif (segments[i].hasHandles())","\t\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tclearHandles: function() {","\t\tvar segments = this._segments;","\t\tfor (var i = 0, l = segments.length; i < l; i++)","\t\t\tsegments[i].clearHandles();","\t},","","\tgetLength: function() {","\t\tif (this._length == null) {","\t\t\tvar curves = this.getCurves(),","\t\t\t\tlength = 0;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++)","\t\t\t\tlength += curves[i].getLength();","\t\t\tthis._length = length;","\t\t}","\t\treturn this._length;","\t},","","\tgetArea: function() {","\t\tvar area = this._area;","\t\tif (area == null) {","\t\t\tvar segments = this._segments,","\t\t\t\tclosed = this._closed;","\t\t\tarea = 0;","\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\t\tvar last = i + 1 === l;","\t\t\t\tarea += Curve.getArea(Curve.getValues(","\t\t\t\t\t\tsegments[i], segments[last ? 0 : i + 1],","\t\t\t\t\t\tnull, last && !closed));","\t\t\t}","\t\t\tthis._area = area;","\t\t}","\t\treturn area;","\t},","","\tisFullySelected: function() {","\t\tvar length = this._segments.length;","\t\treturn this.isSelected() && length > 0 && this._segmentSelection","\t\t\t\t=== length * 7;","\t},","","\tsetFullySelected: function(selected) {","\t\tif (selected)","\t\t\tthis._selectSegments(true);","\t\tthis.setSelected(selected);","\t},","","\tsetSelection: function setSelection(selection) {","\t\tif (!(selection & 1))","\t\t\tthis._selectSegments(false);","\t\tsetSelection.base.call(this, selection);","\t},","","\t_selectSegments: function(selected) {","\t\tvar segments = this._segments,","\t\t\tlength = segments.length,","\t\t\tselection = selected ? 7 : 0;","\t\tthis._segmentSelection = selection * length;","\t\tfor (var i = 0; i < length; i++)","\t\t\tsegments[i]._selection = selection;","\t},","","\t_updateSelection: function(segment, oldSelection, newSelection) {","\t\tsegment._selection = newSelection;","\t\tvar selection = this._segmentSelection += newSelection - oldSelection;","\t\tif (selection > 0)","\t\t\tthis.setSelected(true);","\t},","","\tdivideAt: function(location) {","\t\tvar loc = this.getLocationAt(location),","\t\t\tcurve;","\t\treturn loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset()))","\t\t\t\t? curve._segment1","\t\t\t\t: null;","\t},","","\tsplitAt: function(location) {","\t\tvar loc = this.getLocationAt(location),","\t\t\tindex = loc && loc.index,","\t\t\ttime = loc && loc.time,","\t\t\ttMin = 1e-8,","\t\t\ttMax = 1 - tMin;","\t\tif (time > tMax) {","\t\t\tindex++;","\t\t\ttime = 0;","\t\t}","\t\tvar curves = this.getCurves();","\t\tif (index >= 0 && index < curves.length) {","\t\t\tif (time >= tMin) {","\t\t\t\tcurves[index++].divideAtTime(time);","\t\t\t}","\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),","\t\t\t\tpath;","\t\t\tif (this._closed) {","\t\t\t\tthis.setClosed(false);","\t\t\t\tpath = this;","\t\t\t} else {","\t\t\t\tpath = new Path(Item.NO_INSERT);","\t\t\t\tpath.insertAbove(this);","\t\t\t\tpath.copyAttributes(this);","\t\t\t}","\t\t\tpath._add(segs, 0);","\t\t\tthis.addSegment(segs[0]);","\t\t\treturn path;","\t\t}","\t\treturn null;","\t},","","\tsplit: function(index, time) {","\t\tvar curve,","\t\t\tlocation = time === undefined ? index","\t\t\t\t: (curve = this.getCurves()[index])","\t\t\t\t\t&& curve.getLocationAtTime(time);","\t\treturn location != null ? this.splitAt(location) : null;","\t},","","\tjoin: function(path, tolerance) {","\t\tvar epsilon = tolerance || 0;","\t\tif (path && path !== this) {","\t\t\tvar segments = path._segments,","\t\t\t\tlast1 = this.getLastSegment(),","\t\t\t\tlast2 = path.getLastSegment();","\t\t\tif (!last2)","\t\t\t\treturn this;","\t\t\tif (last1 && last1._point.isClose(last2._point, epsilon))","\t\t\t\tpath.reverse();","\t\t\tvar first2 = path.getFirstSegment();","\t\t\tif (last1 && last1._point.isClose(first2._point, epsilon)) {","\t\t\t\tlast1.setHandleOut(first2._handleOut);","\t\t\t\tthis._add(segments.slice(1));","\t\t\t} else {","\t\t\t\tvar first1 = this.getFirstSegment();","\t\t\t\tif (first1 && first1._point.isClose(first2._point, epsilon))","\t\t\t\t\tpath.reverse();","\t\t\t\tlast2 = path.getLastSegment();","\t\t\t\tif (first1 && first1._point.isClose(last2._point, epsilon)) {","\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);","\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);","\t\t\t\t} else {","\t\t\t\t\tthis._add(segments.slice());","\t\t\t\t}","\t\t\t}","\t\t\tif (path._closed)","\t\t\t\tthis._add([segments[0]]);","\t\t\tpath.remove();","\t\t}","\t\tvar first = this.getFirstSegment(),","\t\t\tlast = this.getLastSegment();","\t\tif (first !== last && first._point.isClose(last._point, epsilon)) {","\t\t\tfirst.setHandleIn(last._handleIn);","\t\t\tlast.remove();","\t\t\tthis.setClosed(true);","\t\t}","\t\treturn this;","\t},","","\treduce: function(options) {","\t\tvar curves = this.getCurves(),","\t\t\tsimplify = options && options.simplify,","\t\t\ttolerance = simplify ? 1e-7 : 0;","\t\tfor (var i = curves.length - 1; i >= 0; i--) {","\t\t\tvar curve = curves[i];","\t\t\tif (!curve.hasHandles() && (!curve.hasLength(tolerance)","\t\t\t\t\t|| simplify && curve.isCollinear(curve.getNext())))","\t\t\t\tcurve.remove();","\t\t}","\t\treturn this;","\t},","","\treverse: function() {","\t\tthis._segments.reverse();","\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {","\t\t\tvar segment = this._segments[i];","\t\t\tvar handleIn = segment._handleIn;","\t\t\tsegment._handleIn = segment._handleOut;","\t\t\tsegment._handleOut = handleIn;","\t\t\tsegment._index = i;","\t\t}","\t\tthis._curves = null;","\t\tthis._changed(9);","\t},","","\tflatten: function(flatness) {","\t\tvar flattener = new PathFlattener(this, flatness || 0.25, 256, true),","\t\t\tparts = flattener.parts,","\t\t\tlength = parts.length,","\t\t\tsegments = [];","\t\tfor (var i = 0; i < length; i++) {","\t\t\tsegments.push(new Segment(parts[i].curve.slice(0, 2)));","\t\t}","\t\tif (!this._closed && length > 0) {","\t\t\tsegments.push(new Segment(parts[length - 1].curve.slice(6)));","\t\t}","\t\tthis.setSegments(segments);","\t},","","\tsimplify: function(tolerance) {","\t\tvar segments = new PathFitter(this).fit(tolerance || 2.5);","\t\tif (segments)","\t\t\tthis.setSegments(segments);","\t\treturn !!segments;","\t},","","\tsmooth: function(options) {","\t\tvar that = this,","\t\t\topts = options || {},","\t\t\ttype = opts.type || 'asymmetric',","\t\t\tsegments = this._segments,","\t\t\tlength = segments.length,","\t\t\tclosed = this._closed;","","\t\tfunction getIndex(value, _default) {","\t\t\tvar index = value && value.index;","\t\t\tif (index != null) {","\t\t\t\tvar path = value.path;","\t\t\t\tif (path && path !== that)","\t\t\t\t\tthrow new Error(value._class + ' ' + index + ' of ' + path","\t\t\t\t\t\t\t+ ' is not part of ' + that);","\t\t\t\tif (_default && value instanceof Curve)","\t\t\t\t\tindex++;","\t\t\t} else {","\t\t\t\tindex = typeof value === 'number' ? value : _default;","\t\t\t}","\t\t\treturn Math.min(index < 0 && closed","\t\t\t\t\t? index % length","\t\t\t\t\t: index < 0 ? index + length : index, length - 1);","\t\t}","","\t\tvar loop = closed && opts.from === undefined && opts.to === undefined,","\t\t\tfrom = getIndex(opts.from, 0),","\t\t\tto = getIndex(opts.to, length - 1);","","\t\tif (from > to) {","\t\t\tif (closed) {","\t\t\t\tfrom -= length;","\t\t\t} else {","\t\t\t\tvar tmp = from;","\t\t\t\tfrom = to;","\t\t\t\tto = tmp;","\t\t\t}","\t\t}","\t\tif (/^(?:asymmetric|continuous)$/.test(type)) {","\t\t\tvar asymmetric = type === 'asymmetric',","\t\t\t\tmin = Math.min,","\t\t\t\tamount = to - from + 1,","\t\t\t\tn = amount - 1,","\t\t\t\tpadding = loop ? min(amount, 4) : 1,","\t\t\t\tpaddingLeft = padding,","\t\t\t\tpaddingRight = padding,","\t\t\t\tknots = [];","\t\t\tif (!closed) {","\t\t\t\tpaddingLeft = min(1, from);","\t\t\t\tpaddingRight = min(1, length - to - 1);","\t\t\t}","\t\t\tn += paddingLeft + paddingRight;","\t\t\tif (n <= 1)","\t\t\t\treturn;","\t\t\tfor (var i = 0, j = from - paddingLeft; i <= n; i++, j++) {","\t\t\t\tknots[i] = segments[(j < 0 ? j + length : j) % length]._point;","\t\t\t}","","\t\t\tvar x = knots[0]._x + 2 * knots[1]._x,","\t\t\t\ty = knots[0]._y + 2 * knots[1]._y,","\t\t\t\tf = 2,","\t\t\t\tn_1 = n - 1,","\t\t\t\trx = [x],","\t\t\t\try = [y],","\t\t\t\trf = [f],","\t\t\t\tpx = [],","\t\t\t\tpy = [];","\t\t\tfor (var i = 1; i < n; i++) {","\t\t\t\tvar internal = i < n_1,","\t\t\t\t\ta = internal ? 1 : asymmetric ? 1 : 2,","\t\t\t\t\tb = internal ? 4 : asymmetric ? 2 : 7,","\t\t\t\t\tu = internal ? 4 : asymmetric ? 3 : 8,","\t\t\t\t\tv = internal ? 2 : asymmetric ? 0 : 1,","\t\t\t\t\tm = a / f;","\t\t\t\tf = rf[i] = b - m;","\t\t\t\tx = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;","\t\t\t\ty = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;","\t\t\t}","","\t\t\tpx[n_1] = rx[n_1] / rf[n_1];","\t\t\tpy[n_1] = ry[n_1] / rf[n_1];","\t\t\tfor (var i = n - 2; i >= 0; i--) {","\t\t\t\tpx[i] = (rx[i] - px[i + 1]) / rf[i];","\t\t\t\tpy[i] = (ry[i] - py[i + 1]) / rf[i];","\t\t\t}","\t\t\tpx[n] = (3 * knots[n]._x - px[n_1]) / 2;","\t\t\tpy[n] = (3 * knots[n]._y - py[n_1]) / 2;","","\t\t\tfor (var i = paddingLeft, max = n - paddingRight, j = from;","\t\t\t\t\ti <= max; i++, j++) {","\t\t\t\tvar segment = segments[j < 0 ? j + length : j],","\t\t\t\t\tpt = segment._point,","\t\t\t\t\thx = px[i] - pt._x,","\t\t\t\t\thy = py[i] - pt._y;","\t\t\t\tif (loop || i < max)","\t\t\t\t\tsegment.setHandleOut(hx, hy);","\t\t\t\tif (loop || i > paddingLeft)","\t\t\t\t\tsegment.setHandleIn(-hx, -hy);","\t\t\t}","\t\t} else {","\t\t\tfor (var i = from; i <= to; i++) {","\t\t\t\tsegments[i < 0 ? i + length : i].smooth(opts,","\t\t\t\t\t\t!loop && i === from, !loop && i === to);","\t\t\t}","\t\t}","\t},","","\ttoShape: function(insert) {","\t\tif (!this._closed)","\t\t\treturn null;","","\t\tvar segments = this._segments,","\t\t\ttype,","\t\t\tsize,","\t\t\tradius,","\t\t\ttopCenter;","","\t\tfunction isCollinear(i, j) {","\t\t\tvar seg1 = segments[i],","\t\t\t\tseg2 = seg1.getNext(),","\t\t\t\tseg3 = segments[j],","\t\t\t\tseg4 = seg3.getNext();","\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()","\t\t\t\t\t&& seg3._handleOut.isZero() && seg4._handleIn.isZero()","\t\t\t\t\t&& seg2._point.subtract(seg1._point).isCollinear(","\t\t\t\t\t\tseg4._point.subtract(seg3._point));","\t\t}","","\t\tfunction isOrthogonal(i) {","\t\t\tvar seg2 = segments[i],","\t\t\t\tseg1 = seg2.getPrevious(),","\t\t\t\tseg3 = seg2.getNext();","\t\t\treturn seg1._handleOut.isZero() && seg2._handleIn.isZero()","\t\t\t\t\t&& seg2._handleOut.isZero() && seg3._handleIn.isZero()","\t\t\t\t\t&& seg2._point.subtract(seg1._point).isOrthogonal(","\t\t\t\t\t\tseg3._point.subtract(seg2._point));","\t\t}","","\t\tfunction isArc(i) {","\t\t\tvar seg1 = segments[i],","\t\t\t\tseg2 = seg1.getNext(),","\t\t\t\thandle1 = seg1._handleOut,","\t\t\t\thandle2 = seg2._handleIn,","\t\t\t\tkappa = 0.5522847498307936;","\t\t\tif (handle1.isOrthogonal(handle2)) {","\t\t\t\tvar pt1 = seg1._point,","\t\t\t\t\tpt2 = seg2._point,","\t\t\t\t\tcorner = new Line(pt1, handle1, true).intersect(","\t\t\t\t\t\t\tnew Line(pt2, handle2, true), true);","\t\t\t\treturn corner && Numerical.isZero(handle1.getLength() /","\t\t\t\t\t\tcorner.subtract(pt1).getLength() - kappa)","\t\t\t\t\t&& Numerical.isZero(handle2.getLength() /","\t\t\t\t\t\tcorner.subtract(pt2).getLength() - kappa);","\t\t\t}","\t\t\treturn false;","\t\t}","","\t\tfunction getDistance(i, j) {","\t\t\treturn segments[i]._point.getDistance(segments[j]._point);","\t\t}","","\t\tif (!this.hasHandles() && segments.length === 4","\t\t\t\t&& isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {","\t\t\ttype = Shape.Rectangle;","\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));","\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);","\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)","\t\t\t\t&& isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {","\t\t\ttype = Shape.Rectangle;","\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));","\t\t\tradius = size.subtract(new Size(getDistance(0, 7),","\t\t\t\t\tgetDistance(1, 2))).divide(2);","\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);","\t\t} else if (segments.length === 4","\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {","\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {","\t\t\t\ttype = Shape.Circle;","\t\t\t\tradius = getDistance(0, 2) / 2;","\t\t\t} else {","\t\t\t\ttype = Shape.Ellipse;","\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);","\t\t\t}","\t\t\ttopCenter = segments[1]._point;","\t\t}","","\t\tif (type) {","\t\t\tvar center = this.getPosition(true),","\t\t\t\tshape = new type({","\t\t\t\t\tcenter: center,","\t\t\t\t\tsize: size,","\t\t\t\t\tradius: radius,","\t\t\t\t\tinsert: false","\t\t\t\t});","\t\t\tshape.copyAttributes(this, true);","\t\t\tshape._matrix.prepend(this._matrix);","\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);","\t\t\tif (insert === undefined || insert)","\t\t\t\tshape.insertAbove(this);","\t\t\treturn shape;","\t\t}","\t\treturn null;","\t},","","\ttoPath: '#clone',","","\tcompare: function compare(path) {","\t\tif (!path || path instanceof CompoundPath)","\t\t\treturn compare.base.call(this, path);","\t\tvar curves1 = this.getCurves(),","\t\t\tcurves2 = path.getCurves(),","\t\t\tlength1 = curves1.length,","\t\t\tlength2 = curves2.length;","\t\tif (!length1 || !length2) {","\t\t\treturn length1 == length2;","\t\t}","\t\tvar v1 = curves1[0].getValues(),","\t\t\tvalues2 = [],","\t\t\tpos1 = 0, pos2,","\t\t\tend1 = 0, end2;","\t\tfor (var i = 0; i < length2; i++) {","\t\t\tvar v2 = curves2[i].getValues();","\t\t\tvalues2.push(v2);","\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);","\t\t\tif (overlaps) {","\t\t\t\tpos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;","\t\t\t\tend2 = overlaps[0][1];","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tvar abs = Math.abs,","\t\t\tepsilon = 1e-8,","\t\t\tv2 = values2[pos2],","\t\t\tstart2;","\t\twhile (v1 && v2) {","\t\t\tvar overlaps = Curve.getOverlaps(v1, v2);","\t\t\tif (overlaps) {","\t\t\t\tvar t1 = overlaps[0][0];","\t\t\t\tif (abs(t1 - end1) < epsilon) {","\t\t\t\t\tend1 = overlaps[1][0];","\t\t\t\t\tif (end1 === 1) {","\t\t\t\t\t\tv1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;","\t\t\t\t\t\tend1 = 0;","\t\t\t\t\t}","\t\t\t\t\tvar t2 = overlaps[0][1];","\t\t\t\t\tif (abs(t2 - end2) < epsilon) {","\t\t\t\t\t\tif (!start2)","\t\t\t\t\t\t\tstart2 = [pos2, t2];","\t\t\t\t\t\tend2 = overlaps[1][1];","\t\t\t\t\t\tif (end2 === 1) {","\t\t\t\t\t\t\tif (++pos2 >= length2)","\t\t\t\t\t\t\t\tpos2 = 0;","\t\t\t\t\t\t\tv2 = values2[pos2] || curves2[pos2].getValues();","\t\t\t\t\t\t\tend2 = 0;","\t\t\t\t\t\t}","\t\t\t\t\t\tif (!v1) {","\t\t\t\t\t\t\treturn start2[0] === pos2 && start2[1] === end2;","\t\t\t\t\t\t}","\t\t\t\t\t\tcontinue;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tbreak;","\t\t}","\t\treturn false;","\t},","","\t_hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {","\t\tvar that = this,","\t\t\tstyle = this.getStyle(),","\t\t\tsegments = this._segments,","\t\t\tnumSegments = segments.length,","\t\t\tclosed = this._closed,","\t\t\ttolerancePadding = options._tolerancePadding,","\t\t\tstrokePadding = tolerancePadding,","\t\t\tjoin, cap, miterLimit,","\t\t\tarea, loc, res,","\t\t\thitStroke = options.stroke && style.hasStroke(),","\t\t\thitFill = options.fill && style.hasFill(),","\t\t\thitCurves = options.curves,","\t\t\tstrokeRadius = hitStroke","\t\t\t\t\t? style.getStrokeWidth() / 2","\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves","\t\t\t\t\t\t? 0 : null;","\t\tif (strokeRadius !== null) {","\t\t\tif (strokeRadius > 0) {","\t\t\t\tjoin = style.getStrokeJoin();","\t\t\t\tcap = style.getStrokeCap();","\t\t\t\tmiterLimit = style.getMiterLimit();","\t\t\t\tstrokePadding = strokePadding.add(","\t\t\t\t\tPath._getStrokePadding(strokeRadius, strokeMatrix));","\t\t\t} else {","\t\t\t\tjoin = cap = 'round';","\t\t\t}","\t\t}","","\t\tfunction isCloseEnough(pt, padding) {","\t\t\treturn point.subtract(pt).divide(padding).length <= 1;","\t\t}","","\t\tfunction checkSegmentPoint(seg, pt, name) {","\t\t\tif (!options.selected || pt.isSelected()) {","\t\t\t\tvar anchor = seg._point;","\t\t\t\tif (pt !== anchor)","\t\t\t\t\tpt = pt.add(anchor);","\t\t\t\tif (isCloseEnough(pt, strokePadding)) {","\t\t\t\t\treturn new HitResult(name, that, {","\t\t\t\t\t\tsegment: seg,","\t\t\t\t\t\tpoint: pt","\t\t\t\t\t});","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfunction checkSegmentPoints(seg, ends) {","\t\t\treturn (ends || options.segments)","\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')","\t\t\t\t|| (!ends && options.handles) && (","\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||","\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));","\t\t}","","\t\tfunction addToArea(point) {","\t\t\tarea.add(point);","\t\t}","","\t\tfunction checkSegmentStroke(segment) {","\t\t\tvar isJoin = closed || segment._index > 0","\t\t\t\t\t&& segment._index < numSegments - 1;","\t\t\tif ((isJoin ? join : cap) === 'round') {","\t\t\t\treturn isCloseEnough(segment._point, strokePadding);","\t\t\t} else {","\t\t\t\tarea = new Path({ internal: true, closed: true });","\t\t\t\tif (isJoin) {","\t\t\t\t\tif (!segment.isSmooth()) {","\t\t\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius,","\t\t\t\t\t\t\t   miterLimit, null, strokeMatrix, addToArea, true);","\t\t\t\t\t}","\t\t\t\t} else if (cap === 'square') {","\t\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, null,","\t\t\t\t\t\t\tstrokeMatrix, addToArea, true);","\t\t\t\t}","\t\t\t\tif (!area.isEmpty()) {","\t\t\t\t\tvar loc;","\t\t\t\t\treturn area.contains(point)","\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))","\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tif (options.ends && !options.segments && !closed) {","\t\t\tif (res = checkSegmentPoints(segments[0], true)","\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))","\t\t\t\treturn res;","\t\t} else if (options.segments || options.handles) {","\t\t\tfor (var i = 0; i < numSegments; i++)","\t\t\t\tif (res = checkSegmentPoints(segments[i]))","\t\t\t\t\treturn res;","\t\t}","\t\tif (strokeRadius !== null) {","\t\t\tloc = this.getNearestLocation(point);","\t\t\tif (loc) {","\t\t\t\tvar time = loc.getTime();","\t\t\t\tif (time === 0 || time === 1 && numSegments > 1) {","\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))","\t\t\t\t\t\tloc = null;","\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {","\t\t\t\t\tloc = null;","\t\t\t\t}","\t\t\t}","\t\t\tif (!loc && join === 'miter' && numSegments > 1) {","\t\t\t\tfor (var i = 0; i < numSegments; i++) {","\t\t\t\t\tvar segment = segments[i];","\t\t\t\t\tif (point.getDistance(segment._point)","\t\t\t\t\t\t\t<= miterLimit * strokeRadius","\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {","\t\t\t\t\t\tloc = segment.getLocation();","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn !loc && hitFill && this._contains(point)","\t\t\t\t|| loc && !hitStroke && !hitCurves","\t\t\t\t\t? new HitResult('fill', this)","\t\t\t\t\t: loc","\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {","\t\t\t\t\t\t\tlocation: loc,","\t\t\t\t\t\t\tpoint: loc.getPoint()","\t\t\t\t\t\t})","\t\t\t\t\t\t: null;","\t}","","}, Base.each(Curve._evaluateMethods,","\tfunction(name) {","\t\tthis[name + 'At'] = function(offset) {","\t\t\tvar loc = this.getLocationAt(offset);","\t\t\treturn loc && loc[name]();","\t\t};","\t},","{","\tbeans: false,","","\tgetLocationOf: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcurves = this.getCurves();","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar loc = curves[i].getLocationOf(point);","\t\t\tif (loc)","\t\t\t\treturn loc;","\t\t}","\t\treturn null;","\t},","","\tgetOffsetOf: function() {","\t\tvar loc = this.getLocationOf.apply(this, arguments);","\t\treturn loc ? loc.getOffset() : null;","\t},","","\tgetLocationAt: function(offset) {","\t\tif (typeof offset === 'number') {","\t\t\tvar curves = this.getCurves(),","\t\t\t\tlength = 0;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\t\tvar start = length,","\t\t\t\t\tcurve = curves[i];","\t\t\t\tlength += curve.getLength();","\t\t\t\tif (length > offset) {","\t\t\t\t\treturn curve.getLocationAt(offset - start);","\t\t\t\t}","\t\t\t}","\t\t\tif (curves.length > 0 && offset <= this.getLength()) {","\t\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);","\t\t\t}","\t\t} else if (offset && offset.getPath && offset.getPath() === this) {","\t\t\treturn offset;","\t\t}","\t\treturn null;","\t}","","}),","new function() {","","\tfunction drawHandles(ctx, segments, matrix, size) {","\t\tvar half = size / 2,","\t\t\tcoords = new Array(6),","\t\t\tpX, pY;","","\t\tfunction drawHandle(index) {","\t\t\tvar hX = coords[index],","\t\t\t\thY = coords[index + 1];","\t\t\tif (pX != hX || pY != hY) {","\t\t\t\tctx.beginPath();","\t\t\t\tctx.moveTo(pX, pY);","\t\t\t\tctx.lineTo(hX, hY);","\t\t\t\tctx.stroke();","\t\t\t\tctx.beginPath();","\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);","\t\t\t\tctx.fill();","\t\t\t}","\t\t}","","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar segment = segments[i],","\t\t\t\tselection = segment._selection;","\t\t\tsegment._transformCoordinates(matrix, coords);","\t\t\tpX = coords[0];","\t\t\tpY = coords[1];","\t\t\tif (selection & 2)","\t\t\t\tdrawHandle(2);","\t\t\tif (selection & 4)","\t\t\t\tdrawHandle(4);","\t\t\tctx.fillRect(pX - half, pY - half, size, size);","\t\t\tif (!(selection & 1)) {","\t\t\t\tvar fillStyle = ctx.fillStyle;","\t\t\t\tctx.fillStyle = '#ffffff';","\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);","\t\t\t\tctx.fillStyle = fillStyle;","\t\t\t}","\t\t}","\t}","","\tfunction drawSegments(ctx, path, matrix) {","\t\tvar segments = path._segments,","\t\t\tlength = segments.length,","\t\t\tcoords = new Array(6),","\t\t\tfirst = true,","\t\t\tcurX, curY,","\t\t\tprevX, prevY,","\t\t\tinX, inY,","\t\t\toutX, outY;","","\t\tfunction drawSegment(segment) {","\t\t\tif (matrix) {","\t\t\t\tsegment._transformCoordinates(matrix, coords);","\t\t\t\tcurX = coords[0];","\t\t\t\tcurY = coords[1];","\t\t\t} else {","\t\t\t\tvar point = segment._point;","\t\t\t\tcurX = point._x;","\t\t\t\tcurY = point._y;","\t\t\t}","\t\t\tif (first) {","\t\t\t\tctx.moveTo(curX, curY);","\t\t\t\tfirst = false;","\t\t\t} else {","\t\t\t\tif (matrix) {","\t\t\t\t\tinX = coords[2];","\t\t\t\t\tinY = coords[3];","\t\t\t\t} else {","\t\t\t\t\tvar handle = segment._handleIn;","\t\t\t\t\tinX = curX + handle._x;","\t\t\t\t\tinY = curY + handle._y;","\t\t\t\t}","\t\t\t\tif (inX === curX && inY === curY","\t\t\t\t\t\t&& outX === prevX && outY === prevY) {","\t\t\t\t\tctx.lineTo(curX, curY);","\t\t\t\t} else {","\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);","\t\t\t\t}","\t\t\t}","\t\t\tprevX = curX;","\t\t\tprevY = curY;","\t\t\tif (matrix) {","\t\t\t\toutX = coords[4];","\t\t\t\toutY = coords[5];","\t\t\t} else {","\t\t\t\tvar handle = segment._handleOut;","\t\t\t\toutX = prevX + handle._x;","\t\t\t\toutY = prevY + handle._y;","\t\t\t}","\t\t}","","\t\tfor (var i = 0; i < length; i++)","\t\t\tdrawSegment(segments[i]);","\t\tif (path._closed && length > 0)","\t\t\tdrawSegment(segments[0]);","\t}","","\treturn {","\t\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {","\t\t\tvar dontStart = param.dontStart,","\t\t\t\tdontPaint = param.dontFinish || param.clip,","\t\t\t\tstyle = this.getStyle(),","\t\t\t\thasFill = style.hasFill(),","\t\t\t\thasStroke = style.hasStroke(),","\t\t\t\tdashArray = style.getDashArray(),","\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke","\t\t\t\t\t\t&& dashArray && dashArray.length;","","\t\t\tif (!dontStart)","\t\t\t\tctx.beginPath();","","\t\t\tif (hasFill || hasStroke && !dashLength || dontPaint) {","\t\t\t\tdrawSegments(ctx, this, strokeMatrix);","\t\t\t\tif (this._closed)","\t\t\t\t\tctx.closePath();","\t\t\t}","","\t\t\tfunction getOffset(i) {","\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];","\t\t\t}","","\t\t\tif (!dontPaint && (hasFill || hasStroke)) {","\t\t\t\tthis._setStyles(ctx, param, viewMatrix);","\t\t\t\tif (hasFill) {","\t\t\t\t\tctx.fill(style.getFillRule());","\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t\t}","\t\t\t\tif (hasStroke) {","\t\t\t\t\tif (dashLength) {","\t\t\t\t\t\tif (!dontStart)","\t\t\t\t\t\t\tctx.beginPath();","\t\t\t\t\t\tvar flattener = new PathFlattener(this, 0.25, 32, false,","\t\t\t\t\t\t\t\tstrokeMatrix),","\t\t\t\t\t\t\tlength = flattener.length,","\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,","\t\t\t\t\t\t\ti = 0;","\t\t\t\t\t\tfrom = from % length;","\t\t\t\t\t\twhile (from > 0) {","\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);","\t\t\t\t\t\t}","\t\t\t\t\t\twhile (from < length) {","\t\t\t\t\t\t\tto = from + getOffset(i++);","\t\t\t\t\t\t\tif (from > 0 || to > 0)","\t\t\t\t\t\t\t\tflattener.drawPart(ctx,","\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));","\t\t\t\t\t\t\tfrom = to + getOffset(i++);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tctx.stroke();","\t\t\t\t}","\t\t\t}","\t\t},","","\t\t_drawSelected: function(ctx, matrix) {","\t\t\tctx.beginPath();","\t\t\tdrawSegments(ctx, this, matrix);","\t\t\tctx.stroke();","\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);","\t\t}","\t};","},","new function() {","\tfunction getCurrentSegment(that) {","\t\tvar segments = that._segments;","\t\tif (!segments.length)","\t\t\tthrow new Error('Use a moveTo() command first');","\t\treturn segments[segments.length - 1];","\t}","","\treturn {","\t\tmoveTo: function() {","\t\t\tvar segments = this._segments;","\t\t\tif (segments.length === 1)","\t\t\t\tthis.removeSegment(0);","\t\t\tif (!segments.length)","\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);","\t\t},","","\t\tmoveBy: function() {","\t\t\tthrow new Error('moveBy() is unsupported on Path items.');","\t\t},","","\t\tlineTo: function() {","\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);","\t\t},","","\t\tcubicCurveTo: function() {","\t\t\tvar handle1 = Point.read(arguments),","\t\t\t\thandle2 = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this);","\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));","\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);","\t\t},","","\t\tquadraticCurveTo: function() {","\t\t\tvar handle = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.cubicCurveTo(","\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),","\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),","\t\t\t\tto","\t\t\t);","\t\t},","","\t\tcurveTo: function() {","\t\t\tvar through = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),","\t\t\t\tt1 = 1 - t,","\t\t\t\tcurrent = getCurrentSegment(this)._point,","\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))","\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);","\t\t\tif (handle.isNaN())","\t\t\t\tthrow new Error(","\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);","\t\t\tthis.quadraticCurveTo(handle, to);","\t\t},","","\t\tarcTo: function() {","\t\t\tvar abs = Math.abs,","\t\t\t\tsqrt = Math.sqrt,","\t\t\t\tcurrent = getCurrentSegment(this),","\t\t\t\tfrom = current._point,","\t\t\t\tto = Point.read(arguments),","\t\t\t\tthrough,","\t\t\t\tpeek = Base.peek(arguments),","\t\t\t\tclockwise = Base.pick(peek, true),","\t\t\t\tcenter, extent, vector, matrix;","\t\t\tif (typeof clockwise === 'boolean') {","\t\t\t\tvar middle = from.add(to).divide(2),","\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(","\t\t\t\t\t\tclockwise ? -90 : 90));","\t\t\t} else if (Base.remain(arguments) <= 2) {","\t\t\t\tthrough = to;","\t\t\t\tto = Point.read(arguments);","\t\t\t} else {","\t\t\t\tvar radius = Size.read(arguments),","\t\t\t\t\tisZero = Numerical.isZero;","\t\t\t\tif (isZero(radius.width) || isZero(radius.height))","\t\t\t\t\treturn this.lineTo(to);","\t\t\t\tvar rotation = Base.read(arguments),","\t\t\t\t\tclockwise = !!Base.read(arguments),","\t\t\t\t\tlarge = !!Base.read(arguments),","\t\t\t\t\tmiddle = from.add(to).divide(2),","\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),","\t\t\t\t\tx = pt.x,","\t\t\t\t\ty = pt.y,","\t\t\t\t\trx = abs(radius.width),","\t\t\t\t\try = abs(radius.height),","\t\t\t\t\trxSq = rx * rx,","\t\t\t\t\trySq = ry * ry,","\t\t\t\t\txSq = x * x,","\t\t\t\t\tySq = y * y;","\t\t\t\tvar factor = sqrt(xSq / rxSq + ySq / rySq);","\t\t\t\tif (factor > 1) {","\t\t\t\t\trx *= factor;","\t\t\t\t\try *= factor;","\t\t\t\t\trxSq = rx * rx;","\t\t\t\t\trySq = ry * ry;","\t\t\t\t}","\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /","\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);","\t\t\t\tif (abs(factor) < 1e-12)","\t\t\t\t\tfactor = 0;","\t\t\t\tif (factor < 0)","\t\t\t\t\tthrow new Error(","\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');","\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)","\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1) * sqrt(factor))","\t\t\t\t\t\t.rotate(rotation).add(middle);","\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)","\t\t\t\t\t\t.scale(rx, ry);","\t\t\t\tvector = matrix._inverseTransform(from);","\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));","\t\t\t\tif (!clockwise && extent > 0)","\t\t\t\t\textent -= 360;","\t\t\t\telse if (clockwise && extent < 0)","\t\t\t\t\textent += 360;","\t\t\t}","\t\t\tif (through) {","\t\t\t\tvar l1 = new Line(from.add(through).divide(2),","\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),","\t\t\t\t\tl2 = new Line(through.add(to).divide(2),","\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),","\t\t\t\t\tline = new Line(from, to),","\t\t\t\t\tthroughSide = line.getSide(through);","\t\t\t\tcenter = l1.intersect(l2, true);","\t\t\t\tif (!center) {","\t\t\t\t\tif (!throughSide)","\t\t\t\t\t\treturn this.lineTo(to);","\t\t\t\t\tthrow new Error(","\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');","\t\t\t\t}","\t\t\t\tvector = from.subtract(center);","\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));","\t\t\t\tvar centerSide = line.getSide(center);","\t\t\t\tif (centerSide === 0) {","\t\t\t\t\textent = throughSide * abs(extent);","\t\t\t\t} else if (throughSide === centerSide) {","\t\t\t\t\textent += extent < 0 ? 360 : -360;","\t\t\t\t}","\t\t\t}","\t\t\tvar epsilon = 1e-7,","\t\t\t\text = abs(extent),","\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90),","\t\t\t\tinc = extent / count,","\t\t\t\thalf = inc * Math.PI / 360,","\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),","\t\t\t\tsegments = [];","\t\t\tfor (var i = 0; i <= count; i++) {","\t\t\t\tvar pt = to,","\t\t\t\t\tout = null;","\t\t\t\tif (i < count) {","\t\t\t\t\tout = vector.rotate(90).multiply(z);","\t\t\t\t\tif (matrix) {","\t\t\t\t\t\tpt = matrix._transformPoint(vector);","\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))","\t\t\t\t\t\t\t\t.subtract(pt);","\t\t\t\t\t} else {","\t\t\t\t\t\tpt = center.add(vector);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (!i) {","\t\t\t\t\tcurrent.setHandleOut(out);","\t\t\t\t} else {","\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);","\t\t\t\t\tif (matrix) {","\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))","\t\t\t\t\t\t\t\t.subtract(pt);","\t\t\t\t\t}","\t\t\t\t\tsegments.push(new Segment(pt, _in, out));","\t\t\t\t}","\t\t\t\tvector = vector.rotate(inc);","\t\t\t}","\t\t\tthis._add(segments);","\t\t},","","\t\tlineBy: function() {","\t\t\tvar to = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.lineTo(current.add(to));","\t\t},","","\t\tcurveBy: function() {","\t\t\tvar through = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tparameter = Base.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);","\t\t},","","\t\tcubicCurveBy: function() {","\t\t\tvar handle1 = Point.read(arguments),","\t\t\t\thandle2 = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),","\t\t\t\t\tcurrent.add(to));","\t\t},","","\t\tquadraticCurveBy: function() {","\t\t\tvar handle = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));","\t\t},","","\t\tarcBy: function() {","\t\t\tvar current = getCurrentSegment(this)._point,","\t\t\t\tpoint = current.add(Point.read(arguments)),","\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);","\t\t\tif (typeof clockwise === 'boolean') {","\t\t\t\tthis.arcTo(point, clockwise);","\t\t\t} else {","\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));","\t\t\t}","\t\t},","","\t\tclosePath: function(tolerance) {","\t\t\tthis.setClosed(true);","\t\t\tthis.join(this, tolerance);","\t\t}","\t};","}, {","","\t_getBounds: function(matrix, options) {","\t\tvar method = options.handle","\t\t\t\t? 'getHandleBounds'","\t\t\t\t: options.stroke","\t\t\t\t? 'getStrokeBounds'","\t\t\t\t: 'getBounds';","\t\treturn Path[method](this._segments, this._closed, this, matrix, options);","\t},","","statics: {","\tgetBounds: function(segments, closed, path, matrix, options, strokePadding) {","\t\tvar first = segments[0];","\t\tif (!first)","\t\t\treturn new Rectangle();","\t\tvar coords = new Array(6),","\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6)),","\t\t\tmin = prevCoords.slice(0, 2),","\t\t\tmax = min.slice(),","\t\t\troots = new Array(2);","","\t\tfunction processSegment(segment) {","\t\t\tsegment._transformCoordinates(matrix, coords);","\t\t\tfor (var i = 0; i < 2; i++) {","\t\t\t\tCurve._addBounds(","\t\t\t\t\tprevCoords[i],","\t\t\t\t\tprevCoords[i + 4],","\t\t\t\t\tcoords[i + 2],","\t\t\t\t\tcoords[i],","\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);","\t\t\t}","\t\t\tvar tmp = prevCoords;","\t\t\tprevCoords = coords;","\t\t\tcoords = tmp;","\t\t}","","\t\tfor (var i = 1, l = segments.length; i < l; i++)","\t\t\tprocessSegment(segments[i]);","\t\tif (closed)","\t\t\tprocessSegment(first);","\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);","\t},","","\tgetStrokeBounds: function(segments, closed, path, matrix, options) {","\t\tvar style = path.getStyle(),","\t\t\tstroke = style.hasStroke(),","\t\t\tstrokeWidth = style.getStrokeWidth(),","\t\t\tstrokeMatrix = stroke && path._getStrokeMatrix(matrix, options),","\t\t\tstrokePadding = stroke && Path._getStrokePadding(strokeWidth,","\t\t\t\tstrokeMatrix),","\t\t\tbounds = Path.getBounds(segments, closed, path, matrix, options,","\t\t\t\tstrokePadding);","\t\tif (!stroke)","\t\t\treturn bounds;","\t\tvar strokeRadius = strokeWidth / 2,","\t\t\tjoin = style.getStrokeJoin(),","\t\t\tcap = style.getStrokeCap(),","\t\t\tmiterLimit = style.getMiterLimit(),","\t\t\tjoinBounds = new Rectangle(new Size(strokePadding));","","\t\tfunction addPoint(point) {","\t\t\tbounds = bounds.include(point);","\t\t}","","\t\tfunction addRound(segment) {","\t\t\tbounds = bounds.unite(","\t\t\t\t\tjoinBounds.setCenter(segment._point.transform(matrix)));","\t\t}","","\t\tfunction addJoin(segment, join) {","\t\t\tif (join === 'round' || segment.isSmooth()) {","\t\t\t\taddRound(segment);","\t\t\t} else {","\t\t\t\tPath._addBevelJoin(segment, join, strokeRadius, miterLimit,","\t\t\t\t\t\tmatrix, strokeMatrix, addPoint);","\t\t\t}","\t\t}","","\t\tfunction addCap(segment, cap) {","\t\t\tif (cap === 'round') {","\t\t\t\taddRound(segment);","\t\t\t} else {","\t\t\t\tPath._addSquareCap(segment, cap, strokeRadius, matrix,","\t\t\t\t\t\tstrokeMatrix, addPoint);","\t\t\t}","\t\t}","","\t\tvar length = segments.length - (closed ? 0 : 1);","\t\tfor (var i = 1; i < length; i++)","\t\t\taddJoin(segments[i], join);","\t\tif (closed) {","\t\t\taddJoin(segments[0], join);","\t\t} else if (length > 0) {","\t\t\taddCap(segments[0], cap);","\t\t\taddCap(segments[segments.length - 1], cap);","\t\t}","\t\treturn bounds;","\t},","","\t_getStrokePadding: function(radius, matrix) {","\t\tif (!matrix)","\t\t\treturn [radius, radius];","\t\tvar hor = new Point(radius, 0).transform(matrix),","\t\t\tver = new Point(0, radius).transform(matrix),","\t\t\tphi = hor.getAngleInRadians(),","\t\t\ta = hor.getLength(),","\t\t\tb = ver.getLength();","\t\tvar sin = Math.sin(phi),","\t\t\tcos = Math.cos(phi),","\t\t\ttan = Math.tan(phi),","\t\t\ttx = Math.atan2(b * tan, a),","\t\t\tty = Math.atan2(b, tan * a);","\t\treturn [Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),","\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];","\t},","","\t_addBevelJoin: function(segment, join, radius, miterLimit, matrix,","\t\t\tstrokeMatrix, addPoint, isArea) {","\t\tvar curve2 = segment.getCurve(),","\t\t\tcurve1 = curve2.getPrevious(),","\t\t\tpoint = curve2.getPoint1().transform(matrix),","\t\t\tnormal1 = curve1.getNormalAtTime(1).multiply(radius)","\t\t\t\t.transform(strokeMatrix),","\t\t\tnormal2 = curve2.getNormalAtTime(0).multiply(radius)","\t\t\t\t.transform(strokeMatrix);","\t\tif (normal1.getDirectedAngle(normal2) < 0) {","\t\t\tnormal1 = normal1.negate();","\t\t\tnormal2 = normal2.negate();","\t\t}","\t\tif (isArea)","\t\t\taddPoint(point);","\t\taddPoint(point.add(normal1));","\t\tif (join === 'miter') {","\t\t\tvar corner = new Line(point.add(normal1),","\t\t\t\t\tnew Point(-normal1.y, normal1.x), true","\t\t\t\t).intersect(new Line(point.add(normal2),","\t\t\t\t\tnew Point(-normal2.y, normal2.x), true","\t\t\t\t), true);","\t\t\tif (corner && point.getDistance(corner) <= miterLimit * radius) {","\t\t\t\taddPoint(corner);","\t\t\t}","\t\t}","\t\taddPoint(point.add(normal2));","\t},","","\t_addSquareCap: function(segment, cap, radius, matrix, strokeMatrix,","\t\t\taddPoint, isArea) {","\t\tvar point = segment._point.transform(matrix),","\t\t\tloc = segment.getLocation(),","\t\t\tnormal = loc.getNormal()","\t\t\t\t\t.multiply(loc.getTime() === 0 ? radius : -radius)","\t\t\t\t\t.transform(strokeMatrix);","\t\tif (cap === 'square') {","\t\t\tif (isArea) {","\t\t\t\taddPoint(point.subtract(normal));","\t\t\t\taddPoint(point.add(normal));","\t\t\t}","\t\t\tpoint = point.add(normal.rotate(-90));","\t\t}","\t\taddPoint(point.add(normal));","\t\taddPoint(point.subtract(normal));","\t},","","\tgetHandleBounds: function(segments, closed, path, matrix, options) {","\t\tvar style = path.getStyle(),","\t\t\tstroke = options.stroke && style.hasStroke(),","\t\t\tstrokePadding,","\t\t\tjoinPadding;","\t\tif (stroke) {","\t\t\tvar strokeMatrix = path._getStrokeMatrix(matrix, options),","\t\t\t\tstrokeRadius = style.getStrokeWidth() / 2,","\t\t\t\tjoinRadius = strokeRadius;","\t\t\tif (style.getStrokeJoin() === 'miter')","\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();","\t\t\tif (style.getStrokeCap() === 'square')","\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);","\t\t\tstrokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);","\t\t\tjoinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);","\t\t}","\t\tvar coords = new Array(6),","\t\t\tx1 = Infinity,","\t\t\tx2 = -x1,","\t\t\ty1 = x1,","\t\t\ty2 = x2;","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar segment = segments[i];","\t\t\tsegment._transformCoordinates(matrix, coords);","\t\t\tfor (var j = 0; j < 6; j += 2) {","\t\t\t\tvar padding = !j ? joinPadding : strokePadding,","\t\t\t\t\tpaddingX = padding ? padding[0] : 0,","\t\t\t\t\tpaddingY = padding ? padding[1] : 0,","\t\t\t\t\tx = coords[j],","\t\t\t\t\ty = coords[j + 1],","\t\t\t\t\txn = x - paddingX,","\t\t\t\t\txx = x + paddingX,","\t\t\t\t\tyn = y - paddingY,","\t\t\t\t\tyx = y + paddingY;","\t\t\t\tif (xn < x1) x1 = xn;","\t\t\t\tif (xx > x2) x2 = xx;","\t\t\t\tif (yn < y1) y1 = yn;","\t\t\t\tif (yx > y2) y2 = yx;","\t\t\t}","\t\t}","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t}","}});","","Path.inject({ statics: new function() {","","\tvar kappa = 0.5522847498307936,","\t\tellipseSegments = [","\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),","\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),","\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),","\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])","\t\t];","","\tfunction createPath(segments, closed, args) {","\t\tvar props = Base.getNamed(args),","\t\t\tpath = new Path(props && props.insert == false && Item.NO_INSERT);","\t\tpath._add(segments);","\t\tpath._closed = closed;","\t\treturn path.set(props, { insert: true });","\t}","","\tfunction createEllipse(center, radius, args) {","\t\tvar segments = new Array(4);","\t\tfor (var i = 0; i < 4; i++) {","\t\t\tvar segment = ellipseSegments[i];","\t\t\tsegments[i] = new Segment(","\t\t\t\tsegment._point.multiply(radius).add(center),","\t\t\t\tsegment._handleIn.multiply(radius),","\t\t\t\tsegment._handleOut.multiply(radius)","\t\t\t);","\t\t}","\t\treturn createPath(segments, true, args);","\t}","","\treturn {","\t\tLine: function() {","\t\t\treturn createPath([","\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),","\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))","\t\t\t], false, arguments);","\t\t},","","\t\tCircle: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius');","\t\t\treturn createEllipse(center, new Size(radius), arguments);","\t\t},","","\t\tRectangle: function() {","\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),","\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,","\t\t\t\t\t\t{ readNull: true }),","\t\t\t\tbl = rect.getBottomLeft(true),","\t\t\t\ttl = rect.getTopLeft(true),","\t\t\t\ttr = rect.getTopRight(true),","\t\t\t\tbr = rect.getBottomRight(true),","\t\t\t\tsegments;","\t\t\tif (!radius || radius.isZero()) {","\t\t\t\tsegments = [","\t\t\t\t\tnew Segment(bl),","\t\t\t\t\tnew Segment(tl),","\t\t\t\t\tnew Segment(tr),","\t\t\t\t\tnew Segment(br)","\t\t\t\t];","\t\t\t} else {","\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));","\t\t\t\tvar rx = radius.width,","\t\t\t\t\try = radius.height,","\t\t\t\t\thx = rx * kappa,","\t\t\t\t\thy = ry * kappa;","\t\t\t\tsegments = [","\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),","\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),","\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),","\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),","\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),","\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),","\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),","\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])","\t\t\t\t];","\t\t\t}","\t\t\treturn createPath(segments, true, arguments);","\t\t},","","\t\tRoundRectangle: '#Rectangle',","","\t\tEllipse: function() {","\t\t\tvar ellipse = Shape._readEllipse(arguments);","\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);","\t\t},","","\t\tOval: '#Ellipse',","","\t\tArc: function() {","\t\t\tvar from = Point.readNamed(arguments, 'from'),","\t\t\t\tthrough = Point.readNamed(arguments, 'through'),","\t\t\t\tto = Point.readNamed(arguments, 'to'),","\t\t\t\tprops = Base.getNamed(arguments),","\t\t\t\tpath = new Path(props && props.insert == false","\t\t\t\t\t\t&& Item.NO_INSERT);","\t\t\tpath.moveTo(from);","\t\t\tpath.arcTo(through, to);","\t\t\treturn path.set(props);","\t\t},","","\t\tRegularPolygon: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tsides = Base.readNamed(arguments, 'sides'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius'),","\t\t\t\tstep = 360 / sides,","\t\t\t\tthree = sides % 3 === 0,","\t\t\t\tvector = new Point(0, three ? -radius : radius),","\t\t\t\toffset = three ? -1 : 0.5,","\t\t\t\tsegments = new Array(sides);","\t\t\tfor (var i = 0; i < sides; i++)","\t\t\t\tsegments[i] = new Segment(center.add(","\t\t\t\t\tvector.rotate((i + offset) * step)));","\t\t\treturn createPath(segments, true, arguments);","\t\t},","","\t\tStar: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,","\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),","\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),","\t\t\t\tstep = 360 / points,","\t\t\t\tvector = new Point(0, -1),","\t\t\t\tsegments = new Array(points);","\t\t\tfor (var i = 0; i < points; i++)","\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)","\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));","\t\t\treturn createPath(segments, true, arguments);","\t\t}","\t};","}});","","var CompoundPath = PathItem.extend({","\t_class: 'CompoundPath',","\t_serializeFields: {","\t\tchildren: []","\t},","\tbeans: true,","","\tinitialize: function CompoundPath(arg) {","\t\tthis._children = [];","\t\tthis._namedChildren = {};","\t\tif (!this._initialize(arg)) {","\t\t\tif (typeof arg === 'string') {","\t\t\t\tthis.setPathData(arg);","\t\t\t} else {","\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);","\t\t\t}","\t\t}","\t},","","\tinsertChildren: function insertChildren(index, items) {","\t\tvar list = items,","\t\t\tfirst = list[0];","\t\tif (first && typeof first[0] === 'number')","\t\t\tlist = [list];","\t\tfor (var i = items.length - 1; i >= 0; i--) {","\t\t\tvar item = list[i];","\t\t\tif (list === items && !(item instanceof Path))","\t\t\t\tlist = Base.slice(list);","\t\t\tif (Array.isArray(item)) {","\t\t\t\tlist[i] = new Path({ segments: item, insert: false });","\t\t\t} else if (item instanceof CompoundPath) {","\t\t\t\tlist.splice.apply(list, [i, 1].concat(item.removeChildren()));","\t\t\t\titem.remove();","\t\t\t}","\t\t}","\t\treturn insertChildren.base.call(this, index, list);","\t},","","\treduce: function reduce(options) {","\t\tvar children = this._children;","\t\tfor (var i = children.length - 1; i >= 0; i--) {","\t\t\tvar path = children[i].reduce(options);","\t\t\tif (path.isEmpty())","\t\t\t\tpath.remove();","\t\t}","\t\tif (!children.length) {","\t\t\tvar path = new Path(Item.NO_INSERT);","\t\t\tpath.copyAttributes(this);","\t\t\tpath.insertAbove(this);","\t\t\tthis.remove();","\t\t\treturn path;","\t\t}","\t\treturn reduce.base.call(this);","\t},","","\tisClosed: function() {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tif (!children[i]._closed)","\t\t\t\treturn false;","\t\t}","\t\treturn true;","\t},","","\tsetClosed: function(closed) {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tchildren[i].setClosed(closed);","\t\t}","\t},","","\tgetFirstSegment: function() {","\t\tvar first = this.getFirstChild();","\t\treturn first && first.getFirstSegment();","\t},","","\tgetLastSegment: function() {","\t\tvar last = this.getLastChild();","\t\treturn last && last.getLastSegment();","\t},","","\tgetCurves: function() {","\t\tvar children = this._children,","\t\t\tcurves = [];","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tcurves.push.apply(curves, children[i].getCurves());","\t\treturn curves;","\t},","","\tgetFirstCurve: function() {","\t\tvar first = this.getFirstChild();","\t\treturn first && first.getFirstCurve();","\t},","","\tgetLastCurve: function() {","\t\tvar last = this.getLastChild();","\t\treturn last && last.getLastCurve();","\t},","","\tgetArea: function() {","\t\tvar children = this._children,","\t\t\tarea = 0;","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tarea += children[i].getArea();","\t\treturn area;","\t},","","\tgetLength: function() {","\t\tvar children = this._children,","\t\t\tlength = 0;","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tlength += children[i].getLength();","\t\treturn length;","\t},","","\tgetPathData: function(_matrix, _precision) {","\t\tvar children = this._children,","\t\t\tpaths = [];","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i],","\t\t\t\tmx = child._matrix;","\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()","\t\t\t\t\t? _matrix.appended(mx) : _matrix, _precision));","\t\t}","\t\treturn paths.join('');","\t},","","\t_hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {","\t\treturn _hitTestChildren.base.call(this, point,","\t\t\t\toptions.class === Path || options.type === 'path' ? options","\t\t\t\t\t: Base.set({}, options, { fill: false }),","\t\t\t\tviewMatrix);","\t},","","\t_draw: function(ctx, param, viewMatrix, strokeMatrix) {","\t\tvar children = this._children;","\t\tif (!children.length)","\t\t\treturn;","","\t\tparam = param.extend({ dontStart: true, dontFinish: true });","\t\tctx.beginPath();","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tchildren[i].draw(ctx, param, strokeMatrix);","","\t\tif (!param.clip) {","\t\t\tthis._setStyles(ctx, param, viewMatrix);","\t\t\tvar style = this._style;","\t\t\tif (style.hasFill()) {","\t\t\t\tctx.fill(style.getFillRule());","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (style.hasStroke())","\t\t\t\tctx.stroke();","\t\t}","\t},","","\t_drawSelected: function(ctx, matrix, selectionItems) {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i],","\t\t\t\tmx = child._matrix;","\t\t\tif (!selectionItems[child._id]) {","\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix","\t\t\t\t\t\t: matrix.appended(mx));","\t\t\t}","\t\t}","\t}","},","new function() {","\tfunction getCurrentPath(that, check) {","\t\tvar children = that._children;","\t\tif (check && !children.length)","\t\t\tthrow new Error('Use a moveTo() command first');","\t\treturn children[children.length - 1];","\t}","","\treturn Base.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo',","\t\t\t'arcTo', 'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy',","\t\t\t'arcBy'],","\t\tfunction(key) {","\t\t\tthis[key] = function() {","\t\t\t\tvar path = getCurrentPath(this, true);","\t\t\t\tpath[key].apply(path, arguments);","\t\t\t};","\t\t}, {","\t\t\tmoveTo: function() {","\t\t\t\tvar current = getCurrentPath(this),","\t\t\t\t\tpath = current && current.isEmpty() ? current","\t\t\t\t\t\t\t: new Path(Item.NO_INSERT);","\t\t\t\tif (path !== current)","\t\t\t\t\tthis.addChild(path);","\t\t\t\tpath.moveTo.apply(path, arguments);","\t\t\t},","","\t\t\tmoveBy: function() {","\t\t\t\tvar current = getCurrentPath(this, true),","\t\t\t\t\tlast = current && current.getLastSegment(),","\t\t\t\t\tpoint = Point.read(arguments);","\t\t\t\tthis.moveTo(last ? point.add(last._point) : point);","\t\t\t},","","\t\t\tclosePath: function(tolerance) {","\t\t\t\tgetCurrentPath(this, true).closePath(tolerance);","\t\t\t}","\t\t}","\t);","}, Base.each(['reverse', 'flatten', 'simplify', 'smooth'], function(key) {","\tthis[key] = function(param) {","\t\tvar children = this._children,","\t\t\tres;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tres = children[i][key](param) || res;","\t\t}","\t\treturn res;","\t};","}, {}));","","PathItem.inject(new function() {","\tvar min = Math.min,","\t\tmax = Math.max,","\t\tabs = Math.abs,","\t\toperators = {","\t\t\tunite:     { '1': true, '2': true },","\t\t\tintersect: { '2': true },","\t\t\tsubtract:  { '1': true },","\t\t\texclude:   { '1': true, '-1': true }","\t\t};","","\tfunction preparePath(path, resolve) {","\t\tvar res = path.clone(false).reduce({ simplify: true })","\t\t\t\t.transform(null, true, true);","\t\treturn resolve","\t\t\t\t? res.resolveCrossings().reorient(","\t\t\t\t\tres.getFillRule() === 'nonzero', true)","\t\t\t\t: res;","\t}","","\tfunction createResult(paths, simplify, path1, path2, options) {","\t\tvar result = new CompoundPath(Item.NO_INSERT);","\t\tresult.addChildren(paths, true);","\t\tresult = result.reduce({ simplify: simplify });","\t\tif (!(options && options.insert == false)) {","\t\t\tresult.insertAbove(path2 && path1.isSibling(path2)","\t\t\t\t\t&& path1.getIndex() < path2.getIndex() ? path2 : path1);","\t\t}","\t\tresult.copyAttributes(path1, true);","\t\treturn result;","\t}","","\tfunction traceBoolean(path1, path2, operation, options) {","\t\tif (options && (options.trace == false || options.stroke) &&","\t\t\t\t/^(subtract|intersect)$/.test(operation))","\t\t\treturn splitBoolean(path1, path2, operation);","\t\tvar _path1 = preparePath(path1, true),","\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2, true),","\t\t\toperator = operators[operation];","\t\toperator[operation] = true;","\t\tif (_path2 && (operator.subtract || operator.exclude)","\t\t\t\t^ (_path2.isClockwise() ^ _path1.isClockwise()))","\t\t\t_path2.reverse();","\t\tvar crossings = divideLocations(","\t\t\t\tCurveLocation.expand(_path1.getCrossings(_path2))),","\t\t\tpaths1 = _path1._children || [_path1],","\t\t\tpaths2 = _path2 && (_path2._children || [_path2]),","\t\t\tsegments = [],","\t\t\tcurves = [],","\t\t\tpaths;","","\t\tfunction collect(paths) {","\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {","\t\t\t\tvar path = paths[i];","\t\t\t\tsegments.push.apply(segments, path._segments);","\t\t\t\tcurves.push.apply(curves, path.getCurves());","\t\t\t\tpath._overlapsOnly = true;","\t\t\t}","\t\t}","","\t\tif (crossings.length) {","\t\t\tcollect(paths1);","\t\t\tif (paths2)","\t\t\t\tcollect(paths2);","\t\t\tfor (var i = 0, l = crossings.length; i < l; i++) {","\t\t\t\tpropagateWinding(crossings[i]._segment, _path1, _path2, curves,","\t\t\t\t\t\toperator);","\t\t\t}","\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\t\tvar segment = segments[i],","\t\t\t\t\tinter = segment._intersection;","\t\t\t\tif (!segment._winding) {","\t\t\t\t\tpropagateWinding(segment, _path1, _path2, curves, operator);","\t\t\t\t}","\t\t\t\tif (!(inter && inter._overlap))","\t\t\t\t\tsegment._path._overlapsOnly = false;","\t\t\t}","\t\t\tpaths = tracePaths(segments, operator);","\t\t} else {","\t\t\tpaths = reorientPaths(","\t\t\t\t\tpaths2 ? paths1.concat(paths2) : paths1.slice(),","\t\t\t\t\tfunction(w) {","\t\t\t\t\t\treturn !!operator[w];","\t\t\t\t\t});","\t\t}","","\t\treturn createResult(paths, true, path1, path2, options);","\t}","","\tfunction splitBoolean(path1, path2, operation) {","\t\tvar _path1 = preparePath(path1),","\t\t\t_path2 = preparePath(path2),","\t\t\tcrossings = _path1.getCrossings(_path2),","\t\t\tsubtract = operation === 'subtract',","\t\t\tdivide = operation === 'divide',","\t\t\tadded = {},","\t\t\tpaths = [];","","\t\tfunction addPath(path) {","\t\t\tif (!added[path._id] && (divide ||","\t\t\t\t\t_path2.contains(path.getPointAt(path.getLength() / 2))","\t\t\t\t\t\t^ subtract)) {","\t\t\t\tpaths.unshift(path);","\t\t\t\treturn added[path._id] = true;","\t\t\t}","\t\t}","","\t\tfor (var i = crossings.length - 1; i >= 0; i--) {","\t\t\tvar path = crossings[i].split();","\t\t\tif (path) {","\t\t\t\tif (addPath(path))","\t\t\t\t\tpath.getFirstSegment().setHandleIn(0, 0);","\t\t\t\t_path1.getLastSegment().setHandleOut(0, 0);","\t\t\t}","\t\t}","\t\taddPath(_path1);","\t\treturn createResult(paths, false, path1, path2);","\t}","","\tfunction linkIntersections(from, to) {","\t\tvar prev = from;","\t\twhile (prev) {","\t\t\tif (prev === to)","\t\t\t\treturn;","\t\t\tprev = prev._previous;","\t\t}","\t\twhile (from._next && from._next !== to)","\t\t\tfrom = from._next;","\t\tif (!from._next) {","\t\t\twhile (to._previous)","\t\t\t\tto = to._previous;","\t\t\tfrom._next = to;","\t\t\tto._previous = from;","\t\t}","\t}","","\tfunction clearCurveHandles(curves) {","\t\tfor (var i = curves.length - 1; i >= 0; i--)","\t\t\tcurves[i].clearHandles();","\t}","","\tfunction reorientPaths(paths, isInside, clockwise) {","\t\tvar length = paths && paths.length;","\t\tif (length) {","\t\t\tvar lookup = Base.each(paths, function (path, i) {","\t\t\t\t\tthis[path._id] = {","\t\t\t\t\t\tcontainer: null,","\t\t\t\t\t\twinding: path.isClockwise() ? 1 : -1,","\t\t\t\t\t\tindex: i","\t\t\t\t\t};","\t\t\t\t}, {}),","\t\t\t\tsorted = paths.slice().sort(function (a, b) {","\t\t\t\t\treturn abs(b.getArea()) - abs(a.getArea());","\t\t\t\t}),","\t\t\t\tfirst = sorted[0];","\t\t\tif (clockwise == null)","\t\t\t\tclockwise = first.isClockwise();","\t\t\tfor (var i = 0; i < length; i++) {","\t\t\t\tvar path1 = sorted[i],","\t\t\t\t\tentry1 = lookup[path1._id],","\t\t\t\t\tpoint = path1.getInteriorPoint(),","\t\t\t\t\tcontainerWinding = 0;","\t\t\t\tfor (var j = i - 1; j >= 0; j--) {","\t\t\t\t\tvar path2 = sorted[j];","\t\t\t\t\tif (path2.contains(point)) {","\t\t\t\t\t\tvar entry2 = lookup[path2._id];","\t\t\t\t\t\tcontainerWinding = entry2.winding;","\t\t\t\t\t\tentry1.winding += containerWinding;","\t\t\t\t\t\tentry1.container = entry2.exclude ? entry2.container","\t\t\t\t\t\t\t\t: path2;","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (isInside(entry1.winding) === isInside(containerWinding)) {","\t\t\t\t\tentry1.exclude = true;","\t\t\t\t\tpaths[entry1.index] = null;","\t\t\t\t} else {","\t\t\t\t\tvar container = entry1.container;","\t\t\t\t\tpath1.setClockwise(container ? !container.isClockwise()","\t\t\t\t\t\t\t: clockwise);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn paths;","\t}","","\tfunction divideLocations(locations, include, clearLater) {","\t\tvar results = include && [],","\t\t\ttMin = 1e-8,","\t\t\ttMax = 1 - tMin,","\t\t\tclearHandles = false,","\t\t\tclearCurves = clearLater || [],","\t\t\tclearLookup = clearLater && {},","\t\t\trenormalizeLocs,","\t\t\tprevCurve,","\t\t\tprevTime;","","\t\tfunction getId(curve) {","\t\t\treturn curve._path._id + '.' + curve._segment1._index;","\t\t}","","\t\tfor (var i = (clearLater && clearLater.length) - 1; i >= 0; i--) {","\t\t\tvar curve = clearLater[i];","\t\t\tif (curve._path)","\t\t\t\tclearLookup[getId(curve)] = true;","\t\t}","","\t\tfor (var i = locations.length - 1; i >= 0; i--) {","\t\t\tvar loc = locations[i],","\t\t\t\ttime = loc._time,","\t\t\t\torigTime = time,","\t\t\t\texclude = include && !include(loc),","\t\t\t\tcurve = loc._curve,","\t\t\t\tsegment;","\t\t\tif (curve) {","\t\t\t\tif (curve !== prevCurve) {","\t\t\t\t\tclearHandles = !curve.hasHandles()","\t\t\t\t\t\t\t|| clearLookup && clearLookup[getId(curve)];","\t\t\t\t\trenormalizeLocs = [];","\t\t\t\t\tprevTime = null;","\t\t\t\t\tprevCurve = curve;","\t\t\t\t} else if (prevTime >= tMin) {","\t\t\t\t\ttime /= prevTime;","\t\t\t\t}","\t\t\t}","\t\t\tif (exclude) {","\t\t\t\tif (renormalizeLocs)","\t\t\t\t\trenormalizeLocs.push(loc);","\t\t\t\tcontinue;","\t\t\t} else if (include) {","\t\t\t\tresults.unshift(loc);","\t\t\t}","\t\t\tprevTime = origTime;","\t\t\tif (time < tMin) {","\t\t\t\tsegment = curve._segment1;","\t\t\t} else if (time > tMax) {","\t\t\t\tsegment = curve._segment2;","\t\t\t} else {","\t\t\t\tvar newCurve = curve.divideAtTime(time, true);","\t\t\t\tif (clearHandles)","\t\t\t\t\tclearCurves.push(curve, newCurve);","\t\t\t\tsegment = newCurve._segment1;","\t\t\t\tfor (var j = renormalizeLocs.length - 1; j >= 0; j--) {","\t\t\t\t\tvar l = renormalizeLocs[j];","\t\t\t\t\tl._time = (l._time - time) / (1 - time);","\t\t\t\t}","\t\t\t}","\t\t\tloc._setSegment(segment);","\t\t\tvar inter = segment._intersection,","\t\t\t\tdest = loc._intersection;","\t\t\tif (inter) {","\t\t\t\tlinkIntersections(inter, dest);","\t\t\t\tvar other = inter;","\t\t\t\twhile (other) {","\t\t\t\t\tlinkIntersections(other._intersection, inter);","\t\t\t\t\tother = other._next;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tsegment._intersection = dest;","\t\t\t}","\t\t}","\t\tif (!clearLater)","\t\t\tclearCurveHandles(clearCurves);","\t\treturn results || locations;","\t}","","\tfunction getWinding(point, curves, dir, closed, dontFlip) {","\t\tvar ia = dir ? 1 : 0,","\t\t\tio = ia ^ 1,","\t\t\tpv = [point.x, point.y],","\t\t\tpa = pv[ia],","\t\t\tpo = pv[io],","\t\t\twindingEpsilon = 1e-9,","\t\t\tqualityEpsilon = 1e-6,","\t\t\tpaL = pa - windingEpsilon,","\t\t\tpaR = pa + windingEpsilon,","\t\t\twindingL = 0,","\t\t\twindingR = 0,","\t\t\tpathWindingL = 0,","\t\t\tpathWindingR = 0,","\t\t\tonPath = false,","\t\t\tonAnyPath = false,","\t\t\tquality = 1,","\t\t\troots = [],","\t\t\tvPrev,","\t\t\tvClose;","","\t\tfunction addWinding(v) {","\t\t\tvar o0 = v[io + 0],","\t\t\t\to3 = v[io + 6];","\t\t\tif (po < min(o0, o3) || po > max(o0, o3)) {","\t\t\t\treturn;","\t\t\t}","\t\t\tvar a0 = v[ia + 0],","\t\t\t\ta1 = v[ia + 2],","\t\t\t\ta2 = v[ia + 4],","\t\t\t\ta3 = v[ia + 6];","\t\t\tif (o0 === o3) {","\t\t\t\tif (a0 < paR && a3 > paL || a3 < paR && a0 > paL) {","\t\t\t\t\tonPath = true;","\t\t\t\t}","\t\t\t\treturn;","\t\t\t}","\t\t\tvar t =   po === o0 ? 0","\t\t\t\t\t: po === o3 ? 1","\t\t\t\t\t: paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3)","\t\t\t\t\t? 1","\t\t\t\t\t: Curve.solveCubic(v, io, po, roots, 0, 1) > 0","\t\t\t\t\t\t? roots[0]","\t\t\t\t\t\t: 1,","\t\t\t\ta =   t === 0 ? a0","\t\t\t\t\t: t === 1 ? a3","\t\t\t\t\t: Curve.getPoint(v, t)[dir ? 'y' : 'x'],","\t\t\t\twinding = o0 > o3 ? 1 : -1,","\t\t\t\twindingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1,","\t\t\t\ta3Prev = vPrev[ia + 6];","\t\t\tif (po !== o0) {","\t\t\t\tif (a < paL) {","\t\t\t\t\tpathWindingL += winding;","\t\t\t\t} else if (a > paR) {","\t\t\t\t\tpathWindingR += winding;","\t\t\t\t} else {","\t\t\t\t\tonPath = true;","\t\t\t\t}","\t\t\t\tif (a > pa - qualityEpsilon && a < pa + qualityEpsilon)","\t\t\t\t\tquality /= 2;","\t\t\t} else {","\t\t\t\tif (winding !== windingPrev) {","\t\t\t\t\tif (a0 < paL) {","\t\t\t\t\t\tpathWindingL += winding;","\t\t\t\t\t} else if (a0 > paR) {","\t\t\t\t\t\tpathWindingR += winding;","\t\t\t\t\t}","\t\t\t\t} else if (a0 != a3Prev) {","\t\t\t\t\tif (a3Prev < paR && a > paR) {","\t\t\t\t\t\tpathWindingR += winding;","\t\t\t\t\t\tonPath = true;","\t\t\t\t\t} else if (a3Prev > paL && a < paL) {","\t\t\t\t\t\tpathWindingL += winding;","\t\t\t\t\t\tonPath = true;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tquality = 0;","\t\t\t}","\t\t\tvPrev = v;","\t\t\treturn !dontFlip && a > paL && a < paR","\t\t\t\t\t&& Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0","\t\t\t\t\t&& getWinding(point, curves, !dir, closed, true);","\t\t}","","\t\tfunction handleCurve(v) {","\t\t\tvar o0 = v[io + 0],","\t\t\t\to1 = v[io + 2],","\t\t\t\to2 = v[io + 4],","\t\t\t\to3 = v[io + 6];","\t\t\tif (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {","\t\t\t\tvar a0 = v[ia + 0],","\t\t\t\t\ta1 = v[ia + 2],","\t\t\t\t\ta2 = v[ia + 4],","\t\t\t\t\ta3 = v[ia + 6],","\t\t\t\t\tmonoCurves = paL > max(a0, a1, a2, a3) ||","\t\t\t\t\t\t\t\t paR < min(a0, a1, a2, a3)","\t\t\t\t\t\t\t? [v] : Curve.getMonoCurves(v, dir),","\t\t\t\t\tres;","\t\t\t\tfor (var i = 0, l = monoCurves.length; i < l; i++) {","\t\t\t\t\tif (res = addWinding(monoCurves[i]))","\t\t\t\t\t\treturn res;","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar curve = curves[i],","\t\t\t\tpath = curve._path,","\t\t\t\tv = curve.getValues(),","\t\t\t\tres;","\t\t\tif (!i || curves[i - 1]._path !== path) {","\t\t\t\tvPrev = null;","\t\t\t\tif (!path._closed) {","\t\t\t\t\tvClose = Curve.getValues(","\t\t\t\t\t\t\tpath.getLastCurve().getSegment2(),","\t\t\t\t\t\t\tcurve.getSegment1(),","\t\t\t\t\t\t\tnull, !closed);","\t\t\t\t\tif (vClose[io] !== vClose[io + 6]) {","\t\t\t\t\t\tvPrev = vClose;","\t\t\t\t\t}","\t\t\t\t}","","\t\t\t\tif (!vPrev) {","\t\t\t\t\tvPrev = v;","\t\t\t\t\tvar prev = path.getLastCurve();","\t\t\t\t\twhile (prev && prev !== curve) {","\t\t\t\t\t\tvar v2 = prev.getValues();","\t\t\t\t\t\tif (v2[io] !== v2[io + 6]) {","\t\t\t\t\t\t\tvPrev = v2;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t\tprev = prev.getPrevious();","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","","\t\t\tif (res = handleCurve(v))","\t\t\t\treturn res;","","\t\t\tif (i + 1 === l || curves[i + 1]._path !== path) {","\t\t\t\tif (vClose && (res = handleCurve(vClose)))","\t\t\t\t\treturn res;","\t\t\t\tif (onPath && !pathWindingL && !pathWindingR) {","\t\t\t\t\tpathWindingL = pathWindingR = path.isClockwise(closed) ^ dir","\t\t\t\t\t\t\t? 1 : -1;","\t\t\t\t}","\t\t\t\twindingL += pathWindingL;","\t\t\t\twindingR += pathWindingR;","\t\t\t\tpathWindingL = pathWindingR = 0;","\t\t\t\tif (onPath) {","\t\t\t\t\tonAnyPath = true;","\t\t\t\t\tonPath = false;","\t\t\t\t}","\t\t\t\tvClose = null;","\t\t\t}","\t\t}","\t\twindingL = abs(windingL);","\t\twindingR = abs(windingR);","\t\treturn {","\t\t\twinding: max(windingL, windingR),","\t\t\twindingL: windingL,","\t\t\twindingR: windingR,","\t\t\tquality: quality,","\t\t\tonPath: onAnyPath","\t\t};","\t}","","\tfunction propagateWinding(segment, path1, path2, curves, operator) {","\t\tvar chain = [],","\t\t\tstart = segment,","\t\t\ttotalLength = 0,","\t\t\twinding;","\t\tdo {","\t\t\tvar curve = segment.getCurve(),","\t\t\t\tlength = curve.getLength();","\t\t\tchain.push({ segment: segment, curve: curve, length: length });","\t\t\ttotalLength += length;","\t\t\tsegment = segment.getNext();","\t\t} while (segment && !segment._intersection && segment !== start);","\t\tvar offsets = [0.5, 0.25, 0.75],","\t\t\twinding = { winding: 0, quality: -1 },","\t\t\ttMin = 1e-8,","\t\t\ttMax = 1 - tMin;","\t\tfor (var i = 0; i < offsets.length && winding.quality < 0.5; i++) {","\t\t\tvar length = totalLength * offsets[i];","\t\t\tfor (var j = 0, l = chain.length; j < l; j++) {","\t\t\t\tvar entry = chain[j],","\t\t\t\t\tcurveLength = entry.length;","\t\t\t\tif (length <= curveLength) {","\t\t\t\t\tvar curve = entry.curve,","\t\t\t\t\t\tpath = curve._path,","\t\t\t\t\t\tparent = path._parent,","\t\t\t\t\t\toperand = parent instanceof CompoundPath ? parent : path,","\t\t\t\t\t\tt = Numerical.clamp(curve.getTimeAt(length), tMin, tMax),","\t\t\t\t\t\tpt = curve.getPointAtTime(t),","\t\t\t\t\t\tdir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;","\t\t\t\t\tvar wind = !(operator.subtract && path2 && (","\t\t\t\t\t\t\toperand === path1 &&","\t\t\t\t\t\t\t\tpath2._getWinding(pt, dir, true).winding ||","\t\t\t\t\t\t\toperand === path2 &&","\t\t\t\t\t\t\t\t!path1._getWinding(pt, dir, true).winding))","\t\t\t\t\t\t\t? getWinding(pt, curves, dir, true)","\t\t\t\t\t\t\t: { winding: 0, quality: 1 };","\t\t\t\t\tif (wind.quality > winding.quality)","\t\t\t\t\t\twinding = wind;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tlength -= curveLength;","\t\t\t}","\t\t}","\t\tfor (var j = chain.length - 1; j >= 0; j--) {","\t\t\tchain[j].segment._winding = winding;","\t\t}","\t}","","\tfunction tracePaths(segments, operator) {","\t\tvar paths = [],","\t\t\tstarts;","","\t\tfunction isValid(seg) {","\t\t\tvar winding;","\t\t\treturn !!(seg && !seg._visited && (!operator","\t\t\t\t\t|| operator[(winding = seg._winding || {}).winding]","\t\t\t\t\t\t&& !(operator.unite && winding.winding === 2","\t\t\t\t\t\t\t&& winding.windingL && winding.windingR)));","\t\t}","","\t\tfunction isStart(seg) {","\t\t\tif (seg) {","\t\t\t\tfor (var i = 0, l = starts.length; i < l; i++) {","\t\t\t\t\tif (seg === starts[i])","\t\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t}","\t\t\treturn false;","\t\t}","","\t\tfunction visitPath(path) {","\t\t\tvar segments = path._segments;","\t\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\t\tsegments[i]._visited = true;","\t\t\t}","\t\t}","","\t\tfunction getCrossingSegments(segment, collectStarts) {","\t\t\tvar inter = segment._intersection,","\t\t\t\tstart = inter,","\t\t\t\tcrossings = [];","\t\t\tif (collectStarts)","\t\t\t\tstarts = [segment];","","\t\t\tfunction collect(inter, end) {","\t\t\t\twhile (inter && inter !== end) {","\t\t\t\t\tvar other = inter._segment,","\t\t\t\t\t\tpath = other._path,","\t\t\t\t\t\tnext = other.getNext() || path && path.getFirstSegment(),","\t\t\t\t\t\tnextInter = next && next._intersection;","\t\t\t\t\tif (other !== segment && (isStart(other) || isStart(next)","\t\t\t\t\t\t|| next && (isValid(other) && (isValid(next)","\t\t\t\t\t\t\t|| nextInter && isValid(nextInter._segment))))) {","\t\t\t\t\t\tcrossings.push(other);","\t\t\t\t\t}","\t\t\t\t\tif (collectStarts)","\t\t\t\t\t\tstarts.push(other);","\t\t\t\t\tinter = inter._next;","\t\t\t\t}","\t\t\t}","","\t\t\tif (inter) {","\t\t\t\tcollect(inter);","\t\t\t\twhile (inter && inter._prev)","\t\t\t\t\tinter = inter._prev;","\t\t\t\tcollect(inter, start);","\t\t\t}","\t\t\treturn crossings;","\t\t}","","\t\tsegments.sort(function(seg1, seg2) {","\t\t\tvar inter1 = seg1._intersection,","\t\t\t\tinter2 = seg2._intersection,","\t\t\t\tover1 = !!(inter1 && inter1._overlap),","\t\t\t\tover2 = !!(inter2 && inter2._overlap),","\t\t\t\tpath1 = seg1._path,","\t\t\t\tpath2 = seg2._path;","\t\t\treturn over1 ^ over2","\t\t\t\t\t? over1 ? 1 : -1","\t\t\t\t\t: !inter1 ^ !inter2","\t\t\t\t\t\t? inter1 ? 1 : -1","\t\t\t\t\t\t: path1 !== path2","\t\t\t\t\t\t\t? path1._id - path2._id","\t\t\t\t\t\t\t: seg1._index - seg2._index;","\t\t});","","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar seg = segments[i],","\t\t\t\tvalid = isValid(seg),","\t\t\t\tpath = null,","\t\t\t\tfinished = false,","\t\t\t\tclosed = true,","\t\t\t\tbranches = [],","\t\t\t\tbranch,","\t\t\t\tvisited,","\t\t\t\thandleIn;","\t\t\tif (valid && seg._path._overlapsOnly) {","\t\t\t\tvar path1 = seg._path,","\t\t\t\t\tpath2 = seg._intersection._segment._path;","\t\t\t\tif (path1.compare(path2)) {","\t\t\t\t\tif (path1.getArea())","\t\t\t\t\t\tpaths.push(path1.clone(false));","\t\t\t\t\tvisitPath(path1);","\t\t\t\t\tvisitPath(path2);","\t\t\t\t\tvalid = false;","\t\t\t\t}","\t\t\t}","\t\t\twhile (valid) {","\t\t\t\tvar first = !path,","\t\t\t\t\tcrossings = getCrossingSegments(seg, first),","\t\t\t\t\tother = crossings.shift(),","\t\t\t\t\tfinished = !first && (isStart(seg) || isStart(other)),","\t\t\t\t\tcross = !finished && other;","\t\t\t\tif (first) {","\t\t\t\t\tpath = new Path(Item.NO_INSERT);","\t\t\t\t\tbranch = null;","\t\t\t\t}","\t\t\t\tif (finished) {","\t\t\t\t\tif (seg.isFirst() || seg.isLast())","\t\t\t\t\t\tclosed = seg._path._closed;","\t\t\t\t\tseg._visited = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tif (cross && branch) {","\t\t\t\t\tbranches.push(branch);","\t\t\t\t\tbranch = null;","\t\t\t\t}","\t\t\t\tif (!branch) {","\t\t\t\t\tif (cross)","\t\t\t\t\t\tcrossings.push(seg);","\t\t\t\t\tbranch = {","\t\t\t\t\t\tstart: path._segments.length,","\t\t\t\t\t\tcrossings: crossings,","\t\t\t\t\t\tvisited: visited = [],","\t\t\t\t\t\thandleIn: handleIn","\t\t\t\t\t};","\t\t\t\t}","\t\t\t\tif (cross)","\t\t\t\t\tseg = other;","\t\t\t\tif (!isValid(seg)) {","\t\t\t\t\tpath.removeSegments(branch.start);","\t\t\t\t\tfor (var j = 0, k = visited.length; j < k; j++) {","\t\t\t\t\t\tvisited[j]._visited = false;","\t\t\t\t\t}","\t\t\t\t\tvisited.length = 0;","\t\t\t\t\tdo {","\t\t\t\t\t\tseg = branch && branch.crossings.shift();","\t\t\t\t\t\tif (!seg) {","\t\t\t\t\t\t\tbranch = branches.pop();","\t\t\t\t\t\t\tif (branch) {","\t\t\t\t\t\t\t\tvisited = branch.visited;","\t\t\t\t\t\t\t\thandleIn = branch.handleIn;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t} while (branch && !isValid(seg));","\t\t\t\t\tif (!seg)","\t\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\tvar next = seg.getNext();","\t\t\t\tpath.add(new Segment(seg._point, handleIn,","\t\t\t\t\t\tnext && seg._handleOut));","\t\t\t\tseg._visited = true;","\t\t\t\tvisited.push(seg);","\t\t\t\tseg = next || seg._path.getFirstSegment();","\t\t\t\thandleIn = next && next._handleIn;","\t\t\t}","\t\t\tif (finished) {","\t\t\t\tif (closed) {","\t\t\t\t\tpath.getFirstSegment().setHandleIn(handleIn);","\t\t\t\t\tpath.setClosed(closed);","\t\t\t\t}","\t\t\t\tif (path.getArea() !== 0) {","\t\t\t\t\tpaths.push(path);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn paths;","\t}","","\treturn {","\t\t_getWinding: function(point, dir, closed) {","\t\t\treturn getWinding(point, this.getCurves(), dir, closed);","\t\t},","","\t\tunite: function(path, options) {","\t\t\treturn traceBoolean(this, path, 'unite', options);","\t\t},","","\t\tintersect: function(path, options) {","\t\t\treturn traceBoolean(this, path, 'intersect', options);","\t\t},","","\t\tsubtract: function(path, options) {","\t\t\treturn traceBoolean(this, path, 'subtract', options);","\t\t},","","\t\texclude: function(path, options) {","\t\t\treturn traceBoolean(this, path, 'exclude', options);","\t\t},","","\t\tdivide: function(path, options) {","\t\t\treturn options && (options.trace == false || options.stroke)","\t\t\t\t\t? splitBoolean(this, path, 'divide')","\t\t\t\t\t: createResult([","\t\t\t\t\t\tthis.subtract(path, options),","\t\t\t\t\t\tthis.intersect(path, options)","\t\t\t\t\t], true, this, path, options);","\t\t},","","\t\tresolveCrossings: function() {","\t\t\tvar children = this._children,","\t\t\t\tpaths = children || [this];","","\t\t\tfunction hasOverlap(seg) {","\t\t\t\tvar inter = seg && seg._intersection;","\t\t\t\treturn inter && inter._overlap;","\t\t\t}","","\t\t\tvar hasOverlaps = false,","\t\t\t\thasCrossings = false,","\t\t\t\tintersections = this.getIntersections(null, function(inter) {","\t\t\t\t\treturn inter.hasOverlap() && (hasOverlaps = true) ||","\t\t\t\t\t\t\tinter.isCrossing() && (hasCrossings = true);","\t\t\t\t}),","\t\t\t\tclearCurves = hasOverlaps && hasCrossings && [];","\t\t\tintersections = CurveLocation.expand(intersections);","\t\t\tif (hasOverlaps) {","\t\t\t\tvar overlaps = divideLocations(intersections, function(inter) {","\t\t\t\t\treturn inter.hasOverlap();","\t\t\t\t}, clearCurves);","\t\t\t\tfor (var i = overlaps.length - 1; i >= 0; i--) {","\t\t\t\t\tvar seg = overlaps[i]._segment,","\t\t\t\t\t\tprev = seg.getPrevious(),","\t\t\t\t\t\tnext = seg.getNext();","\t\t\t\t\tif (hasOverlap(prev) && hasOverlap(next)) {","\t\t\t\t\t\tseg.remove();","\t\t\t\t\t\tprev._handleOut._set(0, 0);","\t\t\t\t\t\tnext._handleIn._set(0, 0);","\t\t\t\t\t\tif (prev !== seg && !prev.getCurve().hasLength()) {","\t\t\t\t\t\t\tnext._handleIn.set(prev._handleIn);","\t\t\t\t\t\t\tprev.remove();","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif (hasCrossings) {","\t\t\t\tdivideLocations(intersections, hasOverlaps && function(inter) {","\t\t\t\t\tvar curve1 = inter.getCurve(),","\t\t\t\t\t\tseg1 = inter.getSegment(),","\t\t\t\t\t\tother = inter._intersection,","\t\t\t\t\t\tcurve2 = other._curve,","\t\t\t\t\t\tseg2 = other._segment;","\t\t\t\t\tif (curve1 && curve2 && curve1._path && curve2._path)","\t\t\t\t\t\treturn true;","\t\t\t\t\tif (seg1)","\t\t\t\t\t\tseg1._intersection = null;","\t\t\t\t\tif (seg2)","\t\t\t\t\t\tseg2._intersection = null;","\t\t\t\t}, clearCurves);","\t\t\t\tif (clearCurves)","\t\t\t\t\tclearCurveHandles(clearCurves);","\t\t\t\tpaths = tracePaths(Base.each(paths, function(path) {","\t\t\t\t\tthis.push.apply(this, path._segments);","\t\t\t\t}, []));","\t\t\t}","\t\t\tvar length = paths.length,","\t\t\t\titem;","\t\t\tif (length > 1 && children) {","\t\t\t\tif (paths !== children)","\t\t\t\t\tthis.setChildren(paths);","\t\t\t\titem = this;","\t\t\t} else if (length === 1 && !children) {","\t\t\t\tif (paths[0] !== this)","\t\t\t\t\tthis.setSegments(paths[0].removeSegments());","\t\t\t\titem = this;","\t\t\t}","\t\t\tif (!item) {","\t\t\t\titem = new CompoundPath(Item.NO_INSERT);","\t\t\t\titem.addChildren(paths);","\t\t\t\titem = item.reduce();","\t\t\t\titem.copyAttributes(this);","\t\t\t\tthis.replaceWith(item);","\t\t\t}","\t\t\treturn item;","\t\t},","","\t\treorient: function(nonZero, clockwise) {","\t\t\tvar children = this._children;","\t\t\tif (children && children.length) {","\t\t\t\tthis.setChildren(reorientPaths(this.removeChildren(),","\t\t\t\t\t\tfunction(w) {","\t\t\t\t\t\t\treturn !!(nonZero ? w : w & 1);","\t\t\t\t\t\t},","\t\t\t\t\t\tclockwise));","\t\t\t} else if (clockwise !== undefined) {","\t\t\t\tthis.setClockwise(clockwise);","\t\t\t}","\t\t\treturn this;","\t\t},","","\t\tgetInteriorPoint: function() {","\t\t\tvar bounds = this.getBounds(),","\t\t\t\tpoint = bounds.getCenter(true);","\t\t\tif (!this.contains(point)) {","\t\t\t\tvar curves = this.getCurves(),","\t\t\t\t\ty = point.y,","\t\t\t\t\tintercepts = [],","\t\t\t\t\troots = [];","\t\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\t\t\tvar v = curves[i].getValues(),","\t\t\t\t\t\to0 = v[1],","\t\t\t\t\t\to1 = v[3],","\t\t\t\t\t\to2 = v[5],","\t\t\t\t\t\to3 = v[7];","\t\t\t\t\tif (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {","\t\t\t\t\t\tvar monoCurves = Curve.getMonoCurves(v);","\t\t\t\t\t\tfor (var j = 0, m = monoCurves.length; j < m; j++) {","\t\t\t\t\t\t\tvar mv = monoCurves[j],","\t\t\t\t\t\t\t\tmo0 = mv[1],","\t\t\t\t\t\t\t\tmo3 = mv[7];","\t\t\t\t\t\t\tif ((mo0 !== mo3) &&","\t\t\t\t\t\t\t\t(y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)){","\t\t\t\t\t\t\t\tvar x = y === mo0 ? mv[0]","\t\t\t\t\t\t\t\t\t: y === mo3 ? mv[6]","\t\t\t\t\t\t\t\t\t: Curve.solveCubic(mv, 1, y, roots, 0, 1)","\t\t\t\t\t\t\t\t\t\t=== 1","\t\t\t\t\t\t\t\t\t\t? Curve.getPoint(mv, roots[0]).x","\t\t\t\t\t\t\t\t\t\t: (mv[0] + mv[6]) / 2;","\t\t\t\t\t\t\t\tintercepts.push(x);","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (intercepts.length > 1) {","\t\t\t\t\tintercepts.sort(function(a, b) { return a - b; });","\t\t\t\t\tpoint.x = (intercepts[0] + intercepts[1]) / 2;","\t\t\t\t}","\t\t\t}","\t\t\treturn point;","\t\t}","\t};","});","","var PathFlattener = Base.extend({","\t_class: 'PathFlattener',","","\tinitialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {","\t\tvar curves = [],","\t\t\tparts = [],","\t\t\tlength = 0,","\t\t\tminSpan = 1 / (maxRecursion || 32),","\t\t\tsegments = path._segments,","\t\t\tsegment1 = segments[0],","\t\t\tsegment2;","","\t\tfunction addCurve(segment1, segment2) {","\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);","\t\t\tcurves.push(curve);","\t\t\tcomputeParts(curve, segment1._index, 0, 1);","\t\t}","","\t\tfunction computeParts(curve, index, t1, t2) {","\t\t\tif ((t2 - t1) > minSpan","\t\t\t\t\t&& !(ignoreStraight && Curve.isStraight(curve))","\t\t\t\t\t&& !Curve.isFlatEnough(curve, flatness || 0.25)) {","\t\t\t\tvar halves = Curve.subdivide(curve, 0.5),","\t\t\t\t\ttMid = (t1 + t2) / 2;","\t\t\t\tcomputeParts(halves[0], index, t1, tMid);","\t\t\t\tcomputeParts(halves[1], index, tMid, t2);","\t\t\t} else {","\t\t\t\tvar dx = curve[6] - curve[0],","\t\t\t\t\tdy = curve[7] - curve[1],","\t\t\t\t\tdist = Math.sqrt(dx * dx + dy * dy);","\t\t\t\tif (dist > 0) {","\t\t\t\t\tlength += dist;","\t\t\t\t\tparts.push({","\t\t\t\t\t\toffset: length,","\t\t\t\t\t\tcurve: curve,","\t\t\t\t\t\tindex: index,","\t\t\t\t\t\ttime: t2,","\t\t\t\t\t});","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfor (var i = 1, l = segments.length; i < l; i++) {","\t\t\tsegment2 = segments[i];","\t\t\taddCurve(segment1, segment2);","\t\t\tsegment1 = segment2;","\t\t}","\t\tif (path._closed)","\t\t\taddCurve(segment2, segments[0]);","\t\tthis.curves = curves;","\t\tthis.parts = parts;","\t\tthis.length = length;","\t\tthis.index = 0;","\t},","","\t_get: function(offset) {","\t\tvar parts = this.parts,","\t\t\tlength = parts.length,","\t\t\tstart,","\t\t\ti, j = this.index;","\t\tfor (;;) {","\t\t\ti = j;","\t\t\tif (!j || parts[--j].offset < offset)","\t\t\t\tbreak;","\t\t}","\t\tfor (; i < length; i++) {","\t\t\tvar part = parts[i];","\t\t\tif (part.offset >= offset) {","\t\t\t\tthis.index = i;","\t\t\t\tvar prev = parts[i - 1],","\t\t\t\t\tprevTime = prev && prev.index === part.index ? prev.time : 0,","\t\t\t\t\tprevOffset = prev ? prev.offset : 0;","\t\t\t\treturn {","\t\t\t\t\tindex: part.index,","\t\t\t\t\ttime: prevTime + (part.time - prevTime)","\t\t\t\t\t\t* (offset - prevOffset) / (part.offset - prevOffset)","\t\t\t\t};","\t\t\t}","\t\t}","\t\treturn {","\t\t\tindex: parts[length - 1].index,","\t\t\ttime: 1","\t\t};","\t},","","\tdrawPart: function(ctx, from, to) {","\t\tvar start = this._get(from),","\t\t\tend = this._get(to);","\t\tfor (var i = start.index, l = end.index; i <= l; i++) {","\t\t\tvar curve = Curve.getPart(this.curves[i],","\t\t\t\t\ti === start.index ? start.time : 0,","\t\t\t\t\ti === end.index ? end.time : 1);","\t\t\tif (i === start.index)","\t\t\t\tctx.moveTo(curve[0], curve[1]);","\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));","\t\t}","\t}","}, Base.each(Curve._evaluateMethods,","\tfunction(name) {","\t\tthis[name + 'At'] = function(offset) {","\t\t\tvar param = this._get(offset);","\t\t\treturn Curve[name](this.curves[param.index], param.time);","\t\t};","\t}, {})",");","","var PathFitter = Base.extend({","\tinitialize: function(path) {","\t\tvar points = this.points = [],","\t\t\tsegments = path._segments,","\t\t\tclosed = path._closed;","\t\tfor (var i = 0, prev, l = segments.length; i < l; i++) {","\t\t\tvar point = segments[i].point;","\t\t\tif (!prev || !prev.equals(point)) {","\t\t\t\tpoints.push(prev = point.clone());","\t\t\t}","\t\t}","\t\tif (closed) {","\t\t\tpoints.unshift(points[points.length - 1]);","\t\t\tpoints.push(points[1]);","\t\t}","\t\tthis.closed = closed;","\t},","","\tfit: function(error) {","\t\tvar points = this.points,","\t\t\tlength = points.length,","\t\t\tsegments = null;","\t\tif (length > 0) {","\t\t\tsegments = [new Segment(points[0])];","\t\t\tif (length > 1) {","\t\t\t\tthis.fitCubic(segments, error, 0, length - 1,","\t\t\t\t\t\tpoints[1].subtract(points[0]),","\t\t\t\t\t\tpoints[length - 2].subtract(points[length - 1]));","\t\t\t\tif (this.closed) {","\t\t\t\t\tsegments.shift();","\t\t\t\t\tsegments.pop();","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn segments;","\t},","","\tfitCubic: function(segments, error, first, last, tan1, tan2) {","\t\tvar points = this.points;","\t\tif (last - first === 1) {","\t\t\tvar pt1 = points[first],","\t\t\t\tpt2 = points[last],","\t\t\t\tdist = pt1.getDistance(pt2) / 3;","\t\t\tthis.addCurve(segments, [pt1, pt1.add(tan1.normalize(dist)),","\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);","\t\t\treturn;","\t\t}","\t\tvar uPrime = this.chordLengthParameterize(first, last),","\t\t\tmaxError = Math.max(error, error * error),","\t\t\tsplit,","\t\t\tparametersInOrder = true;","\t\tfor (var i = 0; i <= 4; i++) {","\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);","\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);","\t\t\tif (max.error < error && parametersInOrder) {","\t\t\t\tthis.addCurve(segments, curve);","\t\t\t\treturn;","\t\t\t}","\t\t\tsplit = max.index;","\t\t\tif (max.error >= maxError)","\t\t\t\tbreak;","\t\t\tparametersInOrder = this.reparameterize(first, last, uPrime, curve);","\t\t\tmaxError = max.error;","\t\t}","\t\tvar tanCenter = points[split - 1].subtract(points[split + 1]);","\t\tthis.fitCubic(segments, error, first, split, tan1, tanCenter);","\t\tthis.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);","\t},","","\taddCurve: function(segments, curve) {","\t\tvar prev = segments[segments.length - 1];","\t\tprev.setHandleOut(curve[1].subtract(curve[0]));","\t\tsegments.push(new Segment(curve[3], curve[2].subtract(curve[3])));","\t},","","\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {","\t\tvar epsilon = 1e-12,","\t\t\tabs = Math.abs,","\t\t\tpoints = this.points,","\t\t\tpt1 = points[first],","\t\t\tpt2 = points[last],","\t\t\tC = [[0, 0], [0, 0]],","\t\t\tX = [0, 0];","","\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {","\t\t\tvar u = uPrime[i],","\t\t\t\tt = 1 - u,","\t\t\t\tb = 3 * u * t,","\t\t\t\tb0 = t * t * t,","\t\t\t\tb1 = b * t,","\t\t\t\tb2 = b * u,","\t\t\t\tb3 = u * u * u,","\t\t\t\ta1 = tan1.normalize(b1),","\t\t\t\ta2 = tan2.normalize(b2),","\t\t\t\ttmp = points[first + i]","\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))","\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));","\t\t\tC[0][0] += a1.dot(a1);","\t\t\tC[0][1] += a1.dot(a2);","\t\t\tC[1][0] = C[0][1];","\t\t\tC[1][1] += a2.dot(a2);","\t\t\tX[0] += a1.dot(tmp);","\t\t\tX[1] += a2.dot(tmp);","\t\t}","","\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],","\t\t\talpha1,","\t\t\talpha2;","\t\tif (abs(detC0C1) > epsilon) {","\t\t\tvar detC0X = C[0][0] * X[1]    - C[1][0] * X[0],","\t\t\t\tdetXC1 = X[0]    * C[1][1] - X[1]    * C[0][1];","\t\t\talpha1 = detXC1 / detC0C1;","\t\t\talpha2 = detC0X / detC0C1;","\t\t} else {","\t\t\tvar c0 = C[0][0] + C[0][1],","\t\t\t\tc1 = C[1][0] + C[1][1];","\t\t\talpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0","\t\t\t\t\t\t\t: abs(c1) > epsilon ? X[1] / c1","\t\t\t\t\t\t\t: 0;","\t\t}","","\t\tvar segLength = pt2.getDistance(pt1),","\t\t\teps = epsilon * segLength,","\t\t\thandle1,","\t\t\thandle2;","\t\tif (alpha1 < eps || alpha2 < eps) {","\t\t\talpha1 = alpha2 = segLength / 3;","\t\t} else {","\t\t\tvar line = pt2.subtract(pt1);","\t\t\thandle1 = tan1.normalize(alpha1);","\t\t\thandle2 = tan2.normalize(alpha2);","\t\t\tif (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {","\t\t\t\talpha1 = alpha2 = segLength / 3;","\t\t\t\thandle1 = handle2 = null;","\t\t\t}","\t\t}","","\t\treturn [pt1,","\t\t\t\tpt1.add(handle1 || tan1.normalize(alpha1)),","\t\t\t\tpt2.add(handle2 || tan2.normalize(alpha2)),","\t\t\t\tpt2];","\t},","","\treparameterize: function(first, last, u, curve) {","\t\tfor (var i = first; i <= last; i++) {","\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);","\t\t}","\t\tfor (var i = 1, l = u.length; i < l; i++) {","\t\t\tif (u[i] <= u[i - 1])","\t\t\t\treturn false;","\t\t}","\t\treturn true;","\t},","","\tfindRoot: function(curve, point, u) {","\t\tvar curve1 = [],","\t\t\tcurve2 = [];","\t\tfor (var i = 0; i <= 2; i++) {","\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);","\t\t}","\t\tfor (var i = 0; i <= 1; i++) {","\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);","\t\t}","\t\tvar pt = this.evaluate(3, curve, u),","\t\t\tpt1 = this.evaluate(2, curve1, u),","\t\t\tpt2 = this.evaluate(1, curve2, u),","\t\t\tdiff = pt.subtract(point),","\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);","\t\treturn Numerical.isZero(df) ? u : u - diff.dot(pt1) / df;","\t},","","\tevaluate: function(degree, curve, t) {","\t\tvar tmp = curve.slice();","\t\tfor (var i = 1; i <= degree; i++) {","\t\t\tfor (var j = 0; j <= degree - i; j++) {","\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));","\t\t\t}","\t\t}","\t\treturn tmp[0];","\t},","","\tchordLengthParameterize: function(first, last) {","\t\tvar u = [0];","\t\tfor (var i = first + 1; i <= last; i++) {","\t\t\tu[i - first] = u[i - first - 1]","\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);","\t\t}","\t\tfor (var i = 1, m = last - first; i <= m; i++) {","\t\t\tu[i] /= u[m];","\t\t}","\t\treturn u;","\t},","","\tfindMaxError: function(first, last, curve, u) {","\t\tvar index = Math.floor((last - first + 1) / 2),","\t\t\tmaxDist = 0;","\t\tfor (var i = first + 1; i < last; i++) {","\t\t\tvar P = this.evaluate(3, curve, u[i - first]);","\t\t\tvar v = P.subtract(this.points[i]);","\t\t\tvar dist = v.x * v.x + v.y * v.y;","\t\t\tif (dist >= maxDist) {","\t\t\t\tmaxDist = dist;","\t\t\t\tindex = i;","\t\t\t}","\t\t}","\t\treturn {","\t\t\terror: maxDist,","\t\t\tindex: index","\t\t};","\t}","});","","var TextItem = Item.extend({","\t_class: 'TextItem',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_serializeFields: {","\t\tcontent: null","\t},","\t_boundsOptions: { stroke: false, handle: false },","","\tinitialize: function TextItem(arg) {","\t\tthis._content = '';","\t\tthis._lines = [];","\t\tvar hasProps = arg && Base.isPlainObject(arg)","\t\t\t\t&& arg.x === undefined && arg.y === undefined;","\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));","\t},","","\t_equals: function(item) {","\t\treturn this._content === item._content;","\t},","","\tcopyContent: function(source) {","\t\tthis.setContent(source._content);","\t},","","\tgetContent: function() {","\t\treturn this._content;","\t},","","\tsetContent: function(content) {","\t\tthis._content = '' + content;","\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);","\t\tthis._changed(265);","\t},","","\tisEmpty: function() {","\t\treturn !this._content;","\t},","","\tgetCharacterStyle: '#getStyle',","\tsetCharacterStyle: '#setStyle',","","\tgetParagraphStyle: '#getStyle',","\tsetParagraphStyle: '#setStyle'","});","","var PointText = TextItem.extend({","\t_class: 'PointText',","","\tinitialize: function PointText() {","\t\tTextItem.apply(this, arguments);","\t},","","\tgetPoint: function() {","\t\tvar point = this._matrix.getTranslation();","\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');","\t},","","\tsetPoint: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.translate(point.subtract(this._matrix.getTranslation()));","\t},","","\t_draw: function(ctx, param, viewMatrix) {","\t\tif (!this._content)","\t\t\treturn;","\t\tthis._setStyles(ctx, param, viewMatrix);","\t\tvar lines = this._lines,","\t\t\tstyle = this._style,","\t\t\thasFill = style.hasFill(),","\t\t\thasStroke = style.hasStroke(),","\t\t\tleading = style.getLeading(),","\t\t\tshadowColor = ctx.shadowColor;","\t\tctx.font = style.getFontStyle();","\t\tctx.textAlign = style.getJustification();","\t\tfor (var i = 0, l = lines.length; i < l; i++) {","\t\t\tctx.shadowColor = shadowColor;","\t\t\tvar line = lines[i];","\t\t\tif (hasFill) {","\t\t\t\tctx.fillText(line, 0, 0);","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (hasStroke)","\t\t\t\tctx.strokeText(line, 0, 0);","\t\t\tctx.translate(0, leading);","\t\t}","\t},","","\t_getBounds: function(matrix, options) {","\t\tvar style = this._style,","\t\t\tlines = this._lines,","\t\t\tnumLines = lines.length,","\t\t\tjustification = style.getJustification(),","\t\t\tleading = style.getLeading(),","\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),","\t\t\tx = 0;","\t\tif (justification !== 'left')","\t\t\tx -= width / (justification === 'center' ? 2: 1);","\t\tvar rect = new Rectangle(x,","\t\t\t\t\tnumLines ? - 0.75 * leading : 0,","\t\t\t\t\twidth, numLines * leading);","\t\treturn matrix ? matrix._transformBounds(rect, rect) : rect;","\t}","});","","var Color = Base.extend(new function() {","\tvar types = {","\t\tgray: ['gray'],","\t\trgb: ['red', 'green', 'blue'],","\t\thsb: ['hue', 'saturation', 'brightness'],","\t\thsl: ['hue', 'saturation', 'lightness'],","\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']","\t};","","\tvar componentParsers = {},","\t\tcolorCache = {},","\t\tcolorCtx;","","\tfunction fromCSS(string) {","\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),","\t\t\tcomponents;","\t\tif (match) {","\t\t\tcomponents = [0, 0, 0];","\t\t\tfor (var i = 0; i < 3; i++) {","\t\t\t\tvar value = match[i + 1];","\t\t\t\tcomponents[i] = parseInt(value.length == 1","\t\t\t\t\t\t? value + value : value, 16) / 255;","\t\t\t}","\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {","\t\t\tcomponents = match[1].split(',');","\t\t\tfor (var i = 0, l = components.length; i < l; i++) {","\t\t\t\tvar value = +components[i];","\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;","\t\t\t}","\t\t} else if (window) {","\t\t\tvar cached = colorCache[string];","\t\t\tif (!cached) {","\t\t\t\tif (!colorCtx) {","\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);","\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';","\t\t\t\t}","\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';","\t\t\t\tcolorCtx.fillStyle = string;","\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);","\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;","\t\t\t\tcached = colorCache[string] = [","\t\t\t\t\tdata[0] / 255,","\t\t\t\t\tdata[1] / 255,","\t\t\t\t\tdata[2] / 255","\t\t\t\t];","\t\t\t}","\t\t\tcomponents = cached.slice();","\t\t} else {","\t\t\tcomponents = [0, 0, 0];","\t\t}","\t\treturn components;","\t}","","\tvar hsbIndices = [","\t\t[0, 3, 1],","\t\t[2, 0, 1],","\t\t[1, 0, 3],","\t\t[1, 2, 0],","\t\t[3, 1, 0],","\t\t[0, 1, 2]","\t];","","\tvar converters = {","\t\t'rgb-hsb': function(r, g, b) {","\t\t\tvar max = Math.max(r, g, b),","\t\t\t\tmin = Math.min(r, g, b),","\t\t\t\tdelta = max - min,","\t\t\t\th = delta === 0 ? 0","\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)","\t\t\t\t\t\t: max == g ? (b - r) / delta + 2","\t\t\t\t\t\t:            (r - g) / delta + 4) * 60;","\t\t\treturn [h, max === 0 ? 0 : delta / max, max];","\t\t},","","\t\t'hsb-rgb': function(h, s, b) {","\t\t\th = (((h / 60) % 6) + 6) % 6;","\t\t\tvar i = Math.floor(h),","\t\t\t\tf = h - i,","\t\t\t\ti = hsbIndices[i],","\t\t\t\tv = [","\t\t\t\t\tb,","\t\t\t\t\tb * (1 - s),","\t\t\t\t\tb * (1 - s * f),","\t\t\t\t\tb * (1 - s * (1 - f))","\t\t\t\t];","\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];","\t\t},","","\t\t'rgb-hsl': function(r, g, b) {","\t\t\tvar max = Math.max(r, g, b),","\t\t\t\tmin = Math.min(r, g, b),","\t\t\t\tdelta = max - min,","\t\t\t\tachromatic = delta === 0,","\t\t\t\th = achromatic ? 0","\t\t\t\t\t:   ( max == r ? (g - b) / delta + (g < b ? 6 : 0)","\t\t\t\t\t\t: max == g ? (b - r) / delta + 2","\t\t\t\t\t\t:            (r - g) / delta + 4) * 60,","\t\t\t\tl = (max + min) / 2,","\t\t\t\ts = achromatic ? 0 : l < 0.5","\t\t\t\t\t\t? delta / (max + min)","\t\t\t\t\t\t: delta / (2 - max - min);","\t\t\treturn [h, s, l];","\t\t},","","\t\t'hsl-rgb': function(h, s, l) {","\t\t\th = (((h / 360) % 1) + 1) % 1;","\t\t\tif (s === 0)","\t\t\t\treturn [l, l, l];","\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],","\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,","\t\t\t\tt1 = 2 * l - t2,","\t\t\t\tc = [];","\t\t\tfor (var i = 0; i < 3; i++) {","\t\t\t\tvar t3 = t3s[i];","\t\t\t\tif (t3 < 0) t3 += 1;","\t\t\t\tif (t3 > 1) t3 -= 1;","\t\t\t\tc[i] = 6 * t3 < 1","\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3","\t\t\t\t\t: 2 * t3 < 1","\t\t\t\t\t\t? t2","\t\t\t\t\t\t: 3 * t3 < 2","\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6","\t\t\t\t\t\t\t: t1;","\t\t\t}","\t\t\treturn c;","\t\t},","","\t\t'rgb-gray': function(r, g, b) {","\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];","\t\t},","","\t\t'gray-rgb': function(g) {","\t\t\treturn [g, g, g];","\t\t},","","\t\t'gray-hsb': function(g) {","\t\t\treturn [0, 0, g];","\t\t},","","\t\t'gray-hsl': function(g) {","\t\t\treturn [0, 0, g];","\t\t},","","\t\t'gradient-rgb': function() {","\t\t\treturn [];","\t\t},","","\t\t'rgb-gradient': function() {","\t\t\treturn [];","\t\t}","","\t};","","\treturn Base.each(types, function(properties, type) {","\t\tcomponentParsers[type] = [];","\t\tBase.each(properties, function(name, index) {","\t\t\tvar part = Base.capitalize(name),","\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),","\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'","\t\t\t\t\t? function(value) {","\t\t\t\t\t\tvar current = this._components[0];","\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value","\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });","\t\t\t\t\t\tif (current !== value) {","\t\t\t\t\t\t\tif (current)","\t\t\t\t\t\t\t\tcurrent._removeOwner(this);","\t\t\t\t\t\t\tif (value)","\t\t\t\t\t\t\t\tvalue._addOwner(this);","\t\t\t\t\t\t}","\t\t\t\t\t\treturn value;","\t\t\t\t\t}","\t\t\t\t\t: type === 'gradient'","\t\t\t\t\t\t? function() {","\t\t\t\t\t\t\treturn Point.read(arguments, 0, {","\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',","\t\t\t\t\t\t\t\t\tclone: true","\t\t\t\t\t\t\t});","\t\t\t\t\t\t}","\t\t\t\t\t\t: function(value) {","\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;","\t\t\t\t\t\t};","","\t\t\tthis['get' + part] = function() {","\t\t\t\treturn this._type === type","\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)","\t\t\t\t\t\t? this._components[index]","\t\t\t\t\t\t: this._convert(type)[index];","\t\t\t};","","\t\t\tthis['set' + part] = function(value) {","\t\t\t\tif (this._type !== type","\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {","\t\t\t\t\tthis._components = this._convert(type);","\t\t\t\t\tthis._properties = types[type];","\t\t\t\t\tthis._type = type;","\t\t\t\t}","\t\t\t\tthis._components[index] = parser.call(this, value);","\t\t\t\tthis._changed();","\t\t\t};","\t\t}, this);","\t}, {","\t\t_class: 'Color',","\t\t_readIndex: true,","","\t\tinitialize: function Color(arg) {","\t\t\tvar args = arguments,","\t\t\t\treading = this.__read,","\t\t\t\tread = 0,","\t\t\t\ttype,","\t\t\t\tcomponents,","\t\t\t\talpha,","\t\t\t\tvalues;","\t\t\tif (Array.isArray(arg)) {","\t\t\t\targs = arg;","\t\t\t\targ = args[0];","\t\t\t}","\t\t\tvar argType = arg != null && typeof arg;","\t\t\tif (argType === 'string' && arg in types) {","\t\t\t\ttype = arg;","\t\t\t\targ = args[1];","\t\t\t\tif (Array.isArray(arg)) {","\t\t\t\t\tcomponents = arg;","\t\t\t\t\talpha = args[2];","\t\t\t\t} else {","\t\t\t\t\tif (reading)","\t\t\t\t\t\tread = 1;","\t\t\t\t\targs = Base.slice(args, 1);","\t\t\t\t\targType = typeof arg;","\t\t\t\t}","\t\t\t}","\t\t\tif (!components) {","\t\t\t\tvalues = argType === 'number'","\t\t\t\t\t\t? args","\t\t\t\t\t\t: argType === 'object' && arg.length != null","\t\t\t\t\t\t\t? arg","\t\t\t\t\t\t\t: null;","\t\t\t\tif (values) {","\t\t\t\t\tif (!type)","\t\t\t\t\t\ttype = values.length >= 3","\t\t\t\t\t\t\t\t? 'rgb'","\t\t\t\t\t\t\t\t: 'gray';","\t\t\t\t\tvar length = types[type].length;","\t\t\t\t\talpha = values[length];","\t\t\t\t\tif (reading) {","\t\t\t\t\t\tread += values === arguments","\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)","\t\t\t\t\t\t\t: 1;","\t\t\t\t\t}","\t\t\t\t\tif (values.length > length)","\t\t\t\t\t\tvalues = Base.slice(values, 0, length);","\t\t\t\t} else if (argType === 'string') {","\t\t\t\t\ttype = 'rgb';","\t\t\t\t\tcomponents = fromCSS(arg);","\t\t\t\t\tif (components.length === 4) {","\t\t\t\t\t\talpha = components[3];","\t\t\t\t\t\tcomponents.length--;","\t\t\t\t\t}","\t\t\t\t} else if (argType === 'object') {","\t\t\t\t\tif (arg.constructor === Color) {","\t\t\t\t\t\ttype = arg._type;","\t\t\t\t\t\tcomponents = arg._components.slice();","\t\t\t\t\t\talpha = arg._alpha;","\t\t\t\t\t\tif (type === 'gradient') {","\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {","\t\t\t\t\t\t\t\tvar point = components[i];","\t\t\t\t\t\t\t\tif (point)","\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t} else if (arg.constructor === Gradient) {","\t\t\t\t\t\ttype = 'gradient';","\t\t\t\t\t\tvalues = args;","\t\t\t\t\t} else {","\t\t\t\t\t\ttype = 'hue' in arg","\t\t\t\t\t\t\t? 'lightness' in arg","\t\t\t\t\t\t\t\t? 'hsl'","\t\t\t\t\t\t\t\t: 'hsb'","\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg","\t\t\t\t\t\t\t\t\t|| 'radial' in arg","\t\t\t\t\t\t\t\t? 'gradient'","\t\t\t\t\t\t\t\t: 'gray' in arg","\t\t\t\t\t\t\t\t\t? 'gray'","\t\t\t\t\t\t\t\t\t: 'rgb';","\t\t\t\t\t\tvar properties = types[type],","\t\t\t\t\t\t\tparsers = componentParsers[type];","\t\t\t\t\t\tthis._components = components = [];","\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {","\t\t\t\t\t\t\tvar value = arg[properties[i]];","\t\t\t\t\t\t\tif (value == null && !i && type === 'gradient'","\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {","\t\t\t\t\t\t\t\tvalue = {","\t\t\t\t\t\t\t\t\tstops: arg.stops,","\t\t\t\t\t\t\t\t\tradial: arg.radial","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);","\t\t\t\t\t\t\tif (value != null)","\t\t\t\t\t\t\t\tcomponents[i] = value;","\t\t\t\t\t\t}","\t\t\t\t\t\talpha = arg.alpha;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (reading && type)","\t\t\t\t\tread = 1;","\t\t\t}","\t\t\tthis._type = type || 'rgb';","\t\t\tif (!components) {","\t\t\t\tthis._components = components = [];","\t\t\t\tvar parsers = componentParsers[this._type];","\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {","\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);","\t\t\t\t\tif (value != null)","\t\t\t\t\t\tcomponents[i] = value;","\t\t\t\t}","\t\t\t}","\t\t\tthis._components = components;","\t\t\tthis._properties = types[this._type];","\t\t\tthis._alpha = alpha;","\t\t\tif (reading)","\t\t\t\tthis.__read = read;","\t\t\treturn this;","\t\t},","","\t\tset: '#initialize',","","\t\t_serialize: function(options, dictionary) {","\t\t\tvar components = this.getComponents();","\t\t\treturn Base.serialize(","\t\t\t\t\t/^(gray|rgb)$/.test(this._type)","\t\t\t\t\t\t? components","\t\t\t\t\t\t: [this._type].concat(components),","\t\t\t\t\toptions, true, dictionary);","\t\t},","","\t\t_changed: function() {","\t\t\tthis._canvasStyle = null;","\t\t\tif (this._owner)","\t\t\t\tthis._owner._changed(65);","\t\t},","","\t\t_convert: function(type) {","\t\t\tvar converter;","\t\t\treturn this._type === type","\t\t\t\t\t? this._components.slice()","\t\t\t\t\t: (converter = converters[this._type + '-' + type])","\t\t\t\t\t\t? converter.apply(this, this._components)","\t\t\t\t\t\t: converters['rgb-' + type].apply(this,","\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,","\t\t\t\t\t\t\t\tthis._components));","\t\t},","","\t\tconvert: function(type) {","\t\t\treturn new Color(type, this._convert(type), this._alpha);","\t\t},","","\t\tgetType: function() {","\t\t\treturn this._type;","\t\t},","","\t\tsetType: function(type) {","\t\t\tthis._components = this._convert(type);","\t\t\tthis._properties = types[type];","\t\t\tthis._type = type;","\t\t},","","\t\tgetComponents: function() {","\t\t\tvar components = this._components.slice();","\t\t\tif (this._alpha != null)","\t\t\t\tcomponents.push(this._alpha);","\t\t\treturn components;","\t\t},","","\t\tgetAlpha: function() {","\t\t\treturn this._alpha != null ? this._alpha : 1;","\t\t},","","\t\tsetAlpha: function(alpha) {","\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);","\t\t\tthis._changed();","\t\t},","","\t\thasAlpha: function() {","\t\t\treturn this._alpha != null;","\t\t},","","\t\tequals: function(color) {","\t\t\tvar col = Base.isPlainValue(color, true)","\t\t\t\t\t? Color.read(arguments)","\t\t\t\t\t: color;","\t\t\treturn col === this || col && this._class === col._class","\t\t\t\t\t&& this._type === col._type","\t\t\t\t\t&& this.getAlpha() === col.getAlpha()","\t\t\t\t\t&& Base.equals(this._components, col._components)","\t\t\t\t\t|| false;","\t\t},","","\t\ttoString: function() {","\t\t\tvar properties = this._properties,","\t\t\t\tparts = [],","\t\t\t\tisGradient = this._type === 'gradient',","\t\t\t\tf = Formatter.instance;","\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {","\t\t\t\tvar value = this._components[i];","\t\t\t\tif (value != null)","\t\t\t\t\tparts.push(properties[i] + ': '","\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));","\t\t\t}","\t\t\tif (this._alpha != null)","\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));","\t\t\treturn '{ ' + parts.join(', ') + ' }';","\t\t},","","\t\ttoCSS: function(hex) {","\t\t\tvar components = this._convert('rgb'),","\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;","\t\t\tfunction convert(val) {","\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);","\t\t\t}","\t\t\tcomponents = [","\t\t\t\tconvert(components[0]),","\t\t\t\tconvert(components[1]),","\t\t\t\tconvert(components[2])","\t\t\t];","\t\t\tif (alpha < 1)","\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);","\t\t\treturn hex","\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)","\t\t\t\t\t\t+ (components[1] << 8)","\t\t\t\t\t\t+ components[2]).toString(16).slice(1)","\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')","\t\t\t\t\t\t+ components.join(',') + ')';","\t\t},","","\t\ttoCanvasStyle: function(ctx, matrix) {","\t\t\tif (this._canvasStyle)","\t\t\t\treturn this._canvasStyle;","\t\t\tif (this._type !== 'gradient')","\t\t\t\treturn this._canvasStyle = this.toCSS();","\t\t\tvar components = this._components,","\t\t\t\tgradient = components[0],","\t\t\t\tstops = gradient._stops,","\t\t\t\torigin = components[1],","\t\t\t\tdestination = components[2],","\t\t\t\thighlight = components[3],","\t\t\t\tinverse = matrix && matrix.inverted(),","\t\t\t\tcanvasGradient;","\t\t\tif (inverse) {","\t\t\t\torigin = inverse._transformPoint(origin);","\t\t\t\tdestination = inverse._transformPoint(destination);","\t\t\t\tif (highlight)","\t\t\t\t\thighlight = inverse._transformPoint(highlight);","\t\t\t}","\t\t\tif (gradient._radial) {","\t\t\t\tvar radius = destination.getDistance(origin);","\t\t\t\tif (highlight) {","\t\t\t\t\tvar vector = highlight.subtract(origin);","\t\t\t\t\tif (vector.getLength() > radius)","\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));","\t\t\t\t}","\t\t\t\tvar start = highlight || origin;","\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,","\t\t\t\t\t\t0, origin.x, origin.y, radius);","\t\t\t} else {","\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,","\t\t\t\t\t\tdestination.x, destination.y);","\t\t\t}","\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {","\t\t\t\tvar stop = stops[i],","\t\t\t\t\toffset = stop._offset;","\t\t\t\tcanvasGradient.addColorStop(","\t\t\t\t\t\toffset == null ? i / (l - 1) : offset,","\t\t\t\t\t\tstop._color.toCanvasStyle());","\t\t\t}","\t\t\treturn this._canvasStyle = canvasGradient;","\t\t},","","\t\ttransform: function(matrix) {","\t\t\tif (this._type === 'gradient') {","\t\t\t\tvar components = this._components;","\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {","\t\t\t\t\tvar point = components[i];","\t\t\t\t\tmatrix._transformPoint(point, point, true);","\t\t\t\t}","\t\t\t\tthis._changed();","\t\t\t}","\t\t},","","\t\tstatics: {","\t\t\t_types: types,","","\t\t\trandom: function() {","\t\t\t\tvar random = Math.random;","\t\t\t\treturn new Color(random(), random(), random());","\t\t\t}","\t\t}","\t});","},","new function() {","\tvar operators = {","\t\tadd: function(a, b) {","\t\t\treturn a + b;","\t\t},","","\t\tsubtract: function(a, b) {","\t\t\treturn a - b;","\t\t},","","\t\tmultiply: function(a, b) {","\t\t\treturn a * b;","\t\t},","","\t\tdivide: function(a, b) {","\t\t\treturn a / b;","\t\t}","\t};","","\treturn Base.each(operators, function(operator, name) {","\t\tthis[name] = function(color) {","\t\t\tcolor = Color.read(arguments);","\t\t\tvar type = this._type,","\t\t\t\tcomponents1 = this._components,","\t\t\t\tcomponents2 = color._convert(type);","\t\t\tfor (var i = 0, l = components1.length; i < l; i++)","\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);","\t\t\treturn new Color(type, components2,","\t\t\t\t\tthis._alpha != null","\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())","\t\t\t\t\t\t\t: null);","\t\t};","\t}, {","\t});","});","","var Gradient = Base.extend({","\t_class: 'Gradient',","","\tinitialize: function Gradient(stops, radial) {","\t\tthis._id = UID.get();","\t\tif (stops && Base.isPlainObject(stops)) {","\t\t\tthis.set(stops);","\t\t\tstops = radial = null;","\t\t}","\t\tif (this._stops == null) {","\t\t\tthis.setStops(stops || ['white', 'black']);","\t\t}","\t\tif (this._radial == null) {","\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'","\t\t\t\t\t|| radial || false);","\t\t}","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn dictionary.add(this, function() {","\t\t\treturn Base.serialize([this._stops, this._radial],","\t\t\t\t\toptions, true, dictionary);","\t\t});","\t},","","\t_changed: function() {","\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++) {","\t\t\tthis._owners[i]._changed();","\t\t}","\t},","","\t_addOwner: function(color) {","\t\tif (!this._owners)","\t\t\tthis._owners = [];","\t\tthis._owners.push(color);","\t},","","\t_removeOwner: function(color) {","\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;","\t\tif (index != -1) {","\t\t\tthis._owners.splice(index, 1);","\t\t\tif (!this._owners.length)","\t\t\t\tthis._owners = undefined;","\t\t}","\t},","","\tclone: function() {","\t\tvar stops = [];","\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {","\t\t\tstops[i] = this._stops[i].clone();","\t\t}","\t\treturn new Gradient(stops, this._radial);","\t},","","\tgetStops: function() {","\t\treturn this._stops;","\t},","","\tsetStops: function(stops) {","\t\tif (stops.length < 2) {","\t\t\tthrow new Error(","\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');","\t\t}","\t\tvar _stops = this._stops;","\t\tif (_stops) {","\t\t\tfor (var i = 0, l = _stops.length; i < l; i++)","\t\t\t\t_stops[i]._owner = undefined;","\t\t}","\t\t_stops = this._stops = GradientStop.readList(stops, 0, { clone: true });","\t\tfor (var i = 0, l = _stops.length; i < l; i++)","\t\t\t_stops[i]._owner = this;","\t\tthis._changed();","\t},","","\tgetRadial: function() {","\t\treturn this._radial;","\t},","","\tsetRadial: function(radial) {","\t\tthis._radial = radial;","\t\tthis._changed();","\t},","","\tequals: function(gradient) {","\t\tif (gradient === this)","\t\t\treturn true;","\t\tif (gradient && this._class === gradient._class) {","\t\t\tvar stops1 = this._stops,","\t\t\t\tstops2 = gradient._stops,","\t\t\t\tlength = stops1.length;","\t\t\tif (length === stops2.length) {","\t\t\t\tfor (var i = 0; i < length; i++) {","\t\t\t\t\tif (!stops1[i].equals(stops2[i]))","\t\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t\treturn true;","\t\t\t}","\t\t}","\t\treturn false;","\t}","});","","var GradientStop = Base.extend({","\t_class: 'GradientStop',","","\tinitialize: function GradientStop(arg0, arg1) {","\t\tvar color = arg0,","\t\t\toffset = arg1;","\t\tif (typeof arg0 === 'object' && arg1 === undefined) {","\t\t\tif (Array.isArray(arg0) && typeof arg0[0] !== 'number') {","\t\t\t\tcolor = arg0[0];","\t\t\t\toffset = arg0[1];","\t\t\t} else if ('color' in arg0 || 'offset' in arg0","\t\t\t\t\t|| 'rampPoint' in arg0) {","\t\t\t\tcolor = arg0.color;","\t\t\t\toffset = arg0.offset || arg0.rampPoint || 0;","\t\t\t}","\t\t}","\t\tthis.setColor(color);","\t\tthis.setOffset(offset);","\t},","","\tclone: function() {","\t\treturn new GradientStop(this._color.clone(), this._offset);","\t},","","\t_serialize: function(options, dictionary) {","\t\tvar color = this._color,","\t\t\toffset = this._offset;","\t\treturn Base.serialize(offset == null ? [color] : [color, offset],","\t\t\t\toptions, true, dictionary);","\t},","","\t_changed: function() {","\t\tif (this._owner)","\t\t\tthis._owner._changed(65);","\t},","","\tgetOffset: function() {","\t\treturn this._offset;","\t},","","\tsetOffset: function(offset) {","\t\tthis._offset = offset;","\t\tthis._changed();","\t},","","\tgetRampPoint: '#getOffset',","\tsetRampPoint: '#setOffset',","","\tgetColor: function() {","\t\treturn this._color;","\t},","","\tsetColor: function() {","\t\tvar color = Color.read(arguments, 0, { clone: true });","\t\tif (color)","\t\t\tcolor._owner = this;","\t\tthis._color = color;","\t\tthis._changed();","\t},","","\tequals: function(stop) {","\t\treturn stop === this || stop && this._class === stop._class","\t\t\t\t&& this._color.equals(stop._color)","\t\t\t\t&& this._offset == stop._offset","\t\t\t\t|| false;","\t}","});","","var Style = Base.extend(new function() {","\tvar itemDefaults = {","\t\tfillColor: null,","\t\tfillRule: 'nonzero',","\t\tstrokeColor: null,","\t\tstrokeWidth: 1,","\t\tstrokeCap: 'butt',","\t\tstrokeJoin: 'miter',","\t\tstrokeScaling: true,","\t\tmiterLimit: 10,","\t\tdashOffset: 0,","\t\tdashArray: [],","\t\tshadowColor: null,","\t\tshadowBlur: 0,","\t\tshadowOffset: new Point(),","\t\tselectedColor: null","\t},","\tgroupDefaults = Base.set({}, itemDefaults, {","\t\tfontFamily: 'sans-serif',","\t\tfontWeight: 'normal',","\t\tfontSize: 12,","\t\tleading: null,","\t\tjustification: 'left'","\t}),","\ttextDefaults = Base.set({}, groupDefaults, {","\t\tfillColor: new Color()","\t}),","\tflags = {","\t\tstrokeWidth: 97,","\t\tstrokeCap: 97,","\t\tstrokeJoin: 97,","\t\tstrokeScaling: 105,","\t\tmiterLimit: 97,","\t\tfontFamily: 9,","\t\tfontWeight: 9,","\t\tfontSize: 9,","\t\tfont: 9,","\t\tleading: 9,","\t\tjustification: 9","\t},","\titem = {","\t\tbeans: true","\t},","\tfields = {","\t\t_class: 'Style',","\t\tbeans: true,","","\t\tinitialize: function Style(style, _owner, _project) {","\t\t\tthis._values = {};","\t\t\tthis._owner = _owner;","\t\t\tthis._project = _owner && _owner._project || _project","\t\t\t\t\t|| paper.project;","\t\t\tthis._defaults = !_owner || _owner instanceof Group ? groupDefaults","\t\t\t\t\t: _owner instanceof TextItem ? textDefaults","\t\t\t\t\t: itemDefaults;","\t\t\tif (style)","\t\t\t\tthis.set(style);","\t\t}","\t};","","\tBase.each(groupDefaults, function(value, key) {","\t\tvar isColor = /Color$/.test(key),","\t\t\tisPoint = key === 'shadowOffset',","\t\t\tpart = Base.capitalize(key),","\t\t\tflag = flags[key],","\t\t\tset = 'set' + part,","\t\t\tget = 'get' + part;","","\t\tfields[set] = function(value) {","\t\t\tvar owner = this._owner,","\t\t\t\tchildren = owner && owner._children;","\t\t\tif (children && children.length > 0","\t\t\t\t\t&& !(owner instanceof CompoundPath)) {","\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\t\tchildren[i]._style[set](value);","\t\t\t} else if (key in this._defaults) {","\t\t\t\tvar old = this._values[key];","\t\t\t\tif (old !== value) {","\t\t\t\t\tif (isColor) {","\t\t\t\t\t\tif (old && old._owner !== undefined)","\t\t\t\t\t\t\told._owner = undefined;","\t\t\t\t\t\tif (value && value.constructor === Color) {","\t\t\t\t\t\t\tif (value._owner)","\t\t\t\t\t\t\t\tvalue = value.clone();","\t\t\t\t\t\t\tvalue._owner = owner;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tthis._values[key] = value;","\t\t\t\t\tif (owner)","\t\t\t\t\t\towner._changed(flag || 65);","\t\t\t\t}","\t\t\t}","\t\t};","","\t\tfields[get] = function(_dontMerge) {","\t\t\tvar owner = this._owner,","\t\t\t\tchildren = owner && owner._children,","\t\t\t\tvalue;","\t\t\tif (key in this._defaults && (!children || !children.length","\t\t\t\t\t|| _dontMerge || owner instanceof CompoundPath)) {","\t\t\t\tvar value = this._values[key];","\t\t\t\tif (value === undefined) {","\t\t\t\t\tvalue = this._defaults[key];","\t\t\t\t\tif (value && value.clone)","\t\t\t\t\t\tvalue = value.clone();","\t\t\t\t} else {","\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;","\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {","\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,","\t\t\t\t\t\t\t\t{ readNull: true, clone: true });","\t\t\t\t\t\tif (value && isColor)","\t\t\t\t\t\t\tvalue._owner = owner;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t} else if (children) {","\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\t\t\tvar childValue = children[i]._style[get]();","\t\t\t\t\tif (!i) {","\t\t\t\t\t\tvalue = childValue;","\t\t\t\t\t} else if (!Base.equals(value, childValue)) {","\t\t\t\t\t\treturn undefined;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\treturn value;","\t\t};","","\t\titem[get] = function(_dontMerge) {","\t\t\treturn this._style[get](_dontMerge);","\t\t};","","\t\titem[set] = function(value) {","\t\t\tthis._style[set](value);","\t\t};","\t});","","\tBase.each({","\t\tFont: 'FontFamily',","\t\tWindingRule: 'FillRule'","\t}, function(value, key) {","\t\tvar get = 'get' + key,","\t\t\tset = 'set' + key;","\t\tfields[get] = item[get] = '#get' + value;","\t\tfields[set] = item[set] = '#set' + value;","\t});","","\tItem.inject(item);","\treturn fields;","}, {","\tset: function(style) {","\t\tvar isStyle = style instanceof Style,","\t\t\tvalues = isStyle ? style._values : style;","\t\tif (values) {","\t\t\tfor (var key in values) {","\t\t\t\tif (key in this._defaults) {","\t\t\t\t\tvar value = values[key];","\t\t\t\t\tthis[key] = value && isStyle && value.clone","\t\t\t\t\t\t\t? value.clone() : value;","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\tequals: function(style) {","\t\tfunction compare(style1, style2, secondary) {","\t\t\tvar values1 = style1._values,","\t\t\t\tvalues2 = style2._values,","\t\t\t\tdefaults2 = style2._defaults;","\t\t\tfor (var key in values1) {","\t\t\t\tvar value1 = values1[key],","\t\t\t\t\tvalue2 = values2[key];","\t\t\t\tif (!(secondary && key in values2) && !Base.equals(value1,","\t\t\t\t\t\tvalue2 === undefined ? defaults2[key] : value2))","\t\t\t\t\treturn false;","\t\t\t}","\t\t\treturn true;","\t\t}","","\t\treturn style === this || style && this._class === style._class","\t\t\t\t&& compare(this, style)","\t\t\t\t&& compare(style, this, true)","\t\t\t\t|| false;","\t},","","\thasFill: function() {","\t\tvar color = this.getFillColor();","\t\treturn !!color && color.alpha > 0;","\t},","","\thasStroke: function() {","\t\tvar color = this.getStrokeColor();","\t\treturn !!color && color.alpha > 0 && this.getStrokeWidth() > 0;","\t},","","\thasShadow: function() {","\t\tvar color = this.getShadowColor();","\t\treturn !!color && color.alpha > 0 && (this.getShadowBlur() > 0","\t\t\t\t|| !this.getShadowOffset().isZero());","\t},","","\tgetView: function() {","\t\treturn this._project._view;","\t},","","\tgetFontStyle: function() {","\t\tvar fontSize = this.getFontSize();","\t\treturn this.getFontWeight()","\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')","\t\t\t\t+ this.getFontFamily();","\t},","","\tgetFont: '#getFontFamily',","\tsetFont: '#setFontFamily',","","\tgetLeading: function getLeading() {","\t\tvar leading = getLeading.base.call(this),","\t\t\tfontSize = this.getFontSize();","\t\tif (/pt|em|%|px/.test(fontSize))","\t\t\tfontSize = this.getView().getPixelSize(fontSize);","\t\treturn leading != null ? leading : fontSize * 1.2;","\t}","","});","","var DomElement = new function() {","\tfunction handlePrefix(el, name, set, value) {","\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],","\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);","\t\tfor (var i = 0; i < 6; i++) {","\t\t\tvar prefix = prefixes[i],","\t\t\t\tkey = prefix ? prefix + suffix : name;","\t\t\tif (key in el) {","\t\t\t\tif (set) {","\t\t\t\t\tel[key] = value;","\t\t\t\t} else {","\t\t\t\t\treturn el[key];","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t}","","\treturn {","\t\tgetStyles: function(el) {","\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,","\t\t\t\tview = doc && doc.defaultView;","\t\t\treturn view && view.getComputedStyle(el, '');","\t\t},","","\t\tgetBounds: function(el, viewport) {","\t\t\tvar doc = el.ownerDocument,","\t\t\t\tbody = doc.body,","\t\t\t\thtml = doc.documentElement,","\t\t\t\trect;","\t\t\ttry {","\t\t\t\trect = el.getBoundingClientRect();","\t\t\t} catch (e) {","\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };","\t\t\t}","\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),","\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);","\t\t\tif (!viewport) {","\t\t\t\tvar view = doc.defaultView;","\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;","\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;","\t\t\t}","\t\t\treturn new Rectangle(x, y, rect.width, rect.height);","\t\t},","","\t\tgetViewportBounds: function(el) {","\t\t\tvar doc = el.ownerDocument,","\t\t\t\tview = doc.defaultView,","\t\t\t\thtml = doc.documentElement;","\t\t\treturn new Rectangle(0, 0,","\t\t\t\tview.innerWidth || html.clientWidth,","\t\t\t\tview.innerHeight || html.clientHeight","\t\t\t);","\t\t},","","\t\tgetOffset: function(el, viewport) {","\t\t\treturn DomElement.getBounds(el, viewport).getPoint();","\t\t},","","\t\tgetSize: function(el) {","\t\t\treturn DomElement.getBounds(el, true).getSize();","\t\t},","","\t\tisInvisible: function(el) {","\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));","\t\t},","","\t\tisInView: function(el) {","\t\t\treturn !DomElement.isInvisible(el)","\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(","\t\t\t\t\t\tDomElement.getBounds(el, true));","\t\t},","","\t\tisInserted: function(el) {","\t\t\treturn document.body.contains(el);","\t\t},","","\t\tgetPrefixed: function(el, name) {","\t\t\treturn el && handlePrefix(el, name);","\t\t},","","\t\tsetPrefixed: function(el, name, value) {","\t\t\tif (typeof name === 'object') {","\t\t\t\tfor (var key in name)","\t\t\t\t\thandlePrefix(el, key, true, name[key]);","\t\t\t} else {","\t\t\t\thandlePrefix(el, name, true, value);","\t\t\t}","\t\t}","\t};","};","","var DomEvent = {","\tadd: function(el, events) {","\t\tif (el) {","\t\t\tfor (var type in events) {","\t\t\t\tvar func = events[type],","\t\t\t\t\tparts = type.split(/[\\s,]+/g);","\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)","\t\t\t\t\tel.addEventListener(parts[i], func, false);","\t\t\t}","\t\t}","\t},","","\tremove: function(el, events) {","\t\tif (el) {","\t\t\tfor (var type in events) {","\t\t\t\tvar func = events[type],","\t\t\t\t\tparts = type.split(/[\\s,]+/g);","\t\t\t\tfor (var i = 0, l = parts.length; i < l; i++)","\t\t\t\t\tel.removeEventListener(parts[i], func, false);","\t\t\t}","\t\t}","\t},","","\tgetPoint: function(event) {","\t\tvar pos = event.targetTouches","\t\t\t\t? event.targetTouches.length","\t\t\t\t\t? event.targetTouches[0]","\t\t\t\t\t: event.changedTouches[0]","\t\t\t\t: event;","\t\treturn new Point(","\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,","\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop","\t\t);","\t},","","\tgetTarget: function(event) {","\t\treturn event.target || event.srcElement;","\t},","","\tgetRelatedTarget: function(event) {","\t\treturn event.relatedTarget || event.toElement;","\t},","","\tgetOffset: function(event, target) {","\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(","\t\t\t\ttarget || DomEvent.getTarget(event)));","\t}","};","","DomEvent.requestAnimationFrame = new function() {","\tvar nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),","\t\trequested = false,","\t\tcallbacks = [],","\t\ttimer;","","\tfunction handleCallbacks() {","\t\tvar functions = callbacks;","\t\tcallbacks = [];","\t\tfor (var i = 0, l = functions.length; i < l; i++)","\t\t\tfunctions[i]();","\t\trequested = nativeRequest && callbacks.length;","\t\tif (requested)","\t\t\tnativeRequest(handleCallbacks);","\t}","","\treturn function(callback) {","\t\tcallbacks.push(callback);","\t\tif (nativeRequest) {","\t\t\tif (!requested) {","\t\t\t\tnativeRequest(handleCallbacks);","\t\t\t\trequested = true;","\t\t\t}","\t\t} else if (!timer) {","\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);","\t\t}","\t};","};","","var View = Base.extend(Emitter, {","\t_class: 'View',","","\tinitialize: function View(project, element) {","","\t\tfunction getSize(name) {","\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);","\t\t}","","\t\tfunction getCanvasSize() {","\t\t\tvar size = DomElement.getSize(element);","\t\t\treturn size.isNaN() || size.isZero()","\t\t\t\t\t? new Size(getSize('width'), getSize('height'))","\t\t\t\t\t: size;","\t\t}","","\t\tvar size;","\t\tif (window && element) {","\t\t\tthis._id = element.getAttribute('id');","\t\t\tif (this._id == null)","\t\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);","\t\t\tDomEvent.add(element, this._viewEvents);","\t\t\tvar none = 'none';","\t\t\tDomElement.setPrefixed(element.style, {","\t\t\t\tuserDrag: none,","\t\t\t\tuserSelect: none,","\t\t\t\ttouchCallout: none,","\t\t\t\tcontentZooming: none,","\t\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'","\t\t\t});","","\t\t\tif (PaperScope.hasAttribute(element, 'resize')) {","\t\t\t\tvar that = this;","\t\t\t\tDomEvent.add(window, this._windowEvents = {","\t\t\t\t\tresize: function() {","\t\t\t\t\t\tthat.setViewSize(getCanvasSize());","\t\t\t\t\t}","\t\t\t\t});","\t\t\t}","","\t\t\tsize = getCanvasSize();","","\t\t\tif (PaperScope.hasAttribute(element, 'stats')","\t\t\t\t\t&& typeof Stats !== 'undefined') {","\t\t\t\tthis._stats = new Stats();","\t\t\t\tvar stats = this._stats.domElement,","\t\t\t\t\tstyle = stats.style,","\t\t\t\t\toffset = DomElement.getOffset(element);","\t\t\t\tstyle.position = 'absolute';","\t\t\t\tstyle.left = offset.x + 'px';","\t\t\t\tstyle.top = offset.y + 'px';","\t\t\t\tdocument.body.appendChild(stats);","\t\t\t}","\t\t} else {","\t\t\tsize = new Size(element);","\t\t\telement = null;","\t\t}","\t\tthis._project = project;","\t\tthis._scope = project._scope;","\t\tthis._element = element;","\t\tif (!this._pixelRatio)","\t\t\tthis._pixelRatio = window && window.devicePixelRatio || 1;","\t\tthis._setElementSize(size.width, size.height);","\t\tthis._viewSize = size;","\t\tView._views.push(this);","\t\tView._viewsById[this._id] = this;","\t\t(this._matrix = new Matrix())._owner = this;","\t\tif (!View._focused)","\t\t\tView._focused = this;","\t\tthis._frameItems = {};","\t\tthis._frameItemCount = 0;","\t\tthis._itemEvents = { native: {}, virtual: {} };","\t\tthis._autoUpdate = !paper.agent.node;","\t\tthis._needsUpdate = false;","\t},","","\tremove: function() {","\t\tif (!this._project)","\t\t\treturn false;","\t\tif (View._focused === this)","\t\t\tView._focused = null;","\t\tView._views.splice(View._views.indexOf(this), 1);","\t\tdelete View._viewsById[this._id];","\t\tvar project = this._project;","\t\tif (project._view === this)","\t\t\tproject._view = null;","\t\tDomEvent.remove(this._element, this._viewEvents);","\t\tDomEvent.remove(window, this._windowEvents);","\t\tthis._element = this._project = null;","\t\tthis.off('frame');","\t\tthis._animate = false;","\t\tthis._frameItems = {};","\t\treturn true;","\t},","","\t_events: Base.each(","\t\tItem._itemHandlers.concat(['onResize', 'onKeyDown', 'onKeyUp']),","\t\tfunction(name) {","\t\t\tthis[name] = {};","\t\t}, {","\t\t\tonFrame: {","\t\t\t\tinstall: function() {","\t\t\t\t\tthis.play();","\t\t\t\t},","","\t\t\t\tuninstall: function() {","\t\t\t\t\tthis.pause();","\t\t\t\t}","\t\t\t}","\t\t}","\t),","","\t_animate: false,","\t_time: 0,","\t_count: 0,","","\tgetAutoUpdate: function() {","\t\treturn this._autoUpdate;","\t},","","\tsetAutoUpdate: function(autoUpdate) {","\t\tthis._autoUpdate = autoUpdate;","\t\tif (autoUpdate)","\t\t\tthis.requestUpdate();","\t},","","\tupdate: function() {","\t},","","\tdraw: function() {","\t\tthis.update();","\t},","","\trequestUpdate: function() {","\t\tif (!this._requested) {","\t\t\tvar that = this;","\t\t\tDomEvent.requestAnimationFrame(function() {","\t\t\t\tthat._requested = false;","\t\t\t\tif (that._animate) {","\t\t\t\t\tthat.requestUpdate();","\t\t\t\t\tvar element = that._element;","\t\t\t\t\tif ((!DomElement.getPrefixed(document, 'hidden')","\t\t\t\t\t\t\t|| PaperScope.getAttribute(element, 'keepalive')","\t\t\t\t\t\t\t\t=== 'true') && DomElement.isInView(element)) {","\t\t\t\t\t\tthat._handleFrame();","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (that._autoUpdate)","\t\t\t\t\tthat.update();","\t\t\t});","\t\t\tthis._requested = true;","\t\t}","\t},","","\tplay: function() {","\t\tthis._animate = true;","\t\tthis.requestUpdate();","\t},","","\tpause: function() {","\t\tthis._animate = false;","\t},","","\t_handleFrame: function() {","\t\tpaper = this._scope;","\t\tvar now = Date.now() / 1000,","\t\t\tdelta = this._last ? now - this._last : 0;","\t\tthis._last = now;","\t\tthis.emit('frame', new Base({","\t\t\tdelta: delta,","\t\t\ttime: this._time += delta,","\t\t\tcount: this._count++","\t\t}));","\t\tif (this._stats)","\t\t\tthis._stats.update();","\t},","","\t_animateItem: function(item, animate) {","\t\tvar items = this._frameItems;","\t\tif (animate) {","\t\t\titems[item._id] = {","\t\t\t\titem: item,","\t\t\t\ttime: 0,","\t\t\t\tcount: 0","\t\t\t};","\t\t\tif (++this._frameItemCount === 1)","\t\t\t\tthis.on('frame', this._handleFrameItems);","\t\t} else {","\t\t\tdelete items[item._id];","\t\t\tif (--this._frameItemCount === 0) {","\t\t\t\tthis.off('frame', this._handleFrameItems);","\t\t\t}","\t\t}","\t},","","\t_handleFrameItems: function(event) {","\t\tfor (var i in this._frameItems) {","\t\t\tvar entry = this._frameItems[i];","\t\t\tentry.item.emit('frame', new Base(event, {","\t\t\t\ttime: entry.time += event.delta,","\t\t\t\tcount: entry.count++","\t\t\t}));","\t\t}","\t},","","\t_changed: function() {","\t\tthis._project._changed(2049);","\t\tthis._bounds = this._decomposed = undefined;","\t},","","\tgetElement: function() {","\t\treturn this._element;","\t},","","\tgetPixelRatio: function() {","\t\treturn this._pixelRatio;","\t},","","\tgetResolution: function() {","\t\treturn this._pixelRatio * 72;","\t},","","\tgetViewSize: function() {","\t\tvar size = this._viewSize;","\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');","\t},","","\tsetViewSize: function() {","\t\tvar size = Size.read(arguments),","\t\t\tdelta = size.subtract(this._viewSize);","\t\tif (delta.isZero())","\t\t\treturn;","\t\tthis._setElementSize(size.width, size.height);","\t\tthis._viewSize.set(size);","\t\tthis._changed();","\t\tthis.emit('resize', { size: size, delta: delta });","\t\tif (this._autoUpdate) {","\t\t\tthis.update();","\t\t}","\t},","","\t_setElementSize: function(width, height) {","\t\tvar element = this._element;","\t\tif (element) {","\t\t\tif (element.width !== width)","\t\t\t\telement.width = width;","\t\t\tif (element.height !== height)","\t\t\t\telement.height = height;","\t\t}","\t},","","\tgetBounds: function() {","\t\tif (!this._bounds)","\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(","\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));","\t\treturn this._bounds;","\t},","","\tgetSize: function() {","\t\treturn this.getBounds().getSize();","\t},","","\tisVisible: function() {","\t\treturn DomElement.isInView(this._element);","\t},","","\tisInserted: function() {","\t\treturn DomElement.isInserted(this._element);","\t},","","\tgetPixelSize: function(size) {","\t\tvar element = this._element,","\t\t\tpixels;","\t\tif (element) {","\t\t\tvar parent = element.parentNode,","\t\t\t\ttemp = document.createElement('div');","\t\t\ttemp.style.fontSize = size;","\t\t\tparent.appendChild(temp);","\t\t\tpixels = parseFloat(DomElement.getStyles(temp).fontSize);","\t\t\tparent.removeChild(temp);","\t\t} else {","\t\t\tpixels = parseFloat(pixels);","\t\t}","\t\treturn pixels;","\t},","","\tgetTextWidth: function(font, lines) {","\t\treturn 0;","\t}","}, Base.each(['rotate', 'scale', 'shear', 'skew'], function(key) {","\tvar rotate = key === 'rotate';","\tthis[key] = function() {","\t\tvar value = (rotate ? Base : Point).read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\treturn this.transform(new Matrix()[key](value,","\t\t\t\tcenter || this.getCenter(true)));","\t};","}, {","\t_decompose: function() {","\t\treturn this._decomposed || (this._decomposed = this._matrix.decompose());","\t},","","\ttranslate: function() {","\t\tvar mx = new Matrix();","\t\treturn this.transform(mx.translate.apply(mx, arguments));","\t},","","\tgetCenter: function() {","\t\treturn this.getBounds().getCenter();","\t},","","\tsetCenter: function() {","\t\tvar center = Point.read(arguments);","\t\tthis.translate(this.getCenter().subtract(center));","\t},","","\tgetZoom: function() {","\t\tvar decomposed = this._decompose(),","\t\t\tscaling = decomposed && decomposed.scaling;","\t\treturn scaling ? (scaling.x + scaling.y) / 2 : 0;","\t},","","\tsetZoom: function(zoom) {","\t\tthis.transform(new Matrix().scale(zoom / this.getZoom(),","\t\t\tthis.getCenter()));","\t},","","\tgetRotation: function() {","\t\tvar decomposed = this._decompose();","\t\treturn decomposed && decomposed.rotation;","\t},","","\tsetRotation: function(rotation) {","\t\tvar current = this.getRotation();","\t\tif (current != null && rotation != null) {","\t\t\tthis.rotate(rotation - current);","\t\t}","\t},","","\tgetScaling: function() {","\t\tvar decomposed = this._decompose(),","\t\t\tscaling = decomposed && decomposed.scaling;","\t\treturn scaling","\t\t\t\t? new LinkedPoint(scaling.x, scaling.y, this, 'setScaling')","\t\t\t\t: undefined;","\t},","","\tsetScaling: function() {","\t\tvar current = this.getScaling(),","\t\t\tscaling = Point.read(arguments, 0, { clone: true, readNull: true });","\t\tif (current && scaling) {","\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);","\t\t}","\t},","","\tgetMatrix: function() {","\t\treturn this._matrix;","\t},","","\tsetMatrix: function() {","\t\tvar matrix = this._matrix;","\t\tmatrix.initialize.apply(matrix, arguments);","\t},","","\ttransform: function(matrix) {","\t\tthis._matrix.append(matrix);","\t},","","\tscrollBy: function() {","\t\tthis.translate(Point.read(arguments).negate());","\t}","}), {","","\tprojectToView: function() {","\t\treturn this._matrix._transformPoint(Point.read(arguments));","\t},","","\tviewToProject: function() {","\t\treturn this._matrix._inverseTransform(Point.read(arguments));","\t},","","\tgetEventPoint: function(event) {","\t\treturn this.viewToProject(DomEvent.getOffset(event, this._element));","\t},","","}, {","\tstatics: {","\t\t_views: [],","\t\t_viewsById: {},","\t\t_id: 0,","","\t\tcreate: function(project, element) {","\t\t\tif (document && typeof element === 'string')","\t\t\t\telement = document.getElementById(element);","\t\t\tvar ctor = window ? CanvasView : View;","\t\t\treturn new ctor(project, element);","\t\t}","\t}","},","new function() {","\tif (!window)","\t\treturn;","\tvar prevFocus,","\t\ttempFocus,","\t\tdragging = false,","\t\tmouseDown = false;","","\tfunction getView(event) {","\t\tvar target = DomEvent.getTarget(event);","\t\treturn target.getAttribute && View._viewsById[","\t\t\t\ttarget.getAttribute('id')];","\t}","","\tfunction updateFocus() {","\t\tvar view = View._focused;","\t\tif (!view || !view.isVisible()) {","\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {","\t\t\t\tif ((view = View._views[i]).isVisible()) {","\t\t\t\t\tView._focused = tempFocus = view;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t}","\t}","","\tfunction handleMouseMove(view, event, point) {","\t\tview._handleMouseEvent('mousemove', event, point);","\t}","","\tvar navigator = window.navigator,","\t\tmousedown, mousemove, mouseup;","\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {","\t\tmousedown = 'pointerdown MSPointerDown';","\t\tmousemove = 'pointermove MSPointerMove';","\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';","\t} else {","\t\tmousedown = 'touchstart';","\t\tmousemove = 'touchmove';","\t\tmouseup = 'touchend touchcancel';","\t\tif (!('ontouchstart' in window && navigator.userAgent.match(","\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {","\t\t\tmousedown += ' mousedown';","\t\t\tmousemove += ' mousemove';","\t\t\tmouseup += ' mouseup';","\t\t}","\t}","","\tvar viewEvents = {},","\t\tdocEvents = {","\t\t\tmouseout: function(event) {","\t\t\t\tvar view = View._focused,","\t\t\t\t\ttarget = DomEvent.getRelatedTarget(event);","\t\t\t\tif (view && (!target || target.nodeName === 'HTML')) {","\t\t\t\t\tvar offset = DomEvent.getOffset(event, view._element),","\t\t\t\t\t\tx = offset.x,","\t\t\t\t\t\tabs = Math.abs,","\t\t\t\t\t\tax = abs(x),","\t\t\t\t\t\tmax = 1 << 25,","\t\t\t\t\t\tdiff = ax - max;","\t\t\t\t\toffset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;","\t\t\t\t\thandleMouseMove(view, event, view.viewToProject(offset));","\t\t\t\t}","\t\t\t},","","\t\t\tscroll: updateFocus","\t\t};","","\tviewEvents[mousedown] = function(event) {","\t\tvar view = View._focused = getView(event);","\t\tif (!dragging) {","\t\t\tdragging = true;","\t\t\tview._handleMouseEvent('mousedown', event);","\t\t}","\t};","","\tdocEvents[mousemove] = function(event) {","\t\tvar view = View._focused;","\t\tif (!mouseDown) {","\t\t\tvar target = getView(event);","\t\t\tif (target) {","\t\t\t\tif (view !== target) {","\t\t\t\t\tif (view)","\t\t\t\t\t\thandleMouseMove(view, event);","\t\t\t\t\tif (!prevFocus)","\t\t\t\t\t\tprevFocus = view;","\t\t\t\t\tview = View._focused = tempFocus = target;","\t\t\t\t}","\t\t\t} else if (tempFocus && tempFocus === view) {","\t\t\t\tif (prevFocus && !prevFocus.isInserted())","\t\t\t\t\tprevFocus = null;","\t\t\t\tview = View._focused = prevFocus;","\t\t\t\tprevFocus = null;","\t\t\t\tupdateFocus();","\t\t\t}","\t\t}","\t\tif (view)","\t\t\thandleMouseMove(view, event);","\t};","","\tdocEvents[mousedown] = function() {","\t\tmouseDown = true;","\t};","","\tdocEvents[mouseup] = function(event) {","\t\tvar view = View._focused;","\t\tif (view && dragging)","\t\t\tview._handleMouseEvent('mouseup', event);","\t\tmouseDown = dragging = false;","\t};","","\tDomEvent.add(document, docEvents);","","\tDomEvent.add(window, {","\t\tload: updateFocus","\t});","","\tvar called = false,","\t\tprevented = false,","\t\tfallbacks = {","\t\t\tdoubleclick: 'click',","\t\t\tmousedrag: 'mousemove'","\t\t},","\t\twasInView = false,","\t\toverView,","\t\tdownPoint,","\t\tlastPoint,","\t\tdownItem,","\t\toverItem,","\t\tdragItem,","\t\tclickItem,","\t\tclickTime,","\t\tdblClick;","","\tfunction emitMouseEvent(obj, target, type, event, point, prevPoint,","\t\t\tstopItem) {","\t\tvar stopped = false,","\t\t\tmouseEvent;","","\t\tfunction emit(obj, type) {","\t\t\tif (obj.responds(type)) {","\t\t\t\tif (!mouseEvent) {","\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point,","\t\t\t\t\t\t\ttarget || obj,","\t\t\t\t\t\t\tprevPoint ? point.subtract(prevPoint) : null);","\t\t\t\t}","\t\t\t\tif (obj.emit(type, mouseEvent)) {","\t\t\t\t\tcalled = true;","\t\t\t\t\tif (mouseEvent.prevented)","\t\t\t\t\t\tprevented = true;","\t\t\t\t\tif (mouseEvent.stopped)","\t\t\t\t\t\treturn stopped = true;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tvar fallback = fallbacks[type];","\t\t\t\tif (fallback)","\t\t\t\t\treturn emit(obj, fallback);","\t\t\t}","\t\t}","","\t\twhile (obj && obj !== stopItem) {","\t\t\tif (emit(obj, type))","\t\t\t\tbreak;","\t\t\tobj = obj._parent;","\t\t}","\t\treturn stopped;","\t}","","\tfunction emitMouseEvents(view, hitItem, type, event, point, prevPoint) {","\t\tview._project.removeOn(type);","\t\tprevented = called = false;","\t\treturn (dragItem && emitMouseEvent(dragItem, null, type, event,","\t\t\t\t\tpoint, prevPoint)","\t\t\t|| hitItem && hitItem !== dragItem","\t\t\t\t&& !hitItem.isDescendant(dragItem)","\t\t\t\t&& emitMouseEvent(hitItem, null, type, event, point, prevPoint,","\t\t\t\t\tdragItem)","\t\t\t|| emitMouseEvent(view, dragItem || hitItem || view, type, event,","\t\t\t\t\tpoint, prevPoint));","\t}","","\tvar itemEventsMap = {","\t\tmousedown: {","\t\t\tmousedown: 1,","\t\t\tmousedrag: 1,","\t\t\tclick: 1,","\t\t\tdoubleclick: 1","\t\t},","\t\tmouseup: {","\t\t\tmouseup: 1,","\t\t\tmousedrag: 1,","\t\t\tclick: 1,","\t\t\tdoubleclick: 1","\t\t},","\t\tmousemove: {","\t\t\tmousedrag: 1,","\t\t\tmousemove: 1,","\t\t\tmouseenter: 1,","\t\t\tmouseleave: 1","\t\t}","\t};","","\treturn {","\t\t_viewEvents: viewEvents,","","\t\t_handleMouseEvent: function(type, event, point) {","\t\t\tvar itemEvents = this._itemEvents,","\t\t\t\thitItems = itemEvents.native[type],","\t\t\t\tnativeMove = type === 'mousemove',","\t\t\t\ttool = this._scope.tool,","\t\t\t\tview = this;","","\t\t\tfunction responds(type) {","\t\t\t\treturn itemEvents.virtual[type] || view.responds(type)","\t\t\t\t\t\t|| tool && tool.responds(type);","\t\t\t}","","\t\t\tif (nativeMove && dragging && responds('mousedrag'))","\t\t\t\ttype = 'mousedrag';","\t\t\tif (!point)","\t\t\t\tpoint = this.getEventPoint(event);","","\t\t\tvar inView = this.getBounds().contains(point),","\t\t\t\thit = hitItems && inView && view._project.hitTest(point, {","\t\t\t\t\ttolerance: 0,","\t\t\t\t\tfill: true,","\t\t\t\t\tstroke: true","\t\t\t\t}),","\t\t\t\thitItem = hit && hit.item || null,","\t\t\t\thandle = false,","\t\t\t\tmouse = {};","\t\t\tmouse[type.substr(5)] = true;","","\t\t\tif (hitItems && hitItem !== overItem) {","\t\t\t\tif (overItem) {","\t\t\t\t\temitMouseEvent(overItem, null, 'mouseleave', event, point);","\t\t\t\t}","\t\t\t\tif (hitItem) {","\t\t\t\t\temitMouseEvent(hitItem, null, 'mouseenter', event, point);","\t\t\t\t}","\t\t\t\toverItem = hitItem;","\t\t\t}","\t\t\tif (wasInView ^ inView) {","\t\t\t\temitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave',","\t\t\t\t\t\tevent, point);","\t\t\t\toverView = inView ? this : null;","\t\t\t\thandle = true;","\t\t\t}","\t\t\tif ((inView || mouse.drag) && !point.equals(lastPoint)) {","\t\t\t\temitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove',","\t\t\t\t\t\tevent, point, lastPoint);","\t\t\t\thandle = true;","\t\t\t}","\t\t\twasInView = inView;","\t\t\tif (mouse.down && inView || mouse.up && downPoint) {","\t\t\t\temitMouseEvents(this, hitItem, type, event, point, downPoint);","\t\t\t\tif (mouse.down) {","\t\t\t\t\tdblClick = hitItem === clickItem","\t\t\t\t\t\t&& (Date.now() - clickTime < 300);","\t\t\t\t\tdownItem = clickItem = hitItem;","\t\t\t\t\tif (!prevented && hitItem) {","\t\t\t\t\t\tvar item = hitItem;","\t\t\t\t\t\twhile (item && !item.responds('mousedrag'))","\t\t\t\t\t\t\titem = item._parent;","\t\t\t\t\t\tif (item)","\t\t\t\t\t\t\tdragItem = hitItem;","\t\t\t\t\t}","\t\t\t\t\tdownPoint = point;","\t\t\t\t} else if (mouse.up) {","\t\t\t\t\tif (!prevented && hitItem === downItem) {","\t\t\t\t\t\tclickTime = Date.now();","\t\t\t\t\t\temitMouseEvents(this, hitItem, dblClick ? 'doubleclick'","\t\t\t\t\t\t\t\t: 'click', event, point, downPoint);","\t\t\t\t\t\tdblClick = false;","\t\t\t\t\t}","\t\t\t\t\tdownItem = dragItem = null;","\t\t\t\t}","\t\t\t\twasInView = false;","\t\t\t\thandle = true;","\t\t\t}","\t\t\tlastPoint = point;","\t\t\tif (handle && tool) {","\t\t\t\tcalled = tool._handleMouseEvent(type, event, point, mouse)","\t\t\t\t\t|| called;","\t\t\t}","","\t\t\tif (called && !mouse.move || mouse.down && responds('mouseup'))","\t\t\t\tevent.preventDefault();","\t\t},","","\t\t_handleKeyEvent: function(type, event, key, character) {","\t\t\tvar scope = this._scope,","\t\t\t\ttool = scope.tool,","\t\t\t\tkeyEvent;","","\t\t\tfunction emit(obj) {","\t\t\t\tif (obj.responds(type)) {","\t\t\t\t\tpaper = scope;","\t\t\t\t\tobj.emit(type, keyEvent = keyEvent","\t\t\t\t\t\t\t|| new KeyEvent(type, event, key, character));","\t\t\t\t}","\t\t\t}","","\t\t\tif (this.isVisible()) {","\t\t\t\temit(this);","\t\t\t\tif (tool && tool.responds(type))","\t\t\t\t\temit(tool);","\t\t\t}","\t\t},","","\t\t_countItemEvent: function(type, sign) {","\t\t\tvar itemEvents = this._itemEvents,","\t\t\t\tnative = itemEvents.native,","\t\t\t\tvirtual = itemEvents.virtual;","\t\t\tfor (var key in itemEventsMap) {","\t\t\t\tnative[key] = (native[key] || 0)","\t\t\t\t\t\t+ (itemEventsMap[key][type] || 0) * sign;","\t\t\t}","\t\t\tvirtual[type] = (virtual[type] || 0) + sign;","\t\t},","","\t\tstatics: {","\t\t\tupdateFocus: updateFocus","\t\t}","\t};","});","","var CanvasView = View.extend({","\t_class: 'CanvasView',","","\tinitialize: function CanvasView(project, canvas) {","\t\tif (!(canvas instanceof window.HTMLCanvasElement)) {","\t\t\tvar size = Size.read(arguments, 1);","\t\t\tif (size.isZero())","\t\t\t\tthrow new Error(","\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '","\t\t\t\t\t\t+ Base.slice(arguments, 1));","\t\t\tcanvas = CanvasProvider.getCanvas(size);","\t\t}","\t\tvar ctx = this._context = canvas.getContext('2d');","\t\tctx.save();","\t\tthis._pixelRatio = 1;","\t\tif (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {","\t\t\tvar deviceRatio = window.devicePixelRatio || 1,","\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(ctx,","\t\t\t\t\t\t'backingStorePixelRatio') || 1;","\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;","\t\t}","\t\tView.call(this, project, canvas);","\t\tthis._needsUpdate = true;","\t},","","\tremove: function remove() {","\t\tthis._context.restore();","\t\treturn remove.base.call(this);","\t},","","\t_setElementSize: function _setElementSize(width, height) {","\t\tvar pixelRatio = this._pixelRatio;","\t\t_setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);","\t\tif (pixelRatio !== 1) {","\t\t\tvar element = this._element,","\t\t\t\tctx = this._context;","\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {","\t\t\t\tvar style = element.style;","\t\t\t\tstyle.width = width + 'px';","\t\t\t\tstyle.height = height + 'px';","\t\t\t}","\t\t\tctx.restore();","\t\t\tctx.save();","\t\t\tctx.scale(pixelRatio, pixelRatio);","\t\t}","\t},","","\tgetPixelSize: function getPixelSize(size) {","\t\tvar agent = paper.agent,","\t\t\tpixels;","\t\tif (agent && agent.firefox) {","\t\t\tpixels = getPixelSize.base.call(this, size);","\t\t} else {","\t\t\tvar ctx = this._context,","\t\t\t\tprevFont = ctx.font;","\t\t\tctx.font = size + ' serif';","\t\t\tpixels = parseFloat(ctx.font);","\t\t\tctx.font = prevFont;","\t\t}","\t\treturn pixels;","\t},","","\tgetTextWidth: function(font, lines) {","\t\tvar ctx = this._context,","\t\t\tprevFont = ctx.font,","\t\t\twidth = 0;","\t\tctx.font = font;","\t\tfor (var i = 0, l = lines.length; i < l; i++)","\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);","\t\tctx.font = prevFont;","\t\treturn width;","\t},","","\tupdate: function() {","\t\tif (!this._needsUpdate)","\t\t\treturn false;","\t\tvar project = this._project,","\t\t\tctx = this._context,","\t\t\tsize = this._viewSize;","\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);","\t\tif (project)","\t\t\tproject.draw(ctx, this._matrix, this._pixelRatio);","\t\tthis._needsUpdate = false;","\t\treturn true;","\t}","});","","var Event = Base.extend({","\t_class: 'Event',","","\tinitialize: function Event(event) {","\t\tthis.event = event;","\t\tthis.type = event && event.type;","\t},","","\tprevented: false,","\tstopped: false,","","\tpreventDefault: function() {","\t\tthis.prevented = true;","\t\tthis.event.preventDefault();","\t},","","\tstopPropagation: function() {","\t\tthis.stopped = true;","\t\tthis.event.stopPropagation();","\t},","","\tstop: function() {","\t\tthis.stopPropagation();","\t\tthis.preventDefault();","\t},","","\tgetTimeStamp: function() {","\t\treturn this.event.timeStamp;","\t},","","\tgetModifiers: function() {","\t\treturn Key.modifiers;","\t}","});","","var KeyEvent = Event.extend({","\t_class: 'KeyEvent',","","\tinitialize: function KeyEvent(type, event, key, character) {","\t\tthis.type = type;","\t\tthis.event = event;","\t\tthis.key = key;","\t\tthis.character = character;","\t},","","\ttoString: function() {","\t\treturn \"{ type: '\" + this.type","\t\t\t\t+ \"', key: '\" + this.key","\t\t\t\t+ \"', character: '\" + this.character","\t\t\t\t+ \"', modifiers: \" + this.getModifiers()","\t\t\t\t+ \" }\";","\t}","});","","var Key = new function() {","\tvar keyLookup = {","\t\t\t'\\t': 'tab',","\t\t\t' ': 'space',","\t\t\t'\\b': 'backspace',","\t\t\t'\\x7f': 'delete',","\t\t\t'Spacebar': 'space',","\t\t\t'Del': 'delete',","\t\t\t'Win': 'meta',","\t\t\t'Esc': 'escape'","\t\t},","","\t\tcharLookup = {","\t\t\t'tab': '\\t',","\t\t\t'space': ' ',","\t\t\t'enter': '\\r'","\t\t},","","\t\tkeyMap = {},","\t\tcharMap = {},","\t\tmetaFixMap,","\t\tdownKey,","","\t\tmodifiers = new Base({","\t\t\tshift: false,","\t\t\tcontrol: false,","\t\t\talt: false,","\t\t\tmeta: false,","\t\t\tcapsLock: false,","\t\t\tspace: false","\t\t}).inject({","\t\t\toption: {","\t\t\t\tget: function() {","\t\t\t\t\treturn this.alt;","\t\t\t\t}","\t\t\t},","","\t\t\tcommand: {","\t\t\t\tget: function() {","\t\t\t\t\tvar agent = paper && paper.agent;","\t\t\t\t\treturn agent && agent.mac ? this.meta : this.control;","\t\t\t\t}","\t\t\t}","\t\t});","","\tfunction getKey(event) {","\t\tvar key = event.key || event.keyIdentifier;","\t\tkey = /^U\\+/.test(key)","\t\t\t\t? String.fromCharCode(parseInt(key.substr(2), 16))","\t\t\t\t: /^Arrow[A-Z]/.test(key) ? key.substr(5)","\t\t\t\t: key === 'Unidentified' ? String.fromCharCode(event.keyCode)","\t\t\t\t: key;","\t\treturn keyLookup[key] ||","\t\t\t\t(key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());","\t}","","\tfunction handleKey(down, key, character, event) {","\t\tvar type = down ? 'keydown' : 'keyup',","\t\t\tview = View._focused,","\t\t\tname;","\t\tkeyMap[key] = down;","\t\tif (down) {","\t\t\tcharMap[key] = character;","\t\t} else {","\t\t\tdelete charMap[key];","\t\t}","\t\tif (key.length > 1 && (name = Base.camelize(key)) in modifiers) {","\t\t\tmodifiers[name] = down;","\t\t\tvar agent = paper && paper.agent;","\t\t\tif (name === 'meta' && agent && agent.mac) {","\t\t\t\tif (down) {","\t\t\t\t\tmetaFixMap = {};","\t\t\t\t} else {","\t\t\t\t\tfor (var k in metaFixMap) {","\t\t\t\t\t\tif (k in charMap)","\t\t\t\t\t\t\thandleKey(false, k, metaFixMap[k], event);","\t\t\t\t\t}","\t\t\t\t\tmetaFixMap = null;","\t\t\t\t}","\t\t\t}","\t\t} else if (down && metaFixMap) {","\t\t\tmetaFixMap[key] = character;","\t\t}","\t\tif (view) {","\t\t\tview._handleKeyEvent(down ? 'keydown' : 'keyup', event, key,","\t\t\t\t\tcharacter);","\t\t}","\t}","","\tDomEvent.add(document, {","\t\tkeydown: function(event) {","\t\t\tvar key = getKey(event),","\t\t\t\tagent = paper && paper.agent;","\t\t\tif (key.length > 1 || agent && (agent.chrome && (event.altKey","\t\t\t\t\t\t|| agent.mac && event.metaKey","\t\t\t\t\t\t|| !agent.mac && event.ctrlKey))) {","\t\t\t\thandleKey(true, key,","\t\t\t\t\t\tcharLookup[key] || (key.length > 1 ? '' : key), event);","\t\t\t} else {","\t\t\t\tdownKey = key;","\t\t\t}","\t\t},","","\t\tkeypress: function(event) {","\t\t\tif (downKey) {","\t\t\t\tvar key = getKey(event),","\t\t\t\t\tcode = event.charCode,","\t\t\t\t\tcharacter = code >= 32 ? String.fromCharCode(code)","\t\t\t\t\t\t: key.length > 1 ? '' : key;","\t\t\t\tif (key !== downKey) {","\t\t\t\t\tkey = character.toLowerCase();","\t\t\t\t}","\t\t\t\thandleKey(true, key, character, event);","\t\t\t\tdownKey = null;","\t\t\t}","\t\t},","","\t\tkeyup: function(event) {","\t\t\tvar key = getKey(event);","\t\t\tif (key in charMap)","\t\t\t\thandleKey(false, key, charMap[key], event);","\t\t}","\t});","","\tDomEvent.add(window, {","\t\tblur: function(event) {","\t\t\tfor (var key in charMap)","\t\t\t\thandleKey(false, key, charMap[key], event);","\t\t}","\t});","","\treturn {","\t\tmodifiers: modifiers,","","\t\tisDown: function(key) {","\t\t\treturn !!keyMap[key];","\t\t}","\t};","};","","var MouseEvent = Event.extend({","\t_class: 'MouseEvent',","","\tinitialize: function MouseEvent(type, event, point, target, delta) {","\t\tthis.type = type;","\t\tthis.event = event;","\t\tthis.point = point;","\t\tthis.target = target;","\t\tthis.delta = delta;","\t},","","\ttoString: function() {","\t\treturn \"{ type: '\" + this.type","\t\t\t\t+ \"', point: \" + this.point","\t\t\t\t+ ', target: ' + this.target","\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')","\t\t\t\t+ ', modifiers: ' + this.getModifiers()","\t\t\t\t+ ' }';","\t}","});","","var ToolEvent = Event.extend({","\t_class: 'ToolEvent',","\t_item: null,","","\tinitialize: function ToolEvent(tool, type, event) {","\t\tthis.tool = tool;","\t\tthis.type = type;","\t\tthis.event = event;","\t},","","\t_choosePoint: function(point, toolPoint) {","\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;","\t},","","\tgetPoint: function() {","\t\treturn this._choosePoint(this._point, this.tool._point);","\t},","","\tsetPoint: function(point) {","\t\tthis._point = point;","\t},","","\tgetLastPoint: function() {","\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);","\t},","","\tsetLastPoint: function(lastPoint) {","\t\tthis._lastPoint = lastPoint;","\t},","","\tgetDownPoint: function() {","\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);","\t},","","\tsetDownPoint: function(downPoint) {","\t\tthis._downPoint = downPoint;","\t},","","\tgetMiddlePoint: function() {","\t\tif (!this._middlePoint && this.tool._lastPoint) {","\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);","\t\t}","\t\treturn this._middlePoint;","\t},","","\tsetMiddlePoint: function(middlePoint) {","\t\tthis._middlePoint = middlePoint;","\t},","","\tgetDelta: function() {","\t\treturn !this._delta && this.tool._lastPoint","\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)","\t\t\t\t: this._delta;","\t},","","\tsetDelta: function(delta) {","\t\tthis._delta = delta;","\t},","","\tgetCount: function() {","\t\treturn this.tool[/^mouse(down|up)$/.test(this.type)","\t\t\t\t? '_downCount' : '_moveCount'];","\t},","","\tsetCount: function(count) {","\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']","\t\t\t= count;","\t},","","\tgetItem: function() {","\t\tif (!this._item) {","\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());","\t\t\tif (result) {","\t\t\t\tvar item = result.item,","\t\t\t\t\tparent = item._parent;","\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {","\t\t\t\t\titem = parent;","\t\t\t\t\tparent = parent._parent;","\t\t\t\t}","\t\t\t\tthis._item = item;","\t\t\t}","\t\t}","\t\treturn this._item;","\t},","","\tsetItem: function(item) {","\t\tthis._item = item;","\t},","","\ttoString: function() {","\t\treturn '{ type: ' + this.type","\t\t\t\t+ ', point: ' + this.getPoint()","\t\t\t\t+ ', count: ' + this.getCount()","\t\t\t\t+ ', modifiers: ' + this.getModifiers()","\t\t\t\t+ ' }';","\t}","});","","var Tool = PaperScopeItem.extend({","\t_class: 'Tool',","\t_list: 'tools',","\t_reference: 'tool',","\t_events: ['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',","\t\t\t'onActivate', 'onDeactivate', 'onEditOptions', 'onKeyDown',","\t\t\t'onKeyUp'],","","\tinitialize: function Tool(props) {","\t\tPaperScopeItem.call(this);","\t\tthis._moveCount = -1;","\t\tthis._downCount = -1;","\t\tthis.set(props);","\t},","","\tgetMinDistance: function() {","\t\treturn this._minDistance;","\t},","","\tsetMinDistance: function(minDistance) {","\t\tthis._minDistance = minDistance;","\t\tif (minDistance != null && this._maxDistance != null","\t\t\t\t&& minDistance > this._maxDistance) {","\t\t\tthis._maxDistance = minDistance;","\t\t}","\t},","","\tgetMaxDistance: function() {","\t\treturn this._maxDistance;","\t},","","\tsetMaxDistance: function(maxDistance) {","\t\tthis._maxDistance = maxDistance;","\t\tif (this._minDistance != null && maxDistance != null","\t\t\t\t&& maxDistance < this._minDistance) {","\t\t\tthis._minDistance = maxDistance;","\t\t}","\t},","","\tgetFixedDistance: function() {","\t\treturn this._minDistance == this._maxDistance","\t\t\t? this._minDistance : null;","\t},","","\tsetFixedDistance: function(distance) {","\t\tthis._minDistance = this._maxDistance = distance;","\t},","","\t_handleMouseEvent: function(type, event, point, mouse) {","\t\tpaper = this._scope;","\t\tif (mouse.drag && !this.responds(type))","\t\t\ttype = 'mousemove';","\t\tvar move = mouse.move || mouse.drag,","\t\t\tresponds = this.responds(type),","\t\t\tminDistance = this.minDistance,","\t\t\tmaxDistance = this.maxDistance,","\t\t\tcalled = false,","\t\t\ttool = this;","\t\tfunction update(minDistance, maxDistance) {","\t\t\tvar pt = point,","\t\t\t\ttoolPoint = move ? tool._point : (tool._downPoint || pt);","\t\t\tif (move) {","\t\t\t\tif (tool._moveCount && pt.equals(toolPoint)) {","\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t\tif (toolPoint && (minDistance != null || maxDistance != null)) {","\t\t\t\t\tvar vector = pt.subtract(toolPoint),","\t\t\t\t\t\tdistance = vector.getLength();","\t\t\t\t\tif (distance < (minDistance || 0))","\t\t\t\t\t\treturn false;","\t\t\t\t\tif (maxDistance) {","\t\t\t\t\t\tpt = toolPoint.add(vector.normalize(","\t\t\t\t\t\t\t\tMath.min(distance, maxDistance)));","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\ttool._moveCount++;","\t\t\t}","\t\t\ttool._point = pt;","\t\t\ttool._lastPoint = toolPoint || pt;","\t\t\tif (mouse.down) {","\t\t\t\ttool._moveCount = -1;","\t\t\t\ttool._downPoint = pt;","\t\t\t\ttool._downCount++;","\t\t\t}","\t\t\treturn true;","\t\t}","","\t\tfunction emit() {","\t\t\tif (responds) {","\t\t\t\tcalled = tool.emit(type, new ToolEvent(tool, type, event))","\t\t\t\t\t\t|| called;","\t\t\t}","\t\t}","","\t\tif (mouse.down) {","\t\t\tupdate();","\t\t\temit();","\t\t} else if (mouse.up) {","\t\t\tupdate(null, maxDistance);","\t\t\temit();","\t\t} else if (responds) {","\t\t\twhile (update(minDistance, maxDistance))","\t\t\t\temit();","\t\t}","\t\treturn called;","\t}","","});","","var Http = {","\trequest: function(options) {","\t\tvar xhr = new self.XMLHttpRequest();","\t\txhr.open((options.method || 'get').toUpperCase(), options.url,","\t\t\t\tBase.pick(options.async, true));","\t\tif (options.mimeType)","\t\t\txhr.overrideMimeType(options.mimeType);","\t\txhr.onload = function() {","\t\t\tvar status = xhr.status;","\t\t\tif (status === 0 || status === 200) {","\t\t\t\tif (options.onLoad) {","\t\t\t\t\toptions.onLoad.call(xhr, xhr.responseText);","\t\t\t\t}","\t\t\t} else {","\t\t\t\txhr.onerror();","\t\t\t}","\t\t};","\t\txhr.onerror = function() {","\t\t\tvar status = xhr.status,","\t\t\t\tmessage = 'Could not load \"' + options.url + '\" (Status: '","\t\t\t\t\t\t+ status + ')';","\t\t\tif (options.onError) {","\t\t\t\toptions.onError(message, status);","\t\t\t} else {","\t\t\t\tthrow new Error(message);","\t\t\t}","\t\t};","\t\treturn xhr.send(null);","\t}","};","","var CanvasProvider = {","\tcanvases: [],","","\tgetCanvas: function(width, height) {","\t\tif (!window)","\t\t\treturn null;","\t\tvar canvas,","\t\t\tclear = true;","\t\tif (typeof width === 'object') {","\t\t\theight = width.height;","\t\t\twidth = width.width;","\t\t}","\t\tif (this.canvases.length) {","\t\t\tcanvas = this.canvases.pop();","\t\t} else {","\t\t\tcanvas = document.createElement('canvas');","\t\t\tclear = false;","\t\t}","\t\tvar ctx = canvas.getContext('2d');","\t\tif (!ctx) {","\t\t\tthrow new Error('Canvas ' + canvas +","\t\t\t\t\t' is unable to provide a 2D context.');","\t\t}","\t\tif (canvas.width === width && canvas.height === height) {","\t\t\tif (clear)","\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);","\t\t} else {","\t\t\tcanvas.width = width;","\t\t\tcanvas.height = height;","\t\t}","\t\tctx.save();","\t\treturn canvas;","\t},","","\tgetContext: function(width, height) {","\t\tvar canvas = this.getCanvas(width, height);","\t\treturn canvas ? canvas.getContext('2d') : null;","\t},","","\trelease: function(obj) {","\t\tvar canvas = obj && obj.canvas ? obj.canvas : obj;","\t\tif (canvas && canvas.getContext) {","\t\t\tcanvas.getContext('2d').restore();","\t\t\tthis.canvases.push(canvas);","\t\t}","\t}","};","","var BlendMode = new function() {","\tvar min = Math.min,","\t\tmax = Math.max,","\t\tabs = Math.abs,","\t\tsr, sg, sb, sa,","\t\tbr, bg, bb, ba,","\t\tdr, dg, db;","","\tfunction getLum(r, g, b) {","\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;","\t}","","\tfunction setLum(r, g, b, l) {","\t\tvar d = l - getLum(r, g, b);","\t\tdr = r + d;","\t\tdg = g + d;","\t\tdb = b + d;","\t\tvar l = getLum(dr, dg, db),","\t\t\tmn = min(dr, dg, db),","\t\t\tmx = max(dr, dg, db);","\t\tif (mn < 0) {","\t\t\tvar lmn = l - mn;","\t\t\tdr = l + (dr - l) * l / lmn;","\t\t\tdg = l + (dg - l) * l / lmn;","\t\t\tdb = l + (db - l) * l / lmn;","\t\t}","\t\tif (mx > 255) {","\t\t\tvar ln = 255 - l,","\t\t\t\tmxl = mx - l;","\t\t\tdr = l + (dr - l) * ln / mxl;","\t\t\tdg = l + (dg - l) * ln / mxl;","\t\t\tdb = l + (db - l) * ln / mxl;","\t\t}","\t}","","\tfunction getSat(r, g, b) {","\t\treturn max(r, g, b) - min(r, g, b);","\t}","","\tfunction setSat(r, g, b, s) {","\t\tvar col = [r, g, b],","\t\t\tmx = max(r, g, b),","\t\t\tmn = min(r, g, b),","\t\t\tmd;","\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;","\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;","\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;","\t\tif (col[mx] > col[mn]) {","\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);","\t\t\tcol[mx] = s;","\t\t} else {","\t\t\tcol[md] = col[mx] = 0;","\t\t}","\t\tcol[mn] = 0;","\t\tdr = col[0];","\t\tdg = col[1];","\t\tdb = col[2];","\t}","","\tvar modes = {","\t\tmultiply: function() {","\t\t\tdr = br * sr / 255;","\t\t\tdg = bg * sg / 255;","\t\t\tdb = bb * sb / 255;","\t\t},","","\t\tscreen: function() {","\t\t\tdr = br + sr - (br * sr / 255);","\t\t\tdg = bg + sg - (bg * sg / 255);","\t\t\tdb = bb + sb - (bb * sb / 255);","\t\t},","","\t\toverlay: function() {","\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;","\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;","\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;","\t\t},","","\t\t'soft-light': function() {","\t\t\tvar t = sr * br / 255;","\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;","\t\t\tt = sg * bg / 255;","\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;","\t\t\tt = sb * bb / 255;","\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;","\t\t},","","\t\t'hard-light': function() {","\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;","\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;","\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;","\t\t},","","\t\t'color-dodge': function() {","\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));","\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));","\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));","\t\t},","","\t\t'color-burn': function() {","\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);","\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);","\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);","\t\t},","","\t\tdarken: function() {","\t\t\tdr = br < sr ? br : sr;","\t\t\tdg = bg < sg ? bg : sg;","\t\t\tdb = bb < sb ? bb : sb;","\t\t},","","\t\tlighten: function() {","\t\t\tdr = br > sr ? br : sr;","\t\t\tdg = bg > sg ? bg : sg;","\t\t\tdb = bb > sb ? bb : sb;","\t\t},","","\t\tdifference: function() {","\t\t\tdr = br - sr;","\t\t\tif (dr < 0)","\t\t\t\tdr = -dr;","\t\t\tdg = bg - sg;","\t\t\tif (dg < 0)","\t\t\t\tdg = -dg;","\t\t\tdb = bb - sb;","\t\t\tif (db < 0)","\t\t\t\tdb = -db;","\t\t},","","\t\texclusion: function() {","\t\t\tdr = br + sr * (255 - br - br) / 255;","\t\t\tdg = bg + sg * (255 - bg - bg) / 255;","\t\t\tdb = bb + sb * (255 - bb - bb) / 255;","\t\t},","","\t\thue: function() {","\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));","\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));","\t\t},","","\t\tsaturation: function() {","\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));","\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));","\t\t},","","\t\tluminosity: function() {","\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));","\t\t},","","\t\tcolor: function() {","\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));","\t\t},","","\t\tadd: function() {","\t\t\tdr = min(br + sr, 255);","\t\t\tdg = min(bg + sg, 255);","\t\t\tdb = min(bb + sb, 255);","\t\t},","","\t\tsubtract: function() {","\t\t\tdr = max(br - sr, 0);","\t\t\tdg = max(bg - sg, 0);","\t\t\tdb = max(bb - sb, 0);","\t\t},","","\t\taverage: function() {","\t\t\tdr = (br + sr) / 2;","\t\t\tdg = (bg + sg) / 2;","\t\t\tdb = (bb + sb) / 2;","\t\t},","","\t\tnegation: function() {","\t\t\tdr = 255 - abs(255 - sr - br);","\t\t\tdg = 255 - abs(255 - sg - bg);","\t\t\tdb = 255 - abs(255 - sb - bb);","\t\t}","\t};","","\tvar nativeModes = this.nativeModes = Base.each([","\t\t'source-over', 'source-in', 'source-out', 'source-atop',","\t\t'destination-over', 'destination-in', 'destination-out',","\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'","\t], function(mode) {","\t\tthis[mode] = true;","\t}, {});","","\tvar ctx = CanvasProvider.getContext(1, 1);","\tif (ctx) {","\t\tBase.each(modes, function(func, mode) {","\t\t\tvar darken = mode === 'darken',","\t\t\t\tok = false;","\t\t\tctx.save();","\t\t\ttry {","\t\t\t\tctx.fillStyle = darken ? '#300' : '#a00';","\t\t\t\tctx.fillRect(0, 0, 1, 1);","\t\t\t\tctx.globalCompositeOperation = mode;","\t\t\t\tif (ctx.globalCompositeOperation === mode) {","\t\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';","\t\t\t\t\tctx.fillRect(0, 0, 1, 1);","\t\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken","\t\t\t\t\t\t\t? 170 : 51;","\t\t\t\t}","\t\t\t} catch (e) {}","\t\t\tctx.restore();","\t\t\tnativeModes[mode] = ok;","\t\t});","\t\tCanvasProvider.release(ctx);","\t}","","\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {","\t\tvar srcCanvas = srcContext.canvas,","\t\t\tnormal = mode === 'normal';","\t\tif (normal || nativeModes[mode]) {","\t\t\tdstContext.save();","\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);","\t\t\tdstContext.globalAlpha = alpha;","\t\t\tif (!normal)","\t\t\t\tdstContext.globalCompositeOperation = mode;","\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);","\t\t\tdstContext.restore();","\t\t} else {","\t\t\tvar process = modes[mode];","\t\t\tif (!process)","\t\t\t\treturn;","\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,","\t\t\t\t\tsrcCanvas.width, srcCanvas.height),","\t\t\t\tdst = dstData.data,","\t\t\t\tsrc = srcContext.getImageData(0, 0,","\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;","\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {","\t\t\t\tsr = src[i];","\t\t\t\tbr = dst[i];","\t\t\t\tsg = src[i + 1];","\t\t\t\tbg = dst[i + 1];","\t\t\t\tsb = src[i + 2];","\t\t\t\tbb = dst[i + 2];","\t\t\t\tsa = src[i + 3];","\t\t\t\tba = dst[i + 3];","\t\t\t\tprocess();","\t\t\t\tvar a1 = sa * alpha / 255,","\t\t\t\t\ta2 = 1 - a1;","\t\t\t\tdst[i] = a1 * dr + a2 * br;","\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;","\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;","\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;","\t\t\t}","\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);","\t\t}","\t};","};","","var SvgElement = new function() {","\tvar svg = 'http://www.w3.org/2000/svg',","\t\txmlns = 'http://www.w3.org/2000/xmlns',","\t\txlink = 'http://www.w3.org/1999/xlink',","\t\tattributeNamespace = {","\t\t\thref: xlink,","\t\t\txlink: xmlns,","\t\t\txmlns: xmlns + '/',","\t\t\t'xmlns:xlink': xmlns + '/'","\t\t};","","\tfunction create(tag, attributes, formatter) {","\t\treturn set(document.createElementNS(svg, tag), attributes, formatter);","\t}","","\tfunction get(node, name) {","\t\tvar namespace = attributeNamespace[name],","\t\t\tvalue = namespace","\t\t\t\t? node.getAttributeNS(namespace, name)","\t\t\t\t: node.getAttribute(name);","\t\treturn value === 'null' ? null : value;","\t}","","\tfunction set(node, attributes, formatter) {","\t\tfor (var name in attributes) {","\t\t\tvar value = attributes[name],","\t\t\t\tnamespace = attributeNamespace[name];","\t\t\tif (typeof value === 'number' && formatter)","\t\t\t\tvalue = formatter.number(value);","\t\t\tif (namespace) {","\t\t\t\tnode.setAttributeNS(namespace, name, value);","\t\t\t} else {","\t\t\t\tnode.setAttribute(name, value);","\t\t\t}","\t\t}","\t\treturn node;","\t}","","\treturn {","\t\tsvg: svg,","\t\txmlns: xmlns,","\t\txlink: xlink,","","\t\tcreate: create,","\t\tget: get,","\t\tset: set","\t};","};","","var SvgStyles = Base.each({","\tfillColor: ['fill', 'color'],","\tfillRule: ['fill-rule', 'string'],","\tstrokeColor: ['stroke', 'color'],","\tstrokeWidth: ['stroke-width', 'number'],","\tstrokeCap: ['stroke-linecap', 'string'],","\tstrokeJoin: ['stroke-linejoin', 'string'],","\tstrokeScaling: ['vector-effect', 'lookup', {","\t\ttrue: 'none',","\t\tfalse: 'non-scaling-stroke'","\t}, function(item, value) {","\t\treturn !value","\t\t\t\t&& (item instanceof PathItem","\t\t\t\t\t|| item instanceof Shape","\t\t\t\t\t|| item instanceof TextItem);","\t}],","\tmiterLimit: ['stroke-miterlimit', 'number'],","\tdashArray: ['stroke-dasharray', 'array'],","\tdashOffset: ['stroke-dashoffset', 'number'],","\tfontFamily: ['font-family', 'string'],","\tfontWeight: ['font-weight', 'string'],","\tfontSize: ['font-size', 'number'],","\tjustification: ['text-anchor', 'lookup', {","\t\tleft: 'start',","\t\tcenter: 'middle',","\t\tright: 'end'","\t}],","\topacity: ['opacity', 'number'],","\tblendMode: ['mix-blend-mode', 'style']","}, function(entry, key) {","\tvar part = Base.capitalize(key),","\t\tlookup = entry[2];","\tthis[key] = {","\t\ttype: entry[1],","\t\tproperty: key,","\t\tattribute: entry[0],","\t\ttoSVG: lookup,","\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {","\t\t\tthis[value] = name;","\t\t}, {}),","\t\texportFilter: entry[3],","\t\tget: 'get' + part,","\t\tset: 'set' + part","\t};","}, {});","","new function() {","\tvar formatter;","","\tfunction getTransform(matrix, coordinates, center) {","\t\tvar attrs = new Base(),","\t\t\ttrans = matrix.getTranslation();","\t\tif (coordinates) {","\t\t\tmatrix = matrix._shiftless();","\t\t\tvar point = matrix._inverseTransform(trans);","\t\t\tattrs[center ? 'cx' : 'x'] = point.x;","\t\t\tattrs[center ? 'cy' : 'y'] = point.y;","\t\t\ttrans = null;","\t\t}","\t\tif (!matrix.isIdentity()) {","\t\t\tvar decomposed = matrix.decompose();","\t\t\tif (decomposed) {","\t\t\t\tvar parts = [],","\t\t\t\t\tangle = decomposed.rotation,","\t\t\t\t\tscale = decomposed.scaling,","\t\t\t\t\tskew = decomposed.skewing;","\t\t\t\tif (trans && !trans.isZero())","\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');","\t\t\t\tif (angle)","\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');","\t\t\t\tif (!Numerical.isZero(scale.x - 1)","\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))","\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');","\t\t\t\tif (skew.x)","\t\t\t\t\tparts.push('skewX(' + formatter.number(skew.x) + ')');","\t\t\t\tif (skew.y)","\t\t\t\t\tparts.push('skewY(' + formatter.number(skew.y) + ')');","\t\t\t\tattrs.transform = parts.join(' ');","\t\t\t} else {","\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';","\t\t\t}","\t\t}","\t\treturn attrs;","\t}","","\tfunction exportGroup(item, options) {","\t\tvar attrs = getTransform(item._matrix),","\t\t\tchildren = item._children;","\t\tvar node = SvgElement.create('g', attrs, formatter);","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i];","\t\t\tvar childNode = exportSVG(child, options);","\t\t\tif (childNode) {","\t\t\t\tif (child.isClipMask()) {","\t\t\t\t\tvar clip = SvgElement.create('clipPath');","\t\t\t\t\tclip.appendChild(childNode);","\t\t\t\t\tsetDefinition(child, clip, 'clip');","\t\t\t\t\tSvgElement.set(node, {","\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'","\t\t\t\t\t});","\t\t\t\t} else {","\t\t\t\t\tnode.appendChild(childNode);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn node;","\t}","","\tfunction exportRaster(item, options) {","\t\tvar attrs = getTransform(item._matrix, true),","\t\t\tsize = item.getSize(),","\t\t\timage = item.getImage();","\t\tattrs.x -= size.width / 2;","\t\tattrs.y -= size.height / 2;","\t\tattrs.width = size.width;","\t\tattrs.height = size.height;","\t\tattrs.href = options.embedImages == false && image && image.src","\t\t\t\t|| item.toDataURL();","\t\treturn SvgElement.create('image', attrs, formatter);","\t}","","\tfunction exportPath(item, options) {","\t\tvar matchShapes = options.matchShapes;","\t\tif (matchShapes) {","\t\t\tvar shape = item.toShape(false);","\t\t\tif (shape)","\t\t\t\treturn exportShape(shape, options);","\t\t}","\t\tvar segments = item._segments,","\t\t\tlength = segments.length,","\t\t\ttype,","\t\t\tattrs = getTransform(item._matrix);","\t\tif (matchShapes && length >= 2 && !item.hasHandles()) {","\t\t\tif (length > 2) {","\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';","\t\t\t\tvar parts = [];","\t\t\t\tfor (var i = 0; i < length; i++) {","\t\t\t\t\tparts.push(formatter.point(segments[i]._point));","\t\t\t\t}","\t\t\t\tattrs.points = parts.join(' ');","\t\t\t} else {","\t\t\t\ttype = 'line';","\t\t\t\tvar start = segments[0]._point,","\t\t\t\t\tend = segments[1]._point;","\t\t\t\tattrs.set({","\t\t\t\t\tx1: start.x,","\t\t\t\t\ty1: start.y,","\t\t\t\t\tx2: end.x,","\t\t\t\t\ty2: end.y","\t\t\t\t});","\t\t\t}","\t\t} else {","\t\t\ttype = 'path';","\t\t\tattrs.d = item.getPathData(null, options.precision);","\t\t}","\t\treturn SvgElement.create(type, attrs, formatter);","\t}","","\tfunction exportShape(item) {","\t\tvar type = item._type,","\t\t\tradius = item._radius,","\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');","\t\tif (type === 'rectangle') {","\t\t\ttype = 'rect';","\t\t\tvar size = item._size,","\t\t\t\twidth = size.width,","\t\t\t\theight = size.height;","\t\t\tattrs.x -= width / 2;","\t\t\tattrs.y -= height / 2;","\t\t\tattrs.width = width;","\t\t\tattrs.height = height;","\t\t\tif (radius.isZero())","\t\t\t\tradius = null;","\t\t}","\t\tif (radius) {","\t\t\tif (type === 'circle') {","\t\t\t\tattrs.r = radius;","\t\t\t} else {","\t\t\t\tattrs.rx = radius.width;","\t\t\t\tattrs.ry = radius.height;","\t\t\t}","\t\t}","\t\treturn SvgElement.create(type, attrs, formatter);","\t}","","\tfunction exportCompoundPath(item, options) {","\t\tvar attrs = getTransform(item._matrix);","\t\tvar data = item.getPathData(null, options.precision);","\t\tif (data)","\t\t\tattrs.d = data;","\t\treturn SvgElement.create('path', attrs, formatter);","\t}","","\tfunction exportSymbolItem(item, options) {","\t\tvar attrs = getTransform(item._matrix, true),","\t\t\tdefinition = item._definition,","\t\t\tnode = getDefinition(definition, 'symbol'),","\t\t\tdefinitionItem = definition._item,","\t\t\tbounds = definitionItem.getBounds();","\t\tif (!node) {","\t\t\tnode = SvgElement.create('symbol', {","\t\t\t\tviewBox: formatter.rectangle(bounds)","\t\t\t});","\t\t\tnode.appendChild(exportSVG(definitionItem, options));","\t\t\tsetDefinition(definition, node, 'symbol');","\t\t}","\t\tattrs.href = '#' + node.id;","\t\tattrs.x += bounds.x;","\t\tattrs.y += bounds.y;","\t\tattrs.width = bounds.width;","\t\tattrs.height = bounds.height;","\t\tattrs.overflow = 'visible';","\t\treturn SvgElement.create('use', attrs, formatter);","\t}","","\tfunction exportGradient(color) {","\t\tvar gradientNode = getDefinition(color, 'color');","\t\tif (!gradientNode) {","\t\t\tvar gradient = color.getGradient(),","\t\t\t\tradial = gradient._radial,","\t\t\t\torigin = color.getOrigin(),","\t\t\t\tdestination = color.getDestination(),","\t\t\t\tattrs;","\t\t\tif (radial) {","\t\t\t\tattrs = {","\t\t\t\t\tcx: origin.x,","\t\t\t\t\tcy: origin.y,","\t\t\t\t\tr: origin.getDistance(destination)","\t\t\t\t};","\t\t\t\tvar highlight = color.getHighlight();","\t\t\t\tif (highlight) {","\t\t\t\t\tattrs.fx = highlight.x;","\t\t\t\t\tattrs.fy = highlight.y;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tattrs = {","\t\t\t\t\tx1: origin.x,","\t\t\t\t\ty1: origin.y,","\t\t\t\t\tx2: destination.x,","\t\t\t\t\ty2: destination.y","\t\t\t\t};","\t\t\t}","\t\t\tattrs.gradientUnits = 'userSpaceOnUse';","\t\t\tgradientNode = SvgElement.create((radial ? 'radial' : 'linear')","\t\t\t\t\t+ 'Gradient', attrs, formatter);","\t\t\tvar stops = gradient._stops;","\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {","\t\t\t\tvar stop = stops[i],","\t\t\t\t\tstopColor = stop._color,","\t\t\t\t\talpha = stopColor.getAlpha(),","\t\t\t\t\toffset = stop._offset;","\t\t\t\tattrs = {","\t\t\t\t\toffset: offset == null ? i / (l - 1) : offset","\t\t\t\t};","\t\t\t\tif (stopColor)","\t\t\t\t\tattrs['stop-color'] = stopColor.toCSS(true);","\t\t\t\tif (alpha < 1)","\t\t\t\t\tattrs['stop-opacity'] = alpha;","\t\t\t\tgradientNode.appendChild(","\t\t\t\t\t\tSvgElement.create('stop', attrs, formatter));","\t\t\t}","\t\t\tsetDefinition(color, gradientNode, 'color');","\t\t}","\t\treturn 'url(#' + gradientNode.id + ')';","\t}","","\tfunction exportText(item) {","\t\tvar node = SvgElement.create('text', getTransform(item._matrix, true),","\t\t\t\tformatter);","\t\tnode.textContent = item._content;","\t\treturn node;","\t}","","\tvar exporters = {","\t\tGroup: exportGroup,","\t\tLayer: exportGroup,","\t\tRaster: exportRaster,","\t\tPath: exportPath,","\t\tShape: exportShape,","\t\tCompoundPath: exportCompoundPath,","\t\tSymbolItem: exportSymbolItem,","\t\tPointText: exportText","\t};","","\tfunction applyStyle(item, node, isRoot) {","\t\tvar attrs = {},","\t\t\tparent = !isRoot && item.getParent(),","\t\t\tstyle = [];","","\t\tif (item._name != null)","\t\t\tattrs.id = item._name;","","\t\tBase.each(SvgStyles, function(entry) {","\t\t\tvar get = entry.get,","\t\t\t\ttype = entry.type,","\t\t\t\tvalue = item[get]();","\t\t\tif (entry.exportFilter","\t\t\t\t\t? entry.exportFilter(item, value)","\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {","\t\t\t\tif (type === 'color' && value != null) {","\t\t\t\t\tvar alpha = value.getAlpha();","\t\t\t\t\tif (alpha < 1)","\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;","\t\t\t\t}","\t\t\t\tif (type === 'style') {","\t\t\t\t\tstyle.push(entry.attribute + ': ' + value);","\t\t\t\t} else {","\t\t\t\t\tattrs[entry.attribute] = value == null ? 'none'","\t\t\t\t\t\t\t: type === 'color' ? value.gradient","\t\t\t\t\t\t\t\t? exportGradient(value, item)","\t\t\t\t\t\t\t\t: value.toCSS(true)","\t\t\t\t\t\t\t: type === 'array' ? value.join(',')","\t\t\t\t\t\t\t: type === 'lookup' ? entry.toSVG[value]","\t\t\t\t\t\t\t: value;","\t\t\t\t}","\t\t\t}","\t\t});","","\t\tif (style.length)","\t\t\tattrs.style = style.join(';');","","\t\tif (attrs.opacity === 1)","\t\t\tdelete attrs.opacity;","","\t\tif (!item._visible)","\t\t\tattrs.visibility = 'hidden';","","\t\treturn SvgElement.set(node, attrs, formatter);","\t}","","\tvar definitions;","\tfunction getDefinition(item, type) {","\t\tif (!definitions)","\t\t\tdefinitions = { ids: {}, svgs: {} };","\t\treturn item && definitions.svgs[type + '-'","\t\t\t\t+ (item._id || item.__id || (item.__id = UID.get('svg')))];","\t}","","\tfunction setDefinition(item, node, type) {","\t\tif (!definitions)","\t\t\tgetDefinition();","\t\tvar typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;","\t\tnode.id = type + '-' + typeId;","\t\tdefinitions.svgs[type + '-' + (item._id || item.__id)] = node;","\t}","","\tfunction exportDefinitions(node, options) {","\t\tvar svg = node,","\t\t\tdefs = null;","\t\tif (definitions) {","\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;","\t\t\tfor (var i in definitions.svgs) {","\t\t\t\tif (!defs) {","\t\t\t\t\tif (!svg) {","\t\t\t\t\t\tsvg = SvgElement.create('svg');","\t\t\t\t\t\tsvg.appendChild(node);","\t\t\t\t\t}","\t\t\t\t\tdefs = svg.insertBefore(SvgElement.create('defs'),","\t\t\t\t\t\t\tsvg.firstChild);","\t\t\t\t}","\t\t\t\tdefs.appendChild(definitions.svgs[i]);","\t\t\t}","\t\t\tdefinitions = null;","\t\t}","\t\treturn options.asString","\t\t\t\t? new self.XMLSerializer().serializeToString(svg)","\t\t\t\t: svg;","\t}","","\tfunction exportSVG(item, options, isRoot) {","\t\tvar exporter = exporters[item._class],","\t\t\tnode = exporter && exporter(item, options);","\t\tif (node) {","\t\t\tvar onExport = options.onExport;","\t\t\tif (onExport)","\t\t\t\tnode = onExport(item, node, options) || node;","\t\t\tvar data = JSON.stringify(item._data);","\t\t\tif (data && data !== '{}' && data !== 'null')","\t\t\t\tnode.setAttribute('data-paper-data', data);","\t\t}","\t\treturn node && applyStyle(item, node, isRoot);","\t}","","\tfunction setOptions(options) {","\t\tif (!options)","\t\t\toptions = {};","\t\tformatter = new Formatter(options.precision);","\t\treturn options;","\t}","","\tItem.inject({","\t\texportSVG: function(options) {","\t\t\toptions = setOptions(options);","\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);","\t\t}","\t});","","\tProject.inject({","\t\texportSVG: function(options) {","\t\t\toptions = setOptions(options);","\t\t\tvar children = this._children,","\t\t\t\tview = this.getView(),","\t\t\t\tbounds = Base.pick(options.bounds, 'view'),","\t\t\t\tmx = options.matrix || bounds === 'view' && view._matrix,","\t\t\t\tmatrix = mx && Matrix.read([mx]),","\t\t\t\trect = bounds === 'view'","\t\t\t\t\t? new Rectangle([0, 0], view.getViewSize())","\t\t\t\t\t: bounds === 'content'","\t\t\t\t\t\t? Item._getBounds(children, matrix, { stroke: true })","\t\t\t\t\t\t\t.rect","\t\t\t\t\t\t: Rectangle.read([bounds], 0, { readNull: true }),","\t\t\t\tattrs = {","\t\t\t\t\tversion: '1.1',","\t\t\t\t\txmlns: SvgElement.svg,","\t\t\t\t\t'xmlns:xlink': SvgElement.xlink,","\t\t\t\t};","\t\t\tif (rect) {","\t\t\t\tattrs.width = rect.width;","\t\t\t\tattrs.height = rect.height;","\t\t\t\tif (rect.x || rect.y)","\t\t\t\t\tattrs.viewBox = formatter.rectangle(rect);","\t\t\t}","\t\t\tvar node = SvgElement.create('svg', attrs, formatter),","\t\t\t\tparent = node;","\t\t\tif (matrix && !matrix.isIdentity()) {","\t\t\t\tparent = node.appendChild(SvgElement.create('g',","\t\t\t\t\t\tgetTransform(matrix), formatter));","\t\t\t}","\t\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\t\tparent.appendChild(exportSVG(children[i], options, true));","\t\t\t}","\t\t\treturn exportDefinitions(node, options);","\t\t}","\t});","};","","new function() {","","\tvar definitions = {},","\t\trootSize;","","\tfunction getValue(node, name, isString, allowNull, allowPercent) {","\t\tvar value = SvgElement.get(node, name),","\t\t\tres = value == null","\t\t\t\t? allowNull","\t\t\t\t\t? null","\t\t\t\t\t: isString ? '' : 0","\t\t\t\t: isString","\t\t\t\t\t? value","\t\t\t\t\t: parseFloat(value);","\t\treturn /%\\s*$/.test(value)","\t\t\t? (res / 100) * (allowPercent ? 1","\t\t\t\t: rootSize[/x|^width/.test(name) ? 'width' : 'height'])","\t\t\t: res;","\t}","","\tfunction getPoint(node, x, y, allowNull, allowPercent) {","\t\tx = getValue(node, x || 'x', false, allowNull, allowPercent);","\t\ty = getValue(node, y || 'y', false, allowNull, allowPercent);","\t\treturn allowNull && (x == null || y == null) ? null","\t\t\t\t: new Point(x, y);","\t}","","\tfunction getSize(node, w, h, allowNull, allowPercent) {","\t\tw = getValue(node, w || 'width', false, allowNull, allowPercent);","\t\th = getValue(node, h || 'height', false, allowNull, allowPercent);","\t\treturn allowNull && (w == null || h == null) ? null","\t\t\t\t: new Size(w, h);","\t}","","\tfunction convertValue(value, type, lookup) {","\t\treturn value === 'none' ? null","\t\t\t\t: type === 'number' ? parseFloat(value)","\t\t\t\t: type === 'array' ?","\t\t\t\t\tvalue ? value.split(/[\\s,]+/g).map(parseFloat) : []","\t\t\t\t: type === 'color' ? getDefinition(value) || value","\t\t\t\t: type === 'lookup' ? lookup[value]","\t\t\t\t: value;","\t}","","\tfunction importGroup(node, type, options, isRoot) {","\t\tvar nodes = node.childNodes,","\t\t\tisClip = type === 'clippath',","\t\t\tisDefs = type === 'defs',","\t\t\titem = new Group(),","\t\t\tproject = item._project,","\t\t\tcurrentStyle = project._currentStyle,","\t\t\tchildren = [];","\t\tif (!isClip && !isDefs) {","\t\t\titem = applyAttributes(item, node, isRoot);","\t\t\tproject._currentStyle = item._style.clone();","\t\t}","\t\tif (isRoot) {","\t\t\tvar defs = node.querySelectorAll('defs');","\t\t\tfor (var i = 0, l = defs.length; i < l; i++) {","\t\t\t\timportNode(defs[i], options, false);","\t\t\t}","\t\t}","\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\tvar childNode = nodes[i],","\t\t\t\tchild;","\t\t\tif (childNode.nodeType === 1","\t\t\t\t\t&& !/^defs$/i.test(childNode.nodeName)","\t\t\t\t\t&& (child = importNode(childNode, options, false))","\t\t\t\t\t&& !(child instanceof SymbolDefinition))","\t\t\t\tchildren.push(child);","\t\t}","\t\titem.addChildren(children);","\t\tif (isClip)","\t\t\titem = applyAttributes(item.reduce(), node, isRoot);","\t\tproject._currentStyle = currentStyle;","\t\tif (isClip || isDefs) {","\t\t\titem.remove();","\t\t\titem = null;","\t\t}","\t\treturn item;","\t}","","\tfunction importPoly(node, type) {","\t\tvar coords = node.getAttribute('points').match(","\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),","\t\t\tpoints = [];","\t\tfor (var i = 0, l = coords.length; i < l; i += 2)","\t\t\tpoints.push(new Point(","\t\t\t\t\tparseFloat(coords[i]),","\t\t\t\t\tparseFloat(coords[i + 1])));","\t\tvar path = new Path(points);","\t\tif (type === 'polygon')","\t\t\tpath.closePath();","\t\treturn path;","\t}","","\tfunction importPath(node) {","\t\treturn PathItem.create(node.getAttribute('d'));","\t}","","\tfunction importGradient(node, type) {","\t\tvar id = (getValue(node, 'href', true) || '').substring(1),","\t\t\tradial = type === 'radialgradient',","\t\t\tgradient;","\t\tif (id) {","\t\t\tgradient = definitions[id].getGradient();","\t\t\tif (gradient._radial ^ radial) {","\t\t\t\tgradient = gradient.clone();","\t\t\t\tgradient._radial = radial;","\t\t\t}","\t\t} else {","\t\t\tvar nodes = node.childNodes,","\t\t\t\tstops = [];","\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\t\tvar child = nodes[i];","\t\t\t\tif (child.nodeType === 1)","\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));","\t\t\t}","\t\t\tgradient = new Gradient(stops, radial);","\t\t}","\t\tvar origin, destination, highlight,","\t\t\tscaleToBounds = getValue(node, 'gradientUnits', true) !==","\t\t\t\t'userSpaceOnUse';","\t\tif (radial) {","\t\t\torigin = getPoint(node, 'cx', 'cy', false, scaleToBounds);","\t\t\tdestination = origin.add(","\t\t\t\t\tgetValue(node, 'r', false, false, scaleToBounds), 0);","\t\t\thighlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);","\t\t} else {","\t\t\torigin = getPoint(node, 'x1', 'y1', false, scaleToBounds);","\t\t\tdestination = getPoint(node, 'x2', 'y2', false, scaleToBounds);","\t\t}","\t\tvar color = applyAttributes(","\t\t\t\tnew Color(gradient, origin, destination, highlight), node);","\t\tcolor._scaleToBounds = scaleToBounds;","\t\treturn null;","\t}","","\tvar importers = {","\t\t'#document': function (node, type, options, isRoot) {","\t\t\tvar nodes = node.childNodes;","\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\t\tvar child = nodes[i];","\t\t\t\tif (child.nodeType === 1)","\t\t\t\t\treturn importNode(child, options, isRoot);","\t\t\t}","\t\t},","\t\tg: importGroup,","\t\tsvg: importGroup,","\t\tclippath: importGroup,","\t\tpolygon: importPoly,","\t\tpolyline: importPoly,","\t\tpath: importPath,","\t\tlineargradient: importGradient,","\t\tradialgradient: importGradient,","","\t\timage: function (node) {","\t\t\tvar raster = new Raster(getValue(node, 'href', true));","\t\t\traster.on('load', function() {","\t\t\t\tvar size = getSize(node);","\t\t\t\tthis.setSize(size);","\t\t\t\tvar center = this._matrix._transformPoint(","\t\t\t\t\t\tgetPoint(node).add(size.divide(2)));","\t\t\t\tthis.translate(center);","\t\t\t});","\t\t\treturn raster;","\t\t},","","\t\tsymbol: function(node, type, options, isRoot) {","\t\t\treturn new SymbolDefinition(","\t\t\t\t\timportGroup(node, type, options, isRoot), true);","\t\t},","","\t\tdefs: importGroup,","","\t\tuse: function(node) {","\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),","\t\t\t\tdefinition = definitions[id],","\t\t\t\tpoint = getPoint(node);","\t\t\treturn definition","\t\t\t\t\t? definition instanceof SymbolDefinition","\t\t\t\t\t\t? definition.place(point)","\t\t\t\t\t\t: definition.clone().translate(point)","\t\t\t\t\t: null;","\t\t},","","\t\tcircle: function(node) {","\t\t\treturn new Shape.Circle(","\t\t\t\t\tgetPoint(node, 'cx', 'cy'),","\t\t\t\t\tgetValue(node, 'r'));","\t\t},","","\t\tellipse: function(node) {","\t\t\treturn new Shape.Ellipse({","\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),","\t\t\t\tradius: getSize(node, 'rx', 'ry')","\t\t\t});","\t\t},","","\t\trect: function(node) {","\t\t\treturn new Shape.Rectangle(new Rectangle(","\t\t\t\t\t\tgetPoint(node),","\t\t\t\t\t\tgetSize(node)","\t\t\t\t\t), getSize(node, 'rx', 'ry'));","\t\t\t},","","\t\tline: function(node) {","\t\t\treturn new Path.Line(","\t\t\t\t\tgetPoint(node, 'x1', 'y1'),","\t\t\t\t\tgetPoint(node, 'x2', 'y2'));","\t\t},","","\t\ttext: function(node) {","\t\t\tvar text = new PointText(getPoint(node).add(","\t\t\t\t\tgetPoint(node, 'dx', 'dy')));","\t\t\ttext.setContent(node.textContent.trim() || '');","\t\t\treturn text;","\t\t}","\t};","","\tfunction applyTransform(item, value, name, node) {","\t\tif (item.transform) {","\t\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),","\t\t\t\tmatrix = new Matrix();","\t\t\tfor (var i = 0, l = transforms.length; i < l; i++) {","\t\t\t\tvar transform = transforms[i];","\t\t\t\tif (!transform)","\t\t\t\t\tbreak;","\t\t\t\tvar parts = transform.split(/\\(\\s*/),","\t\t\t\t\tcommand = parts[0],","\t\t\t\t\tv = parts[1].split(/[\\s,]+/g);","\t\t\t\tfor (var j = 0, m = v.length; j < m; j++)","\t\t\t\t\tv[j] = parseFloat(v[j]);","\t\t\t\tswitch (command) {","\t\t\t\tcase 'matrix':","\t\t\t\t\tmatrix.append(","\t\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));","\t\t\t\t\tbreak;","\t\t\t\tcase 'rotate':","\t\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);","\t\t\t\t\tbreak;","\t\t\t\tcase 'translate':","\t\t\t\t\tmatrix.translate(v[0], v[1]);","\t\t\t\t\tbreak;","\t\t\t\tcase 'scale':","\t\t\t\t\tmatrix.scale(v);","\t\t\t\t\tbreak;","\t\t\t\tcase 'skewX':","\t\t\t\t\tmatrix.skew(v[0], 0);","\t\t\t\t\tbreak;","\t\t\t\tcase 'skewY':","\t\t\t\t\tmatrix.skew(0, v[0]);","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\titem.transform(matrix);","\t\t}","\t}","","\tfunction applyOpacity(item, value, name) {","\t\tvar key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor',","\t\t\tcolor = item[key] && item[key]();","\t\tif (color)","\t\t\tcolor.setAlpha(parseFloat(value));","\t}","","\tvar attributes = Base.set(Base.each(SvgStyles, function(entry) {","\t\tthis[entry.attribute] = function(item, value) {","\t\t\tif (item[entry.set]) {","\t\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));","\t\t\t\tif (entry.type === 'color') {","\t\t\t\t\tvar color = item[entry.get]();","\t\t\t\t\tif (color) {","\t\t\t\t\t\tif (color._scaleToBounds) {","\t\t\t\t\t\t\tvar bounds = item.getBounds();","\t\t\t\t\t\t\tcolor.transform(new Matrix()","\t\t\t\t\t\t\t\t.translate(bounds.getPoint())","\t\t\t\t\t\t\t\t.scale(bounds.getSize()));","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t};","\t}, {}), {","\t\tid: function(item, value) {","\t\t\tdefinitions[value] = item;","\t\t\tif (item.setName)","\t\t\t\titem.setName(value);","\t\t},","","\t\t'clip-path': function(item, value) {","\t\t\tvar clip = getDefinition(value);","\t\t\tif (clip) {","\t\t\t\tclip = clip.clone();","\t\t\t\tclip.setClipMask(true);","\t\t\t\tif (item instanceof Group) {","\t\t\t\t\titem.insertChild(0, clip);","\t\t\t\t} else {","\t\t\t\t\treturn new Group(clip, item);","\t\t\t\t}","\t\t\t}","\t\t},","","\t\tgradientTransform: applyTransform,","\t\ttransform: applyTransform,","","\t\t'fill-opacity': applyOpacity,","\t\t'stroke-opacity': applyOpacity,","","\t\tvisibility: function(item, value) {","\t\t\tif (item.setVisible)","\t\t\t\titem.setVisible(value === 'visible');","\t\t},","","\t\tdisplay: function(item, value) {","\t\t\tif (item.setVisible)","\t\t\t\titem.setVisible(value !== null);","\t\t},","","\t\t'stop-color': function(item, value) {","\t\t\tif (item.setColor)","\t\t\t\titem.setColor(value);","\t\t},","","\t\t'stop-opacity': function(item, value) {","\t\t\tif (item._color)","\t\t\t\titem._color.setAlpha(parseFloat(value));","\t\t},","","\t\toffset: function(item, value) {","\t\t\tif (item.setOffset) {","\t\t\t\tvar percent = value.match(/(.*)%$/);","\t\t\t\titem.setOffset(percent ? percent[1] / 100 : parseFloat(value));","\t\t\t}","\t\t},","","\t\tviewBox: function(item, value, name, node, styles) {","\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),","\t\t\t\tsize = getSize(node, null, null, true),","\t\t\t\tgroup,","\t\t\t\tmatrix;","\t\t\tif (item instanceof Group) {","\t\t\t\tvar scale = size ? size.divide(rect.getSize()) : 1,","\t\t\t\tmatrix = new Matrix().scale(scale)","\t\t\t\t\t\t.translate(rect.getPoint().negate());","\t\t\t\tgroup = item;","\t\t\t} else if (item instanceof SymbolDefinition) {","\t\t\t\tif (size)","\t\t\t\t\trect.setSize(size);","\t\t\t\tgroup = item._item;","\t\t\t}","\t\t\tif (group)  {","\t\t\t\tif (getAttribute(node, 'overflow', styles) !== 'visible') {","\t\t\t\t\tvar clip = new Shape.Rectangle(rect);","\t\t\t\t\tclip.setClipMask(true);","\t\t\t\t\tgroup.addChild(clip);","\t\t\t\t}","\t\t\t\tif (matrix)","\t\t\t\t\tgroup.transform(matrix);","\t\t\t}","\t\t}","\t});","","\tfunction getAttribute(node, name, styles) {","\t\tvar attr = node.attributes[name],","\t\t\tvalue = attr && attr.value;","\t\tif (!value) {","\t\t\tvar style = Base.camelize(name);","\t\t\tvalue = node.style[style];","\t\t\tif (!value && styles.node[style] !== styles.parent[style])","\t\t\t\tvalue = styles.node[style];","\t\t}","\t\treturn !value ? undefined","\t\t\t\t: value === 'none' ? null","\t\t\t\t: value;","\t}","","\tfunction applyAttributes(item, node, isRoot) {","\t\tif (node.style) {","\t\t\tvar parent = node.parentNode,","\t\t\t\tstyles = {","\t\t\t\t\tnode: DomElement.getStyles(node) || {},","\t\t\t\t\tparent: !isRoot && !/^defs$/i.test(parent.tagName)","\t\t\t\t\t\t\t&& DomElement.getStyles(parent) || {}","\t\t\t\t};","\t\t\tBase.each(attributes, function(apply, name) {","\t\t\t\tvar value = getAttribute(node, name, styles);","\t\t\t\titem = value !== undefined","\t\t\t\t\t\t&& apply(item, value, name, node, styles) || item;","\t\t\t});","\t\t}","\t\treturn item;","\t}","","\tfunction getDefinition(value) {","\t\tvar match = value && value.match(/\\((?:[\"'#]*)([^\"')]+)/),","\t\t\tname = match && match[1],","\t\t\tres = name && definitions[window","\t\t\t\t\t? name.replace(window.location.href.split('#')[0] + '#', '')","\t\t\t\t\t: name];","\t\tif (res && res._scaleToBounds) {","\t\t\tres = res.clone();","\t\t\tres._scaleToBounds = true;","\t\t}","\t\treturn res;","\t}","","\tfunction importNode(node, options, isRoot) {","\t\tvar type = node.nodeName.toLowerCase(),","\t\t\tisElement = type !== '#document',","\t\t\tbody = document.body,","\t\t\tcontainer,","\t\t\tparent,","\t\t\tnext;","\t\tif (isRoot && isElement) {","\t\t\trootSize = paper.getView().getSize();","\t\t\trootSize = getSize(node, null, null, true) || rootSize;","\t\t\tcontainer = SvgElement.create('svg', {","\t\t\t\tstyle: 'stroke-width: 1px; stroke-miterlimit: 10'","\t\t\t});","\t\t\tparent = node.parentNode;","\t\t\tnext = node.nextSibling;","\t\t\tcontainer.appendChild(node);","\t\t\tbody.appendChild(container);","\t\t}","\t\tvar settings = paper.settings,","\t\t\tapplyMatrix = settings.applyMatrix,","\t\t\tinsertItems = settings.insertItems;","\t\tsettings.applyMatrix = false;","\t\tsettings.insertItems = false;","\t\tvar importer = importers[type],","\t\t\titem = importer && importer(node, type, options, isRoot) || null;","\t\tsettings.insertItems = insertItems;","\t\tsettings.applyMatrix = applyMatrix;","\t\tif (item) {","\t\t\tif (isElement && !(item instanceof Group))","\t\t\t\titem = applyAttributes(item, node, isRoot);","\t\t\tvar onImport = options.onImport,","\t\t\t\tdata = isElement && node.getAttribute('data-paper-data');","\t\t\tif (onImport)","\t\t\t\titem = onImport(node, item, options) || item;","\t\t\tif (options.expandShapes && item instanceof Shape) {","\t\t\t\titem.remove();","\t\t\t\titem = item.toPath();","\t\t\t}","\t\t\tif (data)","\t\t\t\titem._data = JSON.parse(data);","\t\t}","\t\tif (container) {","\t\t\tbody.removeChild(container);","\t\t\tif (parent) {","\t\t\t\tif (next) {","\t\t\t\t\tparent.insertBefore(node, next);","\t\t\t\t} else {","\t\t\t\t\tparent.appendChild(node);","\t\t\t\t}","\t\t\t}","\t\t}","\t\tif (isRoot) {","\t\t\tdefinitions = {};","\t\t\tif (item && Base.pick(options.applyMatrix, applyMatrix))","\t\t\t\titem.matrix.apply(true, true);","\t\t}","\t\treturn item;","\t}","","\tfunction importSVG(source, options, owner) {","\t\tif (!source)","\t\t\treturn null;","\t\toptions = typeof options === 'function' ? { onLoad: options }","\t\t\t\t: options || {};","\t\tvar scope = paper,","\t\t\titem = null;","","\t\tfunction onLoad(svg) {","\t\t\ttry {","\t\t\t\tvar node = typeof svg === 'object' ? svg : new self.DOMParser()","\t\t\t\t\t\t.parseFromString(svg, 'image/svg+xml');","\t\t\t\tif (!node.nodeName) {","\t\t\t\t\tnode = null;","\t\t\t\t\tthrow new Error('Unsupported SVG source: ' + source);","\t\t\t\t}","\t\t\t\tpaper = scope;","\t\t\t\titem = importNode(node, options, true);","\t\t\t\tif (!options || options.insert !== false) {","\t\t\t\t\towner._insertItem(undefined, item);","\t\t\t\t}","\t\t\t\tvar onLoad = options.onLoad;","\t\t\t\tif (onLoad)","\t\t\t\t\tonLoad(item, svg);","\t\t\t} catch (e) {","\t\t\t\tonError(e);","\t\t\t}","\t\t}","","\t\tfunction onError(message, status) {","\t\t\tvar onError = options.onError;","\t\t\tif (onError) {","\t\t\t\tonError(message, status);","\t\t\t} else {","\t\t\t\tthrow new Error(message);","\t\t\t}","\t\t}","","\t\tif (typeof source === 'string' && !/^.*</.test(source)) {","\t\t\tvar node = document.getElementById(source);","\t\t\tif (node) {","\t\t\t\tonLoad(node);","\t\t\t} else {","\t\t\t\tHttp.request({","\t\t\t\t\turl: source,","\t\t\t\t\tasync: true,","\t\t\t\t\tonLoad: onLoad,","\t\t\t\t\tonError: onError","\t\t\t\t});","\t\t\t}","\t\t} else if (typeof File !== 'undefined' && source instanceof File) {","\t\t\tvar reader = new FileReader();","\t\t\treader.onload = function() {","\t\t\t\tonLoad(reader.result);","\t\t\t};","\t\t\treader.onerror = function() {","\t\t\t\tonError(reader.error);","\t\t\t};","\t\t\treturn reader.readAsText(source);","\t\t} else {","\t\t\tonLoad(source);","\t\t}","","\t\treturn item;","\t}","","\tItem.inject({","\t\timportSVG: function(node, options) {","\t\t\treturn importSVG(node, options, this);","\t\t}","\t});","","\tProject.inject({","\t\timportSVG: function(node, options) {","\t\t\tthis.activate();","\t\t\treturn importSVG(node, options, this);","\t\t}","\t});","};","","Base.exports.PaperScript = function() {","\tvar global = this,","\t\tacorn = global.acorn;","\tif (!acorn && typeof require !== 'undefined') {","\t\ttry { acorn = require('acorn'); } catch(e) {}","\t}","\tif (!acorn) {","\t\tvar exports, module;","\t\tacorn = exports = module = {};","","(function(root, mod) {","  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports);","  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod);","  mod(root.acorn || (root.acorn = {}));","})(this, function(exports) {","  \"use strict\";","","  exports.version = \"0.5.0\";","","  var options, input, inputLen, sourceFile;","","  exports.parse = function(inpt, opts) {","\tinput = String(inpt); inputLen = input.length;","\tsetOptions(opts);","\tinitTokenState();","\treturn parseTopLevel(options.program);","  };","","  var defaultOptions = exports.defaultOptions = {","\tecmaVersion: 5,","\tstrictSemicolons: false,","\tallowTrailingCommas: true,","\tforbidReserved: false,","\tallowReturnOutsideFunction: false,","\tlocations: false,","\tonComment: null,","\tranges: false,","\tprogram: null,","\tsourceFile: null,","\tdirectSourceFile: null","  };","","  function setOptions(opts) {","\toptions = opts || {};","\tfor (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))","\t  options[opt] = defaultOptions[opt];","\tsourceFile = options.sourceFile || null;","  }","","  var getLineInfo = exports.getLineInfo = function(input, offset) {","\tfor (var line = 1, cur = 0;;) {","\t  lineBreak.lastIndex = cur;","\t  var match = lineBreak.exec(input);","\t  if (match && match.index < offset) {","\t\t++line;","\t\tcur = match.index + match[0].length;","\t  } else break;","\t}","\treturn {line: line, column: offset - cur};","  };","","  exports.tokenize = function(inpt, opts) {","\tinput = String(inpt); inputLen = input.length;","\tsetOptions(opts);","\tinitTokenState();","","\tvar t = {};","\tfunction getToken(forceRegexp) {","\t  lastEnd = tokEnd;","\t  readToken(forceRegexp);","\t  t.start = tokStart; t.end = tokEnd;","\t  t.startLoc = tokStartLoc; t.endLoc = tokEndLoc;","\t  t.type = tokType; t.value = tokVal;","\t  return t;","\t}","\tgetToken.jumpTo = function(pos, reAllowed) {","\t  tokPos = pos;","\t  if (options.locations) {","\t\ttokCurLine = 1;","\t\ttokLineStart = lineBreak.lastIndex = 0;","\t\tvar match;","\t\twhile ((match = lineBreak.exec(input)) && match.index < pos) {","\t\t  ++tokCurLine;","\t\t  tokLineStart = match.index + match[0].length;","\t\t}","\t  }","\t  tokRegexpAllowed = reAllowed;","\t  skipSpace();","\t};","\treturn getToken;","  };","","  var tokPos;","","  var tokStart, tokEnd;","","  var tokStartLoc, tokEndLoc;","","  var tokType, tokVal;","","  var tokRegexpAllowed;","","  var tokCurLine, tokLineStart;","","  var lastStart, lastEnd, lastEndLoc;","","  var inFunction, labels, strict;","","  function raise(pos, message) {","\tvar loc = getLineInfo(input, pos);","\tmessage += \" (\" + loc.line + \":\" + loc.column + \")\";","\tvar err = new SyntaxError(message);","\terr.pos = pos; err.loc = loc; err.raisedAt = tokPos;","\tthrow err;","  }","","  var empty = [];","","  var _num = {type: \"num\"}, _regexp = {type: \"regexp\"}, _string = {type: \"string\"};","  var _name = {type: \"name\"}, _eof = {type: \"eof\"};","","  var _break = {keyword: \"break\"}, _case = {keyword: \"case\", beforeExpr: true}, _catch = {keyword: \"catch\"};","  var _continue = {keyword: \"continue\"}, _debugger = {keyword: \"debugger\"}, _default = {keyword: \"default\"};","  var _do = {keyword: \"do\", isLoop: true}, _else = {keyword: \"else\", beforeExpr: true};","  var _finally = {keyword: \"finally\"}, _for = {keyword: \"for\", isLoop: true}, _function = {keyword: \"function\"};","  var _if = {keyword: \"if\"}, _return = {keyword: \"return\", beforeExpr: true}, _switch = {keyword: \"switch\"};","  var _throw = {keyword: \"throw\", beforeExpr: true}, _try = {keyword: \"try\"}, _var = {keyword: \"var\"};","  var _while = {keyword: \"while\", isLoop: true}, _with = {keyword: \"with\"}, _new = {keyword: \"new\", beforeExpr: true};","  var _this = {keyword: \"this\"};","","  var _null = {keyword: \"null\", atomValue: null}, _true = {keyword: \"true\", atomValue: true};","  var _false = {keyword: \"false\", atomValue: false};","","  var _in = {keyword: \"in\", binop: 7, beforeExpr: true};","","  var keywordTypes = {\"break\": _break, \"case\": _case, \"catch\": _catch,","\t\t\t\t\t  \"continue\": _continue, \"debugger\": _debugger, \"default\": _default,","\t\t\t\t\t  \"do\": _do, \"else\": _else, \"finally\": _finally, \"for\": _for,","\t\t\t\t\t  \"function\": _function, \"if\": _if, \"return\": _return, \"switch\": _switch,","\t\t\t\t\t  \"throw\": _throw, \"try\": _try, \"var\": _var, \"while\": _while, \"with\": _with,","\t\t\t\t\t  \"null\": _null, \"true\": _true, \"false\": _false, \"new\": _new, \"in\": _in,","\t\t\t\t\t  \"instanceof\": {keyword: \"instanceof\", binop: 7, beforeExpr: true}, \"this\": _this,","\t\t\t\t\t  \"typeof\": {keyword: \"typeof\", prefix: true, beforeExpr: true},","\t\t\t\t\t  \"void\": {keyword: \"void\", prefix: true, beforeExpr: true},","\t\t\t\t\t  \"delete\": {keyword: \"delete\", prefix: true, beforeExpr: true}};","","  var _bracketL = {type: \"[\", beforeExpr: true}, _bracketR = {type: \"]\"}, _braceL = {type: \"{\", beforeExpr: true};","  var _braceR = {type: \"}\"}, _parenL = {type: \"(\", beforeExpr: true}, _parenR = {type: \")\"};","  var _comma = {type: \",\", beforeExpr: true}, _semi = {type: \";\", beforeExpr: true};","  var _colon = {type: \":\", beforeExpr: true}, _dot = {type: \".\"}, _question = {type: \"?\", beforeExpr: true};","","  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};","  var _assign = {isAssign: true, beforeExpr: true};","  var _incDec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};","  var _logicalOR = {binop: 1, beforeExpr: true};","  var _logicalAND = {binop: 2, beforeExpr: true};","  var _bitwiseOR = {binop: 3, beforeExpr: true};","  var _bitwiseXOR = {binop: 4, beforeExpr: true};","  var _bitwiseAND = {binop: 5, beforeExpr: true};","  var _equality = {binop: 6, beforeExpr: true};","  var _relational = {binop: 7, beforeExpr: true};","  var _bitShift = {binop: 8, beforeExpr: true};","  var _plusMin = {binop: 9, prefix: true, beforeExpr: true};","  var _multiplyModulo = {binop: 10, beforeExpr: true};","","  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,","\t\t\t\t\t  parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,","\t\t\t\t\t  dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,","\t\t\t\t\t  num: _num, regexp: _regexp, string: _string};","  for (var kw in keywordTypes) exports.tokTypes[\"_\" + kw] = keywordTypes[kw];","","  function makePredicate(words) {","\twords = words.split(\" \");","\tvar f = \"\", cats = [];","\tout: for (var i = 0; i < words.length; ++i) {","\t  for (var j = 0; j < cats.length; ++j)","\t\tif (cats[j][0].length == words[i].length) {","\t\t  cats[j].push(words[i]);","\t\t  continue out;","\t\t}","\t  cats.push([words[i]]);","\t}","\tfunction compareTo(arr) {","\t  if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";","\t  f += \"switch(str){\";","\t  for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";","\t  f += \"return true}return false;\";","\t}","","\tif (cats.length > 3) {","\t  cats.sort(function(a, b) {return b.length - a.length;});","\t  f += \"switch(str.length){\";","\t  for (var i = 0; i < cats.length; ++i) {","\t\tvar cat = cats[i];","\t\tf += \"case \" + cat[0].length + \":\";","\t\tcompareTo(cat);","\t  }","\t  f += \"}\";","","\t} else {","\t  compareTo(words);","\t}","\treturn new Function(\"str\", f);","  }","","  var isReservedWord3 = makePredicate(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\");","","  var isReservedWord5 = makePredicate(\"class enum extends super const export import\");","","  var isStrictReservedWord = makePredicate(\"implements interface let package private protected public static yield\");","","  var isStrictBadIdWord = makePredicate(\"eval arguments\");","","  var isKeyword = makePredicate(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\");","","  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;","  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";","  var nonASCIIidentifierChars = \"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";","  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");","  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");","","  var newline = /[\\n\\r\\u2028\\u2029]/;","","  var lineBreak = /\\r\\n|[\\n\\r\\u2028\\u2029]/g;","","  var isIdentifierStart = exports.isIdentifierStart = function(code) {","\tif (code < 65) return code === 36;","\tif (code < 91) return true;","\tif (code < 97) return code === 95;","\tif (code < 123)return true;","\treturn code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));","  };","","  var isIdentifierChar = exports.isIdentifierChar = function(code) {","\tif (code < 48) return code === 36;","\tif (code < 58) return true;","\tif (code < 65) return false;","\tif (code < 91) return true;","\tif (code < 97) return code === 95;","\tif (code < 123)return true;","\treturn code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));","  };","","  function line_loc_t() {","\tthis.line = tokCurLine;","\tthis.column = tokPos - tokLineStart;","  }","","  function initTokenState() {","\ttokCurLine = 1;","\ttokPos = tokLineStart = 0;","\ttokRegexpAllowed = true;","\tskipSpace();","  }","","  function finishToken(type, val) {","\ttokEnd = tokPos;","\tif (options.locations) tokEndLoc = new line_loc_t;","\ttokType = type;","\tskipSpace();","\ttokVal = val;","\ttokRegexpAllowed = type.beforeExpr;","  }","","  function skipBlockComment() {","\tvar startLoc = options.onComment && options.locations && new line_loc_t;","\tvar start = tokPos, end = input.indexOf(\"*/\", tokPos += 2);","\tif (end === -1) raise(tokPos - 2, \"Unterminated comment\");","\ttokPos = end + 2;","\tif (options.locations) {","\t  lineBreak.lastIndex = start;","\t  var match;","\t  while ((match = lineBreak.exec(input)) && match.index < tokPos) {","\t\t++tokCurLine;","\t\ttokLineStart = match.index + match[0].length;","\t  }","\t}","\tif (options.onComment)","\t  options.onComment(true, input.slice(start + 2, end), start, tokPos,","\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);","  }","","  function skipLineComment() {","\tvar start = tokPos;","\tvar startLoc = options.onComment && options.locations && new line_loc_t;","\tvar ch = input.charCodeAt(tokPos+=2);","\twhile (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {","\t  ++tokPos;","\t  ch = input.charCodeAt(tokPos);","\t}","\tif (options.onComment)","\t  options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,","\t\t\t\t\t\tstartLoc, options.locations && new line_loc_t);","  }","","  function skipSpace() {","\twhile (tokPos < inputLen) {","\t  var ch = input.charCodeAt(tokPos);","\t  if (ch === 32) {","\t\t++tokPos;","\t  } else if (ch === 13) {","\t\t++tokPos;","\t\tvar next = input.charCodeAt(tokPos);","\t\tif (next === 10) {","\t\t  ++tokPos;","\t\t}","\t\tif (options.locations) {","\t\t  ++tokCurLine;","\t\t  tokLineStart = tokPos;","\t\t}","\t  } else if (ch === 10 || ch === 8232 || ch === 8233) {","\t\t++tokPos;","\t\tif (options.locations) {","\t\t  ++tokCurLine;","\t\t  tokLineStart = tokPos;","\t\t}","\t  } else if (ch > 8 && ch < 14) {","\t\t++tokPos;","\t  } else if (ch === 47) {","\t\tvar next = input.charCodeAt(tokPos + 1);","\t\tif (next === 42) {","\t\t  skipBlockComment();","\t\t} else if (next === 47) {","\t\t  skipLineComment();","\t\t} else break;","\t  } else if (ch === 160) {","\t\t++tokPos;","\t  } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {","\t\t++tokPos;","\t  } else {","\t\tbreak;","\t  }","\t}","  }","","  function readToken_dot() {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next >= 48 && next <= 57) return readNumber(true);","\t++tokPos;","\treturn finishToken(_dot);","  }","","  function readToken_slash() {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (tokRegexpAllowed) {++tokPos; return readRegexp();}","\tif (next === 61) return finishOp(_assign, 2);","\treturn finishOp(_slash, 1);","  }","","  function readToken_mult_modulo() {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next === 61) return finishOp(_assign, 2);","\treturn finishOp(_multiplyModulo, 1);","  }","","  function readToken_pipe_amp(code) {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);","\tif (next === 61) return finishOp(_assign, 2);","\treturn finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);","  }","","  function readToken_caret() {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next === 61) return finishOp(_assign, 2);","\treturn finishOp(_bitwiseXOR, 1);","  }","","  function readToken_plus_min(code) {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next === code) {","\t  if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&","\t\t  newline.test(input.slice(lastEnd, tokPos))) {","\t\ttokPos += 3;","\t\tskipLineComment();","\t\tskipSpace();","\t\treturn readToken();","\t  }","\t  return finishOp(_incDec, 2);","\t}","\tif (next === 61) return finishOp(_assign, 2);","\treturn finishOp(_plusMin, 1);","  }","","  function readToken_lt_gt(code) {","\tvar next = input.charCodeAt(tokPos + 1);","\tvar size = 1;","\tif (next === code) {","\t  size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;","\t  if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);","\t  return finishOp(_bitShift, size);","\t}","\tif (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&","\t\tinput.charCodeAt(tokPos + 3) == 45) {","\t  tokPos += 4;","\t  skipLineComment();","\t  skipSpace();","\t  return readToken();","\t}","\tif (next === 61)","\t  size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;","\treturn finishOp(_relational, size);","  }","","  function readToken_eq_excl(code) {","\tvar next = input.charCodeAt(tokPos + 1);","\tif (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);","\treturn finishOp(code === 61 ? _eq : _prefix, 1);","  }","","  function getTokenFromCode(code) {","\tswitch(code) {","\tcase 46:","\t  return readToken_dot();","","\tcase 40: ++tokPos; return finishToken(_parenL);","\tcase 41: ++tokPos; return finishToken(_parenR);","\tcase 59: ++tokPos; return finishToken(_semi);","\tcase 44: ++tokPos; return finishToken(_comma);","\tcase 91: ++tokPos; return finishToken(_bracketL);","\tcase 93: ++tokPos; return finishToken(_bracketR);","\tcase 123: ++tokPos; return finishToken(_braceL);","\tcase 125: ++tokPos; return finishToken(_braceR);","\tcase 58: ++tokPos; return finishToken(_colon);","\tcase 63: ++tokPos; return finishToken(_question);","","\tcase 48:","\t  var next = input.charCodeAt(tokPos + 1);","\t  if (next === 120 || next === 88) return readHexNumber();","\tcase 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:","\t  return readNumber(false);","","\tcase 34: case 39:","\t  return readString(code);","","\tcase 47:","\t  return readToken_slash(code);","","\tcase 37: case 42:","\t  return readToken_mult_modulo();","","\tcase 124: case 38:","\t  return readToken_pipe_amp(code);","","\tcase 94:","\t  return readToken_caret();","","\tcase 43: case 45:","\t  return readToken_plus_min(code);","","\tcase 60: case 62:","\t  return readToken_lt_gt(code);","","\tcase 61: case 33:","\t  return readToken_eq_excl(code);","","\tcase 126:","\t  return finishOp(_prefix, 1);","\t}","","\treturn false;","  }","","  function readToken(forceRegexp) {","\tif (!forceRegexp) tokStart = tokPos;","\telse tokPos = tokStart + 1;","\tif (options.locations) tokStartLoc = new line_loc_t;","\tif (forceRegexp) return readRegexp();","\tif (tokPos >= inputLen) return finishToken(_eof);","","\tvar code = input.charCodeAt(tokPos);","\tif (isIdentifierStart(code) || code === 92 ) return readWord();","","\tvar tok = getTokenFromCode(code);","","\tif (tok === false) {","\t  var ch = String.fromCharCode(code);","\t  if (ch === \"\\\\\" || nonASCIIidentifierStart.test(ch)) return readWord();","\t  raise(tokPos, \"Unexpected character '\" + ch + \"'\");","\t}","\treturn tok;","  }","","  function finishOp(type, size) {","\tvar str = input.slice(tokPos, tokPos + size);","\ttokPos += size;","\tfinishToken(type, str);","  }","","  function readRegexp() {","\tvar content = \"\", escaped, inClass, start = tokPos;","\tfor (;;) {","\t  if (tokPos >= inputLen) raise(start, \"Unterminated regular expression\");","\t  var ch = input.charAt(tokPos);","\t  if (newline.test(ch)) raise(start, \"Unterminated regular expression\");","\t  if (!escaped) {","\t\tif (ch === \"[\") inClass = true;","\t\telse if (ch === \"]\" && inClass) inClass = false;","\t\telse if (ch === \"/\" && !inClass) break;","\t\tescaped = ch === \"\\\\\";","\t  } else escaped = false;","\t  ++tokPos;","\t}","\tvar content = input.slice(start, tokPos);","\t++tokPos;","\tvar mods = readWord1();","\tif (mods && !/^[gmsiy]*$/.test(mods)) raise(start, \"Invalid regexp flag\");","\ttry {","\t  var value = new RegExp(content, mods);","\t} catch (e) {","\t  if (e instanceof SyntaxError) raise(start, e.message);","\t  raise(e);","\t}","\treturn finishToken(_regexp, value);","  }","","  function readInt(radix, len) {","\tvar start = tokPos, total = 0;","\tfor (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {","\t  var code = input.charCodeAt(tokPos), val;","\t  if (code >= 97) val = code - 97 + 10;","\t  else if (code >= 65) val = code - 65 + 10;","\t  else if (code >= 48 && code <= 57) val = code - 48;","\t  else val = Infinity;","\t  if (val >= radix) break;","\t  ++tokPos;","\t  total = total * radix + val;","\t}","\tif (tokPos === start || len != null && tokPos - start !== len) return null;","","\treturn total;","  }","","  function readHexNumber() {","\ttokPos += 2;","\tvar val = readInt(16);","\tif (val == null) raise(tokStart + 2, \"Expected hexadecimal number\");","\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");","\treturn finishToken(_num, val);","  }","","  function readNumber(startsWithDot) {","\tvar start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;","\tif (!startsWithDot && readInt(10) === null) raise(start, \"Invalid number\");","\tif (input.charCodeAt(tokPos) === 46) {","\t  ++tokPos;","\t  readInt(10);","\t  isFloat = true;","\t}","\tvar next = input.charCodeAt(tokPos);","\tif (next === 69 || next === 101) {","\t  next = input.charCodeAt(++tokPos);","\t  if (next === 43 || next === 45) ++tokPos;","\t  if (readInt(10) === null) raise(start, \"Invalid number\");","\t  isFloat = true;","\t}","\tif (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, \"Identifier directly after number\");","","\tvar str = input.slice(start, tokPos), val;","\tif (isFloat) val = parseFloat(str);","\telse if (!octal || str.length === 1) val = parseInt(str, 10);","\telse if (/[89]/.test(str) || strict) raise(start, \"Invalid number\");","\telse val = parseInt(str, 8);","\treturn finishToken(_num, val);","  }","","  function readString(quote) {","\ttokPos++;","\tvar out = \"\";","\tfor (;;) {","\t  if (tokPos >= inputLen) raise(tokStart, \"Unterminated string constant\");","\t  var ch = input.charCodeAt(tokPos);","\t  if (ch === quote) {","\t\t++tokPos;","\t\treturn finishToken(_string, out);","\t  }","\t  if (ch === 92) {","\t\tch = input.charCodeAt(++tokPos);","\t\tvar octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));","\t\tif (octal) octal = octal[0];","\t\twhile (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);","\t\tif (octal === \"0\") octal = null;","\t\t++tokPos;","\t\tif (octal) {","\t\t  if (strict) raise(tokPos - 2, \"Octal literal in strict mode\");","\t\t  out += String.fromCharCode(parseInt(octal, 8));","\t\t  tokPos += octal.length - 1;","\t\t} else {","\t\t  switch (ch) {","\t\t  case 110: out += \"\\n\"; break;","\t\t  case 114: out += \"\\r\"; break;","\t\t  case 120: out += String.fromCharCode(readHexChar(2)); break;","\t\t  case 117: out += String.fromCharCode(readHexChar(4)); break;","\t\t  case 85: out += String.fromCharCode(readHexChar(8)); break;","\t\t  case 116: out += \"\\t\"; break;","\t\t  case 98: out += \"\\b\"; break;","\t\t  case 118: out += \"\\u000b\"; break;","\t\t  case 102: out += \"\\f\"; break;","\t\t  case 48: out += \"\\0\"; break;","\t\t  case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos;","\t\t  case 10:","\t\t\tif (options.locations) { tokLineStart = tokPos; ++tokCurLine; }","\t\t\tbreak;","\t\t  default: out += String.fromCharCode(ch); break;","\t\t  }","\t\t}","\t  } else {","\t\tif (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, \"Unterminated string constant\");","\t\tout += String.fromCharCode(ch);","\t\t++tokPos;","\t  }","\t}","  }","","  function readHexChar(len) {","\tvar n = readInt(16, len);","\tif (n === null) raise(tokStart, \"Bad character escape sequence\");","\treturn n;","  }","","  var containsEsc;","","  function readWord1() {","\tcontainsEsc = false;","\tvar word, first = true, start = tokPos;","\tfor (;;) {","\t  var ch = input.charCodeAt(tokPos);","\t  if (isIdentifierChar(ch)) {","\t\tif (containsEsc) word += input.charAt(tokPos);","\t\t++tokPos;","\t  } else if (ch === 92) {","\t\tif (!containsEsc) word = input.slice(start, tokPos);","\t\tcontainsEsc = true;","\t\tif (input.charCodeAt(++tokPos) != 117)","\t\t  raise(tokPos, \"Expecting Unicode escape sequence \\\\uXXXX\");","\t\t++tokPos;","\t\tvar esc = readHexChar(4);","\t\tvar escStr = String.fromCharCode(esc);","\t\tif (!escStr) raise(tokPos - 1, \"Invalid Unicode escape\");","\t\tif (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))","\t\t  raise(tokPos - 4, \"Invalid Unicode escape\");","\t\tword += escStr;","\t  } else {","\t\tbreak;","\t  }","\t  first = false;","\t}","\treturn containsEsc ? word : input.slice(start, tokPos);","  }","","  function readWord() {","\tvar word = readWord1();","\tvar type = _name;","\tif (!containsEsc && isKeyword(word))","\t  type = keywordTypes[word];","\treturn finishToken(type, word);","  }","","  function next() {","\tlastStart = tokStart;","\tlastEnd = tokEnd;","\tlastEndLoc = tokEndLoc;","\treadToken();","  }","","  function setStrict(strct) {","\tstrict = strct;","\ttokPos = tokStart;","\tif (options.locations) {","\t  while (tokPos < tokLineStart) {","\t\ttokLineStart = input.lastIndexOf(\"\\n\", tokLineStart - 2) + 1;","\t\t--tokCurLine;","\t  }","\t}","\tskipSpace();","\treadToken();","  }","","  function node_t() {","\tthis.type = null;","\tthis.start = tokStart;","\tthis.end = null;","  }","","  function node_loc_t() {","\tthis.start = tokStartLoc;","\tthis.end = null;","\tif (sourceFile !== null) this.source = sourceFile;","  }","","  function startNode() {","\tvar node = new node_t();","\tif (options.locations)","\t  node.loc = new node_loc_t();","\tif (options.directSourceFile)","\t  node.sourceFile = options.directSourceFile;","\tif (options.ranges)","\t  node.range = [tokStart, 0];","\treturn node;","  }","","  function startNodeFrom(other) {","\tvar node = new node_t();","\tnode.start = other.start;","\tif (options.locations) {","\t  node.loc = new node_loc_t();","\t  node.loc.start = other.loc.start;","\t}","\tif (options.ranges)","\t  node.range = [other.range[0], 0];","","\treturn node;","  }","","  function finishNode(node, type) {","\tnode.type = type;","\tnode.end = lastEnd;","\tif (options.locations)","\t  node.loc.end = lastEndLoc;","\tif (options.ranges)","\t  node.range[1] = lastEnd;","\treturn node;","  }","","  function isUseStrict(stmt) {","\treturn options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&","\t  stmt.expression.type === \"Literal\" && stmt.expression.value === \"use strict\";","  }","","  function eat(type) {","\tif (tokType === type) {","\t  next();","\t  return true;","\t}","  }","","  function canInsertSemicolon() {","\treturn !options.strictSemicolons &&","\t  (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));","  }","","  function semicolon() {","\tif (!eat(_semi) && !canInsertSemicolon()) unexpected();","  }","","  function expect(type) {","\tif (tokType === type) next();","\telse unexpected();","  }","","  function unexpected() {","\traise(tokStart, \"Unexpected token\");","  }","","  function checkLVal(expr) {","\tif (expr.type !== \"Identifier\" && expr.type !== \"MemberExpression\")","\t  raise(expr.start, \"Assigning to rvalue\");","\tif (strict && expr.type === \"Identifier\" && isStrictBadIdWord(expr.name))","\t  raise(expr.start, \"Assigning to \" + expr.name + \" in strict mode\");","  }","","  function parseTopLevel(program) {","\tlastStart = lastEnd = tokPos;","\tif (options.locations) lastEndLoc = new line_loc_t;","\tinFunction = strict = null;","\tlabels = [];","\treadToken();","","\tvar node = program || startNode(), first = true;","\tif (!program) node.body = [];","\twhile (tokType !== _eof) {","\t  var stmt = parseStatement();","\t  node.body.push(stmt);","\t  if (first && isUseStrict(stmt)) setStrict(true);","\t  first = false;","\t}","\treturn finishNode(node, \"Program\");","  }","","  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};","","  function parseStatement() {","\tif (tokType === _slash || tokType === _assign && tokVal == \"/=\")","\t  readToken(true);","","\tvar starttype = tokType, node = startNode();","","\tswitch (starttype) {","\tcase _break: case _continue:","\t  next();","\t  var isBreak = starttype === _break;","\t  if (eat(_semi) || canInsertSemicolon()) node.label = null;","\t  else if (tokType !== _name) unexpected();","\t  else {","\t\tnode.label = parseIdent();","\t\tsemicolon();","\t  }","","\t  for (var i = 0; i < labels.length; ++i) {","\t\tvar lab = labels[i];","\t\tif (node.label == null || lab.name === node.label.name) {","\t\t  if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;","\t\t  if (node.label && isBreak) break;","\t\t}","\t  }","\t  if (i === labels.length) raise(node.start, \"Unsyntactic \" + starttype.keyword);","\t  return finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");","","\tcase _debugger:","\t  next();","\t  semicolon();","\t  return finishNode(node, \"DebuggerStatement\");","","\tcase _do:","\t  next();","\t  labels.push(loopLabel);","\t  node.body = parseStatement();","\t  labels.pop();","\t  expect(_while);","\t  node.test = parseParenExpression();","\t  semicolon();","\t  return finishNode(node, \"DoWhileStatement\");","","\tcase _for:","\t  next();","\t  labels.push(loopLabel);","\t  expect(_parenL);","\t  if (tokType === _semi) return parseFor(node, null);","\t  if (tokType === _var) {","\t\tvar init = startNode();","\t\tnext();","\t\tparseVar(init, true);","\t\tfinishNode(init, \"VariableDeclaration\");","\t\tif (init.declarations.length === 1 && eat(_in))","\t\t  return parseForIn(node, init);","\t\treturn parseFor(node, init);","\t  }","\t  var init = parseExpression(false, true);","\t  if (eat(_in)) {checkLVal(init); return parseForIn(node, init);}","\t  return parseFor(node, init);","","\tcase _function:","\t  next();","\t  return parseFunction(node, true);","","\tcase _if:","\t  next();","\t  node.test = parseParenExpression();","\t  node.consequent = parseStatement();","\t  node.alternate = eat(_else) ? parseStatement() : null;","\t  return finishNode(node, \"IfStatement\");","","\tcase _return:","\t  if (!inFunction && !options.allowReturnOutsideFunction)","\t\traise(tokStart, \"'return' outside of function\");","\t  next();","","\t  if (eat(_semi) || canInsertSemicolon()) node.argument = null;","\t  else { node.argument = parseExpression(); semicolon(); }","\t  return finishNode(node, \"ReturnStatement\");","","\tcase _switch:","\t  next();","\t  node.discriminant = parseParenExpression();","\t  node.cases = [];","\t  expect(_braceL);","\t  labels.push(switchLabel);","","\t  for (var cur, sawDefault; tokType != _braceR;) {","\t\tif (tokType === _case || tokType === _default) {","\t\t  var isCase = tokType === _case;","\t\t  if (cur) finishNode(cur, \"SwitchCase\");","\t\t  node.cases.push(cur = startNode());","\t\t  cur.consequent = [];","\t\t  next();","\t\t  if (isCase) cur.test = parseExpression();","\t\t  else {","\t\t\tif (sawDefault) raise(lastStart, \"Multiple default clauses\"); sawDefault = true;","\t\t\tcur.test = null;","\t\t  }","\t\t  expect(_colon);","\t\t} else {","\t\t  if (!cur) unexpected();","\t\t  cur.consequent.push(parseStatement());","\t\t}","\t  }","\t  if (cur) finishNode(cur, \"SwitchCase\");","\t  next();","\t  labels.pop();","\t  return finishNode(node, \"SwitchStatement\");","","\tcase _throw:","\t  next();","\t  if (newline.test(input.slice(lastEnd, tokStart)))","\t\traise(lastEnd, \"Illegal newline after throw\");","\t  node.argument = parseExpression();","\t  semicolon();","\t  return finishNode(node, \"ThrowStatement\");","","\tcase _try:","\t  next();","\t  node.block = parseBlock();","\t  node.handler = null;","\t  if (tokType === _catch) {","\t\tvar clause = startNode();","\t\tnext();","\t\texpect(_parenL);","\t\tclause.param = parseIdent();","\t\tif (strict && isStrictBadIdWord(clause.param.name))","\t\t  raise(clause.param.start, \"Binding \" + clause.param.name + \" in strict mode\");","\t\texpect(_parenR);","\t\tclause.guard = null;","\t\tclause.body = parseBlock();","\t\tnode.handler = finishNode(clause, \"CatchClause\");","\t  }","\t  node.guardedHandlers = empty;","\t  node.finalizer = eat(_finally) ? parseBlock() : null;","\t  if (!node.handler && !node.finalizer)","\t\traise(node.start, \"Missing catch or finally clause\");","\t  return finishNode(node, \"TryStatement\");","","\tcase _var:","\t  next();","\t  parseVar(node);","\t  semicolon();","\t  return finishNode(node, \"VariableDeclaration\");","","\tcase _while:","\t  next();","\t  node.test = parseParenExpression();","\t  labels.push(loopLabel);","\t  node.body = parseStatement();","\t  labels.pop();","\t  return finishNode(node, \"WhileStatement\");","","\tcase _with:","\t  if (strict) raise(tokStart, \"'with' in strict mode\");","\t  next();","\t  node.object = parseParenExpression();","\t  node.body = parseStatement();","\t  return finishNode(node, \"WithStatement\");","","\tcase _braceL:","\t  return parseBlock();","","\tcase _semi:","\t  next();","\t  return finishNode(node, \"EmptyStatement\");","","\tdefault:","\t  var maybeName = tokVal, expr = parseExpression();","\t  if (starttype === _name && expr.type === \"Identifier\" && eat(_colon)) {","\t\tfor (var i = 0; i < labels.length; ++i)","\t\t  if (labels[i].name === maybeName) raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");","\t\tvar kind = tokType.isLoop ? \"loop\" : tokType === _switch ? \"switch\" : null;","\t\tlabels.push({name: maybeName, kind: kind});","\t\tnode.body = parseStatement();","\t\tlabels.pop();","\t\tnode.label = expr;","\t\treturn finishNode(node, \"LabeledStatement\");","\t  } else {","\t\tnode.expression = expr;","\t\tsemicolon();","\t\treturn finishNode(node, \"ExpressionStatement\");","\t  }","\t}","  }","","  function parseParenExpression() {","\texpect(_parenL);","\tvar val = parseExpression();","\texpect(_parenR);","\treturn val;","  }","","  function parseBlock(allowStrict) {","\tvar node = startNode(), first = true, strict = false, oldStrict;","\tnode.body = [];","\texpect(_braceL);","\twhile (!eat(_braceR)) {","\t  var stmt = parseStatement();","\t  node.body.push(stmt);","\t  if (first && allowStrict && isUseStrict(stmt)) {","\t\toldStrict = strict;","\t\tsetStrict(strict = true);","\t  }","\t  first = false;","\t}","\tif (strict && !oldStrict) setStrict(false);","\treturn finishNode(node, \"BlockStatement\");","  }","","  function parseFor(node, init) {","\tnode.init = init;","\texpect(_semi);","\tnode.test = tokType === _semi ? null : parseExpression();","\texpect(_semi);","\tnode.update = tokType === _parenR ? null : parseExpression();","\texpect(_parenR);","\tnode.body = parseStatement();","\tlabels.pop();","\treturn finishNode(node, \"ForStatement\");","  }","","  function parseForIn(node, init) {","\tnode.left = init;","\tnode.right = parseExpression();","\texpect(_parenR);","\tnode.body = parseStatement();","\tlabels.pop();","\treturn finishNode(node, \"ForInStatement\");","  }","","  function parseVar(node, noIn) {","\tnode.declarations = [];","\tnode.kind = \"var\";","\tfor (;;) {","\t  var decl = startNode();","\t  decl.id = parseIdent();","\t  if (strict && isStrictBadIdWord(decl.id.name))","\t\traise(decl.id.start, \"Binding \" + decl.id.name + \" in strict mode\");","\t  decl.init = eat(_eq) ? parseExpression(true, noIn) : null;","\t  node.declarations.push(finishNode(decl, \"VariableDeclarator\"));","\t  if (!eat(_comma)) break;","\t}","\treturn node;","  }","","  function parseExpression(noComma, noIn) {","\tvar expr = parseMaybeAssign(noIn);","\tif (!noComma && tokType === _comma) {","\t  var node = startNodeFrom(expr);","\t  node.expressions = [expr];","\t  while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));","\t  return finishNode(node, \"SequenceExpression\");","\t}","\treturn expr;","  }","","  function parseMaybeAssign(noIn) {","\tvar left = parseMaybeConditional(noIn);","\tif (tokType.isAssign) {","\t  var node = startNodeFrom(left);","\t  node.operator = tokVal;","\t  node.left = left;","\t  next();","\t  node.right = parseMaybeAssign(noIn);","\t  checkLVal(left);","\t  return finishNode(node, \"AssignmentExpression\");","\t}","\treturn left;","  }","","  function parseMaybeConditional(noIn) {","\tvar expr = parseExprOps(noIn);","\tif (eat(_question)) {","\t  var node = startNodeFrom(expr);","\t  node.test = expr;","\t  node.consequent = parseExpression(true);","\t  expect(_colon);","\t  node.alternate = parseExpression(true, noIn);","\t  return finishNode(node, \"ConditionalExpression\");","\t}","\treturn expr;","  }","","  function parseExprOps(noIn) {","\treturn parseExprOp(parseMaybeUnary(), -1, noIn);","  }","","  function parseExprOp(left, minPrec, noIn) {","\tvar prec = tokType.binop;","\tif (prec != null && (!noIn || tokType !== _in)) {","\t  if (prec > minPrec) {","\t\tvar node = startNodeFrom(left);","\t\tnode.left = left;","\t\tnode.operator = tokVal;","\t\tvar op = tokType;","\t\tnext();","\t\tnode.right = parseExprOp(parseMaybeUnary(), prec, noIn);","\t\tvar exprNode = finishNode(node, (op === _logicalOR || op === _logicalAND) ? \"LogicalExpression\" : \"BinaryExpression\");","\t\treturn parseExprOp(exprNode, minPrec, noIn);","\t  }","\t}","\treturn left;","  }","","  function parseMaybeUnary() {","\tif (tokType.prefix) {","\t  var node = startNode(), update = tokType.isUpdate;","\t  node.operator = tokVal;","\t  node.prefix = true;","\t  tokRegexpAllowed = true;","\t  next();","\t  node.argument = parseMaybeUnary();","\t  if (update) checkLVal(node.argument);","\t  else if (strict && node.operator === \"delete\" &&","\t\t\t   node.argument.type === \"Identifier\")","\t\traise(node.start, \"Deleting local variable in strict mode\");","\t  return finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");","\t}","\tvar expr = parseExprSubscripts();","\twhile (tokType.postfix && !canInsertSemicolon()) {","\t  var node = startNodeFrom(expr);","\t  node.operator = tokVal;","\t  node.prefix = false;","\t  node.argument = expr;","\t  checkLVal(expr);","\t  next();","\t  expr = finishNode(node, \"UpdateExpression\");","\t}","\treturn expr;","  }","","  function parseExprSubscripts() {","\treturn parseSubscripts(parseExprAtom());","  }","","  function parseSubscripts(base, noCalls) {","\tif (eat(_dot)) {","\t  var node = startNodeFrom(base);","\t  node.object = base;","\t  node.property = parseIdent(true);","\t  node.computed = false;","\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);","\t} else if (eat(_bracketL)) {","\t  var node = startNodeFrom(base);","\t  node.object = base;","\t  node.property = parseExpression();","\t  node.computed = true;","\t  expect(_bracketR);","\t  return parseSubscripts(finishNode(node, \"MemberExpression\"), noCalls);","\t} else if (!noCalls && eat(_parenL)) {","\t  var node = startNodeFrom(base);","\t  node.callee = base;","\t  node.arguments = parseExprList(_parenR, false);","\t  return parseSubscripts(finishNode(node, \"CallExpression\"), noCalls);","\t} else return base;","  }","","  function parseExprAtom() {","\tswitch (tokType) {","\tcase _this:","\t  var node = startNode();","\t  next();","\t  return finishNode(node, \"ThisExpression\");","\tcase _name:","\t  return parseIdent();","\tcase _num: case _string: case _regexp:","\t  var node = startNode();","\t  node.value = tokVal;","\t  node.raw = input.slice(tokStart, tokEnd);","\t  next();","\t  return finishNode(node, \"Literal\");","","\tcase _null: case _true: case _false:","\t  var node = startNode();","\t  node.value = tokType.atomValue;","\t  node.raw = tokType.keyword;","\t  next();","\t  return finishNode(node, \"Literal\");","","\tcase _parenL:","\t  var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;","\t  next();","\t  var val = parseExpression();","\t  val.start = tokStart1;","\t  val.end = tokEnd;","\t  if (options.locations) {","\t\tval.loc.start = tokStartLoc1;","\t\tval.loc.end = tokEndLoc;","\t  }","\t  if (options.ranges)","\t\tval.range = [tokStart1, tokEnd];","\t  expect(_parenR);","\t  return val;","","\tcase _bracketL:","\t  var node = startNode();","\t  next();","\t  node.elements = parseExprList(_bracketR, true, true);","\t  return finishNode(node, \"ArrayExpression\");","","\tcase _braceL:","\t  return parseObj();","","\tcase _function:","\t  var node = startNode();","\t  next();","\t  return parseFunction(node, false);","","\tcase _new:","\t  return parseNew();","","\tdefault:","\t  unexpected();","\t}","  }","","  function parseNew() {","\tvar node = startNode();","\tnext();","\tnode.callee = parseSubscripts(parseExprAtom(), true);","\tif (eat(_parenL)) node.arguments = parseExprList(_parenR, false);","\telse node.arguments = empty;","\treturn finishNode(node, \"NewExpression\");","  }","","  function parseObj() {","\tvar node = startNode(), first = true, sawGetSet = false;","\tnode.properties = [];","\tnext();","\twhile (!eat(_braceR)) {","\t  if (!first) {","\t\texpect(_comma);","\t\tif (options.allowTrailingCommas && eat(_braceR)) break;","\t  } else first = false;","","\t  var prop = {key: parsePropertyName()}, isGetSet = false, kind;","\t  if (eat(_colon)) {","\t\tprop.value = parseExpression(true);","\t\tkind = prop.kind = \"init\";","\t  } else if (options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&","\t\t\t\t (prop.key.name === \"get\" || prop.key.name === \"set\")) {","\t\tisGetSet = sawGetSet = true;","\t\tkind = prop.kind = prop.key.name;","\t\tprop.key = parsePropertyName();","\t\tif (tokType !== _parenL) unexpected();","\t\tprop.value = parseFunction(startNode(), false);","\t  } else unexpected();","","\t  if (prop.key.type === \"Identifier\" && (strict || sawGetSet)) {","\t\tfor (var i = 0; i < node.properties.length; ++i) {","\t\t  var other = node.properties[i];","\t\t  if (other.key.name === prop.key.name) {","\t\t\tvar conflict = kind == other.kind || isGetSet && other.kind === \"init\" ||","\t\t\t  kind === \"init\" && (other.kind === \"get\" || other.kind === \"set\");","\t\t\tif (conflict && !strict && kind === \"init\" && other.kind === \"init\") conflict = false;","\t\t\tif (conflict) raise(prop.key.start, \"Redefinition of property\");","\t\t  }","\t\t}","\t  }","\t  node.properties.push(prop);","\t}","\treturn finishNode(node, \"ObjectExpression\");","  }","","  function parsePropertyName() {","\tif (tokType === _num || tokType === _string) return parseExprAtom();","\treturn parseIdent(true);","  }","","  function parseFunction(node, isStatement) {","\tif (tokType === _name) node.id = parseIdent();","\telse if (isStatement) unexpected();","\telse node.id = null;","\tnode.params = [];","\tvar first = true;","\texpect(_parenL);","\twhile (!eat(_parenR)) {","\t  if (!first) expect(_comma); else first = false;","\t  node.params.push(parseIdent());","\t}","","\tvar oldInFunc = inFunction, oldLabels = labels;","\tinFunction = true; labels = [];","\tnode.body = parseBlock(true);","\tinFunction = oldInFunc; labels = oldLabels;","","\tif (strict || node.body.body.length && isUseStrict(node.body.body[0])) {","\t  for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {","\t\tvar id = i < 0 ? node.id : node.params[i];","\t\tif (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))","\t\t  raise(id.start, \"Defining '\" + id.name + \"' in strict mode\");","\t\tif (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)","\t\t  raise(id.start, \"Argument name clash in strict mode\");","\t  }","\t}","","\treturn finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");","  }","","  function parseExprList(close, allowTrailingComma, allowEmpty) {","\tvar elts = [], first = true;","\twhile (!eat(close)) {","\t  if (!first) {","\t\texpect(_comma);","\t\tif (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;","\t  } else first = false;","","\t  if (allowEmpty && tokType === _comma) elts.push(null);","\t  else elts.push(parseExpression(true));","\t}","\treturn elts;","  }","","  function parseIdent(liberal) {","\tvar node = startNode();","\tif (liberal && options.forbidReserved == \"everywhere\") liberal = false;","\tif (tokType === _name) {","\t  if (!liberal &&","\t\t  (options.forbidReserved &&","\t\t   (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) ||","\t\t   strict && isStrictReservedWord(tokVal)) &&","\t\t  input.slice(tokStart, tokEnd).indexOf(\"\\\\\") == -1)","\t\traise(tokStart, \"The keyword '\" + tokVal + \"' is reserved\");","\t  node.name = tokVal;","\t} else if (liberal && tokType.keyword) {","\t  node.name = tokType.keyword;","\t} else {","\t  unexpected();","\t}","\ttokRegexpAllowed = false;","\tnext();","\treturn finishNode(node, \"Identifier\");","  }","","});","","\t\tif (!acorn.version)","\t\t\tacorn = null;","\t}","","\tfunction parse(code, options) {","\t\treturn (global.acorn || acorn).parse(code, options);","\t}","","\tvar binaryOperators = {","\t\t'+': '__add',","\t\t'-': '__subtract',","\t\t'*': '__multiply',","\t\t'/': '__divide',","\t\t'%': '__modulo',","\t\t'==': '__equals',","\t\t'!=': '__equals'","\t};","","\tvar unaryOperators = {","\t\t'-': '__negate',","\t\t'+': '__self'","\t};","","\tvar fields = Base.each(","\t\t['add', 'subtract', 'multiply', 'divide', 'modulo', 'equals', 'negate'],","\t\tfunction(name) {","\t\t\tthis['__' + name] = '#' + name;","\t\t},","\t\t{","\t\t\t__self: function() {","\t\t\t\treturn this;","\t\t\t}","\t\t}","\t);","\tPoint.inject(fields);","\tSize.inject(fields);","\tColor.inject(fields);","","\tfunction __$__(left, operator, right) {","\t\tvar handler = binaryOperators[operator];","\t\tif (left && left[handler]) {","\t\t\tvar res = left[handler](right);","\t\t\treturn operator === '!=' ? !res : res;","\t\t}","\t\tswitch (operator) {","\t\tcase '+': return left + right;","\t\tcase '-': return left - right;","\t\tcase '*': return left * right;","\t\tcase '/': return left / right;","\t\tcase '%': return left % right;","\t\tcase '==': return left == right;","\t\tcase '!=': return left != right;","\t\t}","\t}","","\tfunction $__(operator, value) {","\t\tvar handler = unaryOperators[operator];","\t\tif (value && value[handler])","\t\t\treturn value[handler]();","\t\tswitch (operator) {","\t\tcase '+': return +value;","\t\tcase '-': return -value;","\t\t}","\t}","","\tfunction compile(code, options) {","\t\tif (!code)","\t\t\treturn '';","\t\toptions = options || {};","","\t\tvar insertions = [];","","\t\tfunction getOffset(offset) {","\t\t\tfor (var i = 0, l = insertions.length; i < l; i++) {","\t\t\t\tvar insertion = insertions[i];","\t\t\t\tif (insertion[0] >= offset)","\t\t\t\t\tbreak;","\t\t\t\toffset += insertion[1];","\t\t\t}","\t\t\treturn offset;","\t\t}","","\t\tfunction getCode(node) {","\t\t\treturn code.substring(getOffset(node.range[0]),","\t\t\t\t\tgetOffset(node.range[1]));","\t\t}","","\t\tfunction getBetween(left, right) {","\t\t\treturn code.substring(getOffset(left.range[1]),","\t\t\t\t\tgetOffset(right.range[0]));","\t\t}","","\t\tfunction replaceCode(node, str) {","\t\t\tvar start = getOffset(node.range[0]),","\t\t\t\tend = getOffset(node.range[1]),","\t\t\t\tinsert = 0;","\t\t\tfor (var i = insertions.length - 1; i >= 0; i--) {","\t\t\t\tif (start > insertions[i][0]) {","\t\t\t\t\tinsert = i + 1;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tinsertions.splice(insert, 0, [start, str.length - end + start]);","\t\t\tcode = code.substring(0, start) + str + code.substring(end);","\t\t}","","\t\tfunction walkAST(node, parent) {","\t\t\tif (!node)","\t\t\t\treturn;","\t\t\tfor (var key in node) {","\t\t\t\tif (key === 'range' || key === 'loc')","\t\t\t\t\tcontinue;","\t\t\t\tvar value = node[key];","\t\t\t\tif (Array.isArray(value)) {","\t\t\t\t\tfor (var i = 0, l = value.length; i < l; i++)","\t\t\t\t\t\twalkAST(value[i], node);","\t\t\t\t} else if (value && typeof value === 'object') {","\t\t\t\t\twalkAST(value, node);","\t\t\t\t}","\t\t\t}","\t\t\tswitch (node.type) {","\t\t\tcase 'UnaryExpression':","\t\t\t\tif (node.operator in unaryOperators","\t\t\t\t\t\t&& node.argument.type !== 'Literal') {","\t\t\t\t\tvar arg = getCode(node.argument);","\t\t\t\t\treplaceCode(node, '$__(\"' + node.operator + '\", '","\t\t\t\t\t\t\t+ arg + ')');","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'BinaryExpression':","\t\t\t\tif (node.operator in binaryOperators","\t\t\t\t\t\t&& node.left.type !== 'Literal') {","\t\t\t\t\tvar left = getCode(node.left),","\t\t\t\t\t\tright = getCode(node.right),","\t\t\t\t\t\tbetween = getBetween(node.left, node.right),","\t\t\t\t\t\toperator = node.operator;","\t\t\t\t\treplaceCode(node, '__$__(' + left + ','","\t\t\t\t\t\t\t+ between.replace(new RegExp('\\\\' + operator),","\t\t\t\t\t\t\t\t'\"' + operator + '\"')","\t\t\t\t\t\t\t+ ', ' + right + ')');","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'UpdateExpression':","\t\t\tcase 'AssignmentExpression':","\t\t\t\tvar parentType = parent && parent.type;","\t\t\t\tif (!(","\t\t\t\t\t\tparentType === 'ForStatement'","\t\t\t\t\t\t|| parentType === 'BinaryExpression'","\t\t\t\t\t\t\t&& /^[=!<>]/.test(parent.operator)","\t\t\t\t\t\t|| parentType === 'MemberExpression' && parent.computed","\t\t\t\t)) {","\t\t\t\t\tif (node.type === 'UpdateExpression') {","\t\t\t\t\t\tvar arg = getCode(node.argument),","\t\t\t\t\t\t\texp = '__$__(' + arg + ', \"' + node.operator[0]","\t\t\t\t\t\t\t\t\t+ '\", 1)',","\t\t\t\t\t\t\tstr = arg + ' = ' + exp;","\t\t\t\t\t\tif (!node.prefix","\t\t\t\t\t\t\t\t&& (parentType === 'AssignmentExpression'","\t\t\t\t\t\t\t\t\t|| parentType === 'VariableDeclarator')) {","\t\t\t\t\t\t\tif (getCode(parent.left || parent.id) === arg)","\t\t\t\t\t\t\t\tstr = exp;","\t\t\t\t\t\t\tstr = arg + '; ' + str;","\t\t\t\t\t\t}","\t\t\t\t\t\treplaceCode(node, str);","\t\t\t\t\t} else {","\t\t\t\t\t\tif (/^.=$/.test(node.operator)","\t\t\t\t\t\t\t\t&& node.left.type !== 'Literal') {","\t\t\t\t\t\t\tvar left = getCode(node.left),","\t\t\t\t\t\t\t\tright = getCode(node.right),","\t\t\t\t\t\t\t\texp = left + ' = __$__(' + left + ', \"'","\t\t\t\t\t\t\t\t\t+ node.operator[0] + '\", ' + right + ')';","\t\t\t\t\t\t\treplaceCode(node, /^\\(.*\\)$/.test(getCode(node))","\t\t\t\t\t\t\t\t\t? '(' + exp + ')' : exp);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}","\t\t}","","\t\tfunction encodeVLQ(value) {","\t\t\tvar res = '',","\t\t\t\tbase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';","\t\t\tvalue = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);","\t\t\twhile (value || !res) {","\t\t\t\tvar next = value & (32 - 1);","\t\t\t\tvalue >>= 5;","\t\t\t\tif (value)","\t\t\t\t\tnext |= 32;","\t\t\t\tres += base64[next];","\t\t\t}","\t\t\treturn res;","\t\t}","","\t\tvar url = options.url || '',","\t\t\tagent = paper.agent,","\t\t\tversion = agent.versionNumber,","\t\t\toffsetCode = false,","\t\t\tsourceMaps = options.sourceMaps,","\t\t\tsource = options.source || code,","\t\t\tlineBreaks = /\\r\\n|\\n|\\r/mg,","\t\t\toffset = options.offset || 0,","\t\t\tmap;","\t\tif (sourceMaps && (agent.chrome && version >= 30","\t\t\t\t|| agent.webkit && version >= 537.76","\t\t\t\t|| agent.firefox && version >= 23","\t\t\t\t|| agent.node)) {","\t\t\tif (agent.node) {","\t\t\t\toffset -= 2;","\t\t\t} else if (window && url && !window.location.href.indexOf(url)) {","\t\t\t\tvar html = document.getElementsByTagName('html')[0].innerHTML;","\t\t\t\toffset = html.substr(0, html.indexOf(code) + 1).match(","\t\t\t\t\t\tlineBreaks).length + 1;","\t\t\t}","\t\t\toffsetCode = offset > 0 && !(","\t\t\t\t\tagent.chrome && version >= 36 ||","\t\t\t\t\tagent.safari && version >= 600 ||","\t\t\t\t\tagent.firefox && version >= 40 ||","\t\t\t\t\tagent.node);","\t\t\tvar mappings = ['AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'];","\t\t\tmappings.length = (code.match(lineBreaks) || []).length + 1","\t\t\t\t\t+ (offsetCode ? offset : 0);","\t\t\tmap = {","\t\t\t\tversion: 3,","\t\t\t\tfile: url,","\t\t\t\tnames:[],","\t\t\t\tmappings: mappings.join(';AACA'),","\t\t\t\tsourceRoot: '',","\t\t\t\tsources: [url],","\t\t\t\tsourcesContent: [source]","\t\t\t};","\t\t}","\t\twalkAST(parse(code, { ranges: true, preserveParens: true }));","\t\tif (map) {","\t\t\tif (offsetCode) {","\t\t\t\tcode = new Array(offset + 1).join('\\n') + code;","\t\t\t}","\t\t\tif (/^(inline|both)$/.test(sourceMaps)) {","\t\t\t\tcode += \"\\n//# sourceMappingURL=data:application/json;base64,\"","\t\t\t\t\t\t+ self.btoa(unescape(encodeURIComponent(","\t\t\t\t\t\t\tJSON.stringify(map))));","\t\t\t}","\t\t\tcode += \"\\n//# sourceURL=\" + (url || 'paperscript');","\t\t}","\t\treturn {","\t\t\turl: url,","\t\t\tsource: source,","\t\t\tcode: code,","\t\t\tmap: map","\t\t};","\t}","","\tfunction execute(code, scope, options) {","\t\tpaper = scope;","\t\tvar view = scope.getView(),","\t\t\ttool = /\\btool\\.\\w+|\\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\\b/","\t\t\t\t\t.test(code) && !/\\bnew\\s+Tool\\b/.test(code)","\t\t\t\t\t\t? new Tool() : null,","\t\t\ttoolHandlers = tool ? tool._events : [],","\t\t\thandlers = ['onFrame', 'onResize'].concat(toolHandlers),","\t\t\tparams = [],","\t\t\targs = [],","\t\t\tfunc,","\t\t\tcompiled = typeof code === 'object' ? code : compile(code, options);","\t\tcode = compiled.code;","\t\tfunction expose(scope, hidden) {","\t\t\tfor (var key in scope) {","\t\t\t\tif ((hidden || !/^_/.test(key)) && new RegExp('([\\\\b\\\\s\\\\W]|^)'","\t\t\t\t\t\t+ key.replace(/\\$/g, '\\\\$') + '\\\\b').test(code)) {","\t\t\t\t\tparams.push(key);","\t\t\t\t\targs.push(scope[key]);","\t\t\t\t}","\t\t\t}","\t\t}","\t\texpose({ __$__: __$__, $__: $__, paper: scope, view: view, tool: tool },","\t\t\t\ttrue);","\t\texpose(scope);","\t\thandlers = Base.each(handlers, function(key) {","\t\t\tif (new RegExp('\\\\s+' + key + '\\\\b').test(code)) {","\t\t\t\tparams.push(key);","\t\t\t\tthis.push(key + ': ' + key);","\t\t\t}","\t\t}, []).join(', ');","\t\tif (handlers)","\t\t\tcode += '\\nreturn { ' + handlers + ' };';","\t\tvar agent = paper.agent;","\t\tif (document && (agent.chrome","\t\t\t\t|| agent.firefox && agent.versionNumber < 40)) {","\t\t\tvar script = document.createElement('script'),","\t\t\t\thead = document.head || document.getElementsByTagName('head')[0];","\t\t\tif (agent.firefox)","\t\t\t\tcode = '\\n' + code;","\t\t\tscript.appendChild(document.createTextNode(","\t\t\t\t'paper._execute = function(' + params + ') {' + code + '\\n}'","\t\t\t));","\t\t\thead.appendChild(script);","\t\t\tfunc = paper._execute;","\t\t\tdelete paper._execute;","\t\t\thead.removeChild(script);","\t\t} else {","\t\t\tfunc = Function(params, code);","\t\t}","\t\tvar res = func.apply(scope, args) || {};","\t\tBase.each(toolHandlers, function(key) {","\t\t\tvar value = res[key];","\t\t\tif (value)","\t\t\t\ttool[key] = value;","\t\t});","\t\tif (view) {","\t\t\tif (res.onResize)","\t\t\t\tview.setOnResize(res.onResize);","\t\t\tview.emit('resize', {","\t\t\t\tsize: view.size,","\t\t\t\tdelta: new Point()","\t\t\t});","\t\t\tif (res.onFrame)","\t\t\t\tview.setOnFrame(res.onFrame);","\t\t\tview.requestUpdate();","\t\t}","\t\treturn compiled;","\t}","","\tfunction loadScript(script) {","\t\tif (/^text\\/(?:x-|)paperscript$/.test(script.type)","\t\t\t\t&& PaperScope.getAttribute(script, 'ignore') !== 'true') {","\t\t\tvar canvasId = PaperScope.getAttribute(script, 'canvas'),","\t\t\t\tcanvas = document.getElementById(canvasId),","\t\t\t\tsrc = script.src || script.getAttribute('data-src'),","\t\t\t\tasync = PaperScope.hasAttribute(script, 'async'),","\t\t\t\tscopeAttribute = 'data-paper-scope';","\t\t\tif (!canvas)","\t\t\t\tthrow new Error('Unable to find canvas with id \"'","\t\t\t\t\t\t+ canvasId + '\"');","\t\t\tvar scope = PaperScope.get(canvas.getAttribute(scopeAttribute))","\t\t\t\t\t\t|| new PaperScope().setup(canvas);","\t\t\tcanvas.setAttribute(scopeAttribute, scope._id);","\t\t\tif (src) {","\t\t\t\tHttp.request({","\t\t\t\t\turl: src,","\t\t\t\t\tasync: async,","\t\t\t\t\tmimeType: 'text/plain',","\t\t\t\t\tonLoad: function(code) {","\t\t\t\t\t\texecute(code, scope, src);","\t\t\t\t\t}","\t\t\t\t});","\t\t\t} else {","\t\t\t\texecute(script.innerHTML, scope, script.baseURI);","\t\t\t}","\t\t\tscript.setAttribute('data-paper-ignore', 'true');","\t\t\treturn scope;","\t\t}","\t}","","\tfunction loadAll() {","\t\tBase.each(document && document.getElementsByTagName('script'),","\t\t\t\tloadScript);","\t}","","\tfunction load(script) {","\t\treturn script ? loadScript(script) : loadAll();","\t}","","\tif (window) {","\t\tif (document.readyState === 'complete') {","\t\t\tsetTimeout(loadAll);","\t\t} else {","\t\t\tDomEvent.add(window, { load: loadAll });","\t\t}","\t}","","\treturn {","\t\tcompile: compile,","\t\texecute: execute,","\t\tload: load,","\t\tparse: parse","\t};","","}.call(this);","","paper = new (PaperScope.inject(Base.exports, {","\tBase: Base,","\tNumerical: Numerical,","\tKey: Key,","\tDomEvent: DomEvent,","\tDomElement: DomElement,","\tdocument: document,","\twindow: window,","\tSymbol: SymbolDefinition,","\tPlacedSymbol: SymbolItem","}))();","","if (paper.agent.node) {","\trequire('./node/extend.js')(paper);","}","","if (typeof define === 'function' && define.amd) {","\tdefine('paper', paper);","} else if (typeof module === 'object' && module) {","\tmodule.exports = paper;","}","","return paper;","}.call(this, typeof self === 'object' ? self : null);",""],"id":1}]]},"ace":{"folds":[],"scrolltop":388403.75,"scrollleft":0,"selection":{"start":{"row":16486,"column":0},"end":{"row":16486,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":16352,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1499220224224,"hash":"3e96122a2e5bb4d489dad58611a6ae8bce37315f"}